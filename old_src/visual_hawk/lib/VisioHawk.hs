-- Automatically generated by HaskellDirect (ihc), version 0.15
-- Created: 15:56 , Tuesday 20 July, 1999
-- Modified by tdn (see MkVisioHawk.txt)

module VisioHawk where
   
import qualified Prelude as P
import qualified Automation as A (IDispatch, outInt, propertyGet, 
   outString, outIDispatch, outBool, method0, inInt, propertySet, 
   outIDispatch, function1, inString, inIUnknown, inIDispatch, 
   Variant, outDouble, inVariant, inDouble, noInArg, inMaybe, 
   SafeArray, outSafeArray, method1, inSafeArray, function2, 
   outVariant, method4, method2)
import qualified Com (IID, mkIID, IUnknown, CLSID, mkCLSID)

-- Begin Hacked up version (tdn)
data SafeArray a = SafeArray
outSafeArray = P.undefined
inSafeArray = P.undefined

-- End Hacked up version (tdn)

data VisWinTypes
 = VisWinOther
 | VisDrawing
 | VisStencil
 | VisSheet
 | VisIcon
 | VisPageWin
 | VisPageGroupWin
 | VisMasterWin
 | VisMasterGroupWin
 deriving ()
instance P.Enum VisWinTypes where
  fromEnum v =
   case v of
   VisWinOther -> 0
   VisDrawing -> 1
   VisStencil -> 2
   VisSheet -> 3
   VisIcon -> 4
   VisPageWin -> 128
   VisPageGroupWin -> 160
   VisMasterWin -> 64
   VisMasterGroupWin -> 96
  
  toEnum v =
   case v of
   0 -> VisWinOther
   1 -> VisDrawing
   2 -> VisStencil
   3 -> VisSheet
   4 -> VisIcon
   128 -> VisPageWin
   160 -> VisPageGroupWin
   64 -> VisMasterWin
   96 -> VisMasterGroupWin
   _ -> P.error "unmarshallVisWinTypes: illegal enum value "
  
data VisUnitCodes
 = VisNumber
 | VisDate
 | VisDurationUnits
 | VisElapsedWeek
 | VisElapsedDay
 | VisElapsedHour
 | VisElapsedMin
 | VisElapsedSec
 | VisTypeUnits
 | VisPoints
 | VisPicas
 | VisDidots
 | VisCiceros
 | VisPageUnits
 | VisDrawingUnits
 | VisInches
 | VisFeet
 | VisFeetAndInches
 | VisMiles
 | VisCentimeters
 | VisMillimeters
 | VisMeters
 | VisKilometers
 | VisInchFrac
 | VisMileFrac
 | VisYards
 | VisNautMiles
 | VisAngleUnits
 | VisDegrees
 | VisDegreeMinSec
 | VisRadians
 | VisMin
 | VisSec
 | VisCurrency
 | VisNoCast
 deriving ()
instance P.Enum VisUnitCodes where
  fromEnum v =
   case v of
   VisNumber -> 32
   VisDate -> 40
   VisDurationUnits -> 42
   VisElapsedWeek -> 43
   VisElapsedDay -> 44
   VisElapsedHour -> 45
   VisElapsedMin -> 46
   VisElapsedSec -> 47
   VisTypeUnits -> 48
   VisPoints -> 50
   VisPicas -> 51
   VisDidots -> 53
   VisCiceros -> 54
   VisPageUnits -> 63
   VisDrawingUnits -> 64
   VisInches -> 65
   VisFeet -> 66
   VisFeetAndInches -> 67
   VisMiles -> 68
   VisCentimeters -> 69
   VisMillimeters -> 70
   VisMeters -> 71
   VisKilometers -> 72
   VisInchFrac -> 73
   VisMileFrac -> 74
   VisYards -> 75
   VisNautMiles -> 76
   VisAngleUnits -> 80
   VisDegrees -> 81
   VisDegreeMinSec -> 82
   VisRadians -> 83
   VisMin -> 84
   VisSec -> 85
   VisCurrency -> 111
   VisNoCast -> 252
  
  toEnum v =
   case v of
   32 -> VisNumber
   40 -> VisDate
   42 -> VisDurationUnits
   43 -> VisElapsedWeek
   44 -> VisElapsedDay
   45 -> VisElapsedHour
   46 -> VisElapsedMin
   47 -> VisElapsedSec
   48 -> VisTypeUnits
   50 -> VisPoints
   51 -> VisPicas
   53 -> VisDidots
   54 -> VisCiceros
   63 -> VisPageUnits
   64 -> VisDrawingUnits
   65 -> VisInches
   66 -> VisFeet
   67 -> VisFeetAndInches
   68 -> VisMiles
   69 -> VisCentimeters
   70 -> VisMillimeters
   71 -> VisMeters
   72 -> VisKilometers
   73 -> VisInchFrac
   74 -> VisMileFrac
   75 -> VisYards
   76 -> VisNautMiles
   80 -> VisAngleUnits
   81 -> VisDegrees
   82 -> VisDegreeMinSec
   83 -> VisRadians
   84 -> VisMin
   85 -> VisSec
   111 -> VisCurrency
   252 -> VisNoCast
   _ -> P.error "unmarshallVisUnitCodes: illegal enum value "
  
data VisUniqueIDArgs
 = VisGetGUID
 | VisGetOrMakeGUID
 | VisDeleteGUID
 deriving ()
instance P.Enum VisUniqueIDArgs where
  fromEnum v =
   case v of
   VisGetGUID -> 0
   VisGetOrMakeGUID -> 1
   VisDeleteGUID -> 2
  
  toEnum v =
   case v of
   0 -> VisGetGUID
   1 -> VisGetOrMakeGUID
   2 -> VisDeleteGUID
   _ -> P.error "unmarshallVisUniqueIDArgs: illegal enum value "
  
data VisUIStringIDs
 = VisStrIDBASESTRINGID
 | VisStrIDALLSTYLES
 | VisStrIDTEXTSTYLE
 | VisStrIDLINESTYLE
 | VisStrIDFILLSTYLE
 | VisStrIDZOOM
 | VisStrIDFONT
 | VisStrIDPOINTSIZE
 | VisStrIDLEFTCOLOR
 | VisStrIDRIGHTCOLOR
 | VisStrIDSTATUS
 | VisStrIDPRINTPREVIEW
 | VisStrIDTEXTEDIT
 | VisStrIDCLOSE
 | VisStrIDNONE
 | VisStrIDCHANGE
 | VisStrIDSPACE
 | VisStrIDREADY
 | VisStrIDWAIT
 | VisStrIDDRAG
 | VisStrIDDRAW
 | VisStrIDEDIT
 | VisStrIDMOVE
 | VisStrIDSIZE
 | VisStrIDROTATE
 | VisStrIDCROP
 | VisStrIDSCROLL
 | VisStrIDADD
 | VisStrIDEXTEND
 | VisStrIDCOPY
 | VisStrIDLINECOLORS
 | VisStrIDLINEWEIGHTS
 | VisStrIDLINEPATTERNS
 | VisStrIDFILLCOLORS
 | VisStrIDFILLPATTERNS
 | VisStrIDTEXTCOLORS
 | VisStrIDSHADOWS
 | VisStrIDLINEENDS
 | VisStrIDCORNERS
 | VisStrIDNOSHADOW
 deriving ()
instance P.Enum VisUIStringIDs where
  fromEnum v =
   case v of
   VisStrIDBASESTRINGID -> 2000
   VisStrIDALLSTYLES -> 2000
   VisStrIDTEXTSTYLE -> 2001
   VisStrIDLINESTYLE -> 2002
   VisStrIDFILLSTYLE -> 2003
   VisStrIDZOOM -> 2004
   VisStrIDFONT -> 2005
   VisStrIDPOINTSIZE -> 2006
   VisStrIDLEFTCOLOR -> 2007
   VisStrIDRIGHTCOLOR -> 2008
   VisStrIDSTATUS -> 2009
   VisStrIDPRINTPREVIEW -> 2010
   VisStrIDTEXTEDIT -> 2011
   VisStrIDCLOSE -> 2050
   VisStrIDNONE -> 2300
   VisStrIDCHANGE -> 2301
   VisStrIDSPACE -> 2302
   VisStrIDREADY -> 2320
   VisStrIDWAIT -> 2321
   VisStrIDDRAG -> 2322
   VisStrIDDRAW -> 2323
   VisStrIDEDIT -> 2324
   VisStrIDMOVE -> 2325
   VisStrIDSIZE -> 2326
   VisStrIDROTATE -> 2327
   VisStrIDCROP -> 2328
   VisStrIDSCROLL -> 2329
   VisStrIDADD -> 2330
   VisStrIDEXTEND -> 2331
   VisStrIDCOPY -> 2332
   VisStrIDLINECOLORS -> 2051
   VisStrIDLINEWEIGHTS -> 2052
   VisStrIDLINEPATTERNS -> 2053
   VisStrIDFILLCOLORS -> 2054
   VisStrIDFILLPATTERNS -> 2055
   VisStrIDTEXTCOLORS -> 2056
   VisStrIDSHADOWS -> 2057
   VisStrIDLINEENDS -> 2058
   VisStrIDCORNERS -> 2059
   VisStrIDNOSHADOW -> 2060
  
  toEnum v =
   case v of
   2000 -> VisStrIDBASESTRINGID
   2000 -> VisStrIDALLSTYLES
   2001 -> VisStrIDTEXTSTYLE
   2002 -> VisStrIDLINESTYLE
   2003 -> VisStrIDFILLSTYLE
   2004 -> VisStrIDZOOM
   2005 -> VisStrIDFONT
   2006 -> VisStrIDPOINTSIZE
   2007 -> VisStrIDLEFTCOLOR
   2008 -> VisStrIDRIGHTCOLOR
   2009 -> VisStrIDSTATUS
   2010 -> VisStrIDPRINTPREVIEW
   2011 -> VisStrIDTEXTEDIT
   2050 -> VisStrIDCLOSE
   2300 -> VisStrIDNONE
   2301 -> VisStrIDCHANGE
   2302 -> VisStrIDSPACE
   2320 -> VisStrIDREADY
   2321 -> VisStrIDWAIT
   2322 -> VisStrIDDRAG
   2323 -> VisStrIDDRAW
   2324 -> VisStrIDEDIT
   2325 -> VisStrIDMOVE
   2326 -> VisStrIDSIZE
   2327 -> VisStrIDROTATE
   2328 -> VisStrIDCROP
   2329 -> VisStrIDSCROLL
   2330 -> VisStrIDADD
   2331 -> VisStrIDEXTEND
   2332 -> VisStrIDCOPY
   2051 -> VisStrIDLINECOLORS
   2052 -> VisStrIDLINEWEIGHTS
   2053 -> VisStrIDLINEPATTERNS
   2054 -> VisStrIDFILLCOLORS
   2055 -> VisStrIDFILLPATTERNS
   2056 -> VisStrIDTEXTCOLORS
   2057 -> VisStrIDSHADOWS
   2058 -> VisStrIDLINEENDS
   2059 -> VisStrIDCORNERS
   2060 -> VisStrIDNOSHADOW
   _ -> P.error "unmarshallVisUIStringIDs: illegal enum value "
  
data VisUISpacingTypes
 = VisCtrlSpacingNONE
 | VisCtrlSpacingVARIABLE_BEFORE
 | VisCtrlSpacingVARIABLE_AFTER
 | VisCtrlSpacingFIXED_BEFORE
 | VisCtrlSpacingFIXED_AFTER
 | VisCtrlSpacingNEW_ROW
 | VisCtrlSpacingTB_NOTFIXED
 | VisCtrlSpacingPALETTERIGHT
 | VisCtrlSpacingNEW_ROW_PALETTERIGHT
 deriving ()
instance P.Enum VisUISpacingTypes where
  fromEnum v =
   case v of
   VisCtrlSpacingNONE -> 0
   VisCtrlSpacingVARIABLE_BEFORE -> 1
   VisCtrlSpacingVARIABLE_AFTER -> 2
   VisCtrlSpacingFIXED_BEFORE -> 4
   VisCtrlSpacingFIXED_AFTER -> 8
   VisCtrlSpacingNEW_ROW -> 16
   VisCtrlSpacingTB_NOTFIXED -> 32
   VisCtrlSpacingPALETTERIGHT -> 64
   VisCtrlSpacingNEW_ROW_PALETTERIGHT -> 80
  
  toEnum v =
   case v of
   0 -> VisCtrlSpacingNONE
   1 -> VisCtrlSpacingVARIABLE_BEFORE
   2 -> VisCtrlSpacingVARIABLE_AFTER
   4 -> VisCtrlSpacingFIXED_BEFORE
   8 -> VisCtrlSpacingFIXED_AFTER
   16 -> VisCtrlSpacingNEW_ROW
   32 -> VisCtrlSpacingTB_NOTFIXED
   64 -> VisCtrlSpacingPALETTERIGHT
   80 -> VisCtrlSpacingNEW_ROW_PALETTERIGHT
   _ -> P.error "unmarshallVisUISpacingTypes: illegal enum value "
  
data VisUIObjSets
 = VisUIObjSetNoDocument
 | VisUIObjSetDrawing
 | VisUIObjSetStencil
 | VisUIObjSetShapeSheet
 | VisUIObjSetIcon
 | VisUIObjSetInPlace
 | VisUIObjSetPrintPreview
 | VisUIObjSetText
 | VisUIObjSetCntx_DrawObjSel
 | VisUIObjSetCntx_DrawOleObjSel
 | VisUIObjSetCntx_DrawNoObjSel
 | VisUIObjSetCntx_InPlaceNoObj
 | VisUIObjSetCntx_TextEdit
 | VisUIObjSetCntx_StencilRO
 | VisUIObjSetCntx_ShapeSheet
 | VisUIObjSetCntx_Toolbar
 | VisUIObjSetCntx_FullScreen
 | VisUIObjSetBinderInPlace
 | VisUIObjSetCntx_Debug
 | VisUIObjSetCntx_StencilRW
 | VisUIObjSetCntx_StencilDocked
 | VisUIObjSetHostingInPlace
 | VisUIObjSetCntx_Hyperlink
 | VisUIObjSetPal_LineColors
 | VisUIObjSetPal_LineWeights
 | VisUIObjSetPal_LinePatterns
 | VisUIObjSetPal_FillColors
 | VisUIObjSetPal_FillPatterns
 | VisUIObjSetPal_TextColors
 | VisUIObjSetPal_AlignShapes
 | VisUIObjSetPal_DistributeShapes
 | VisUIObjSetPal_Shadow
 | VisUIObjSetPal_LineEnds
 | VisUIObjSetPal_CornerRounding
 deriving ()
instance P.Enum VisUIObjSets where
  fromEnum v =
   case v of
   VisUIObjSetNoDocument -> 1
   VisUIObjSetDrawing -> 2
   VisUIObjSetStencil -> 3
   VisUIObjSetShapeSheet -> 4
   VisUIObjSetIcon -> 5
   VisUIObjSetInPlace -> 6
   VisUIObjSetPrintPreview -> 7
   VisUIObjSetText -> 8
   VisUIObjSetCntx_DrawObjSel -> 9
   VisUIObjSetCntx_DrawOleObjSel -> 10
   VisUIObjSetCntx_DrawNoObjSel -> 11
   VisUIObjSetCntx_InPlaceNoObj -> 12
   VisUIObjSetCntx_TextEdit -> 13
   VisUIObjSetCntx_StencilRO -> 14
   VisUIObjSetCntx_ShapeSheet -> 15
   VisUIObjSetCntx_Toolbar -> 16
   VisUIObjSetCntx_FullScreen -> 17
   VisUIObjSetBinderInPlace -> 18
   VisUIObjSetCntx_Debug -> 19
   VisUIObjSetCntx_StencilRW -> 20
   VisUIObjSetCntx_StencilDocked -> 21
   VisUIObjSetHostingInPlace -> 22
   VisUIObjSetCntx_Hyperlink -> 23
   VisUIObjSetPal_LineColors -> 24
   VisUIObjSetPal_LineWeights -> 25
   VisUIObjSetPal_LinePatterns -> 26
   VisUIObjSetPal_FillColors -> 27
   VisUIObjSetPal_FillPatterns -> 28
   VisUIObjSetPal_TextColors -> 29
   VisUIObjSetPal_AlignShapes -> 30
   VisUIObjSetPal_DistributeShapes -> 31
   VisUIObjSetPal_Shadow -> 32
   VisUIObjSetPal_LineEnds -> 33
   VisUIObjSetPal_CornerRounding -> 34
  
  toEnum v =
   case v of
   1 -> VisUIObjSetNoDocument
   2 -> VisUIObjSetDrawing
   3 -> VisUIObjSetStencil
   4 -> VisUIObjSetShapeSheet
   5 -> VisUIObjSetIcon
   6 -> VisUIObjSetInPlace
   7 -> VisUIObjSetPrintPreview
   8 -> VisUIObjSetText
   9 -> VisUIObjSetCntx_DrawObjSel
   10 -> VisUIObjSetCntx_DrawOleObjSel
   11 -> VisUIObjSetCntx_DrawNoObjSel
   12 -> VisUIObjSetCntx_InPlaceNoObj
   13 -> VisUIObjSetCntx_TextEdit
   14 -> VisUIObjSetCntx_StencilRO
   15 -> VisUIObjSetCntx_ShapeSheet
   16 -> VisUIObjSetCntx_Toolbar
   17 -> VisUIObjSetCntx_FullScreen
   18 -> VisUIObjSetBinderInPlace
   19 -> VisUIObjSetCntx_Debug
   20 -> VisUIObjSetCntx_StencilRW
   21 -> VisUIObjSetCntx_StencilDocked
   22 -> VisUIObjSetHostingInPlace
   23 -> VisUIObjSetCntx_Hyperlink
   24 -> VisUIObjSetPal_LineColors
   25 -> VisUIObjSetPal_LineWeights
   26 -> VisUIObjSetPal_LinePatterns
   27 -> VisUIObjSetPal_FillColors
   28 -> VisUIObjSetPal_FillPatterns
   29 -> VisUIObjSetPal_TextColors
   30 -> VisUIObjSetPal_AlignShapes
   31 -> VisUIObjSetPal_DistributeShapes
   32 -> VisUIObjSetPal_Shadow
   33 -> VisUIObjSetPal_LineEnds
   34 -> VisUIObjSetPal_CornerRounding
   _ -> P.error "unmarshallVisUIObjSets: illegal enum value "
  
data VisUIIconIDs
 = VisIconIXNEW
 | VisIconIXOPEN
 | VisIconIXOPENSTENCIL
 | VisIconIXSAVE
 | VisIconIXPRINT
 | VisIconIXPRINTPREVIEW
 | VisIconIXCUT
 | VisIconIXCOPY
 | VisIconIXPASTE
 | VisIconIXCLEAR
 | VisIconIXUNDO
 | VisIconIXREDO
 | VisIconIXREPEAT
 | VisIconIXPREVIOUSPAGE
 | VisIconIXNEXTPAGE
 | VisIconIXZOOMOUT
 | VisIconIXZOOMIN
 | VisIconIXZOOM100
 | VisIconIXFLIPHORIZONTAL
 | VisIconIXFLIPVERTICAL
 | VisIconIXPOINTERTOOL
 | VisIconIXPENCILTOOL
 | VisIconIXLINETOOL
 | VisIconIXQTRARCTOOL
 | VisIconIXRECTANGLETOOL
 | VisIconIXOVALTOOL
 | VisIconIXSTAMPTOOL
 | VisIconIXTEXTOOL
 | VisIconIXROTATETOOL
 | VisIconIXCROP
 | VisIconIXCONNECTIONPTTOOL
 | VisIconIXSNAP
 | VisIconIXGLUE
 | VisIconIXRULER
 | VisIconIXGRID
 | VisIconIXGUIDE
 | VisIconIXCONNECTIONPOINTS
 | VisIconIXROTATECLOCKWISE
 | VisIconIXROTATECOUNTERCLOCKWISE
 | VisIconIXNEWWINDOW
 | VisIconIXCORNERSTYLE
 | VisIconIXLINEEND
 | VisIconIXSHADOWSTYLE
 | VisIconIXFILLCOLOR
 | VisIconIXLINECOLOR
 | VisIconIXLINEWEIGHT
 | VisIconIXLINEPATTERN
 | VisIconIXFILLPATTERN
 | VisIconIXPOINTSIZEDOWN
 | VisIconIXPOINTSIZEUP
 | VisIconIXBOLD
 | VisIconIXITALIC
 | VisIconIXUNDERLINE
 | VisIconIXSUPERSCRIPT
 | VisIconIXSUBSCRIPT
 | VisIconIXTEXTCOLOR
 | VisIconIXTEXTALIGNLEFT
 | VisIconIXTEXTALIGNCENTER
 | VisIconIXTEXTALIGNRIGHT
 | VisIconIXTEXTALIGNJUSTIFY
 | VisIconIXTEXTALIGNTOP
 | VisIconIXTEXTALIGNMIDDLE
 | VisIconIXTEXTALIGNBOTTOM
 | VisIconIXALIGN
 | VisIconIXALIGNLEFT
 | VisIconIXALIGNCENTER
 | VisIconIXALIGNRIGHT
 | VisIconIXALIGNTOP
 | VisIconIXALIGNMIDDLE
 | VisIconIXALIGNBOTTOM
 | VisIconIXDISTRIBUTE
 | VisIconIXDHORZ_EQSPACE
 | VisIconIXDHORZ_CENTER
 | VisIconIXDVERT_EQSPACE
 | VisIconIXDVERT_MIDDLE
 | VisIconIXCONNECTSHAPES
 | VisIconIXFIRSTPAGE
 | VisIconIXLASTPAGE
 | VisIconIXPAGEBREAKS
 | VisIconIXSPLINETOOL
 | VisIconIXICONNAME
 | VisIconIXICONONLY
 | VisIconIXNAMEONLY
 | VisIconIXARRANGE
 | VisIconIXCANCEL
 | VisIconIXACCEPT
 | VisIconIXICONPENCIL
 | VisIconIXICONBUCKET
 | VisIconIXICONLASSO
 | VisIconIXICONSELNET
 | VisIconIXBRINGFRONT
 | VisIconIXSENDBACK
 | VisIconIXGROUP
 | VisIconIXUNGROUP
 | VisIconIXCASCADE
 | VisIconIXTILE
 | VisIconIXCONNECTORTOOL
 | VisIconIXTEXTBLOCKTOOL
 | VisIconIXWHOLEPAGE
 | VisIconIXSINGLETILE
 | VisIconIXSPELLING
 | VisIconIXFORMATPAINTER
 | VisIconIXHELPMODE
 | VisIconIXLAYERPROPERTIES
 | VisIconIXLAYOUTSHAPES
 | VisIconIXINSERTHYPERLINK
 | VisIconIXSEARCHTHEWEB
 | VisIconIXGOBACK
 | VisIconIXGOFORWARD
 | VisIconIXWEBTOOLBAR
 | VisIconIXSHAPEEXPL
 | VisIconIXCUSTPROP
 | VisIconIXROTATETEXT
 | VisIconIXBULLETS
 | VisIconIXDECRINDENT
 | VisIconIXINCRINDENT
 | VisIconIXDECRPARA
 | VisIconIXINCRPARA
 | VisIconIXINSERTCONTROL
 | VisIconIXDESIGNMODE
 | VisIconIXSHAPESHEET
 | VisIconIXMACROS
 | VisIconIXVBEDITOR
 deriving ()
instance P.Enum VisUIIconIDs where
  fromEnum v =
   case v of
   VisIconIXNEW -> 0
   VisIconIXOPEN -> 1
   VisIconIXOPENSTENCIL -> 2
   VisIconIXSAVE -> 3
   VisIconIXPRINT -> 4
   VisIconIXPRINTPREVIEW -> 5
   VisIconIXCUT -> 6
   VisIconIXCOPY -> 7
   VisIconIXPASTE -> 8
   VisIconIXCLEAR -> 9
   VisIconIXUNDO -> 10
   VisIconIXREDO -> 11
   VisIconIXREPEAT -> 12
   VisIconIXPREVIOUSPAGE -> 13
   VisIconIXNEXTPAGE -> 14
   VisIconIXZOOMOUT -> 15
   VisIconIXZOOMIN -> 16
   VisIconIXZOOM100 -> 17
   VisIconIXFLIPHORIZONTAL -> 18
   VisIconIXFLIPVERTICAL -> 19
   VisIconIXPOINTERTOOL -> 20
   VisIconIXPENCILTOOL -> 21
   VisIconIXLINETOOL -> 22
   VisIconIXQTRARCTOOL -> 23
   VisIconIXRECTANGLETOOL -> 24
   VisIconIXOVALTOOL -> 25
   VisIconIXSTAMPTOOL -> 26
   VisIconIXTEXTOOL -> 27
   VisIconIXROTATETOOL -> 28
   VisIconIXCROP -> 29
   VisIconIXCONNECTIONPTTOOL -> 30
   VisIconIXSNAP -> 31
   VisIconIXGLUE -> 32
   VisIconIXRULER -> 33
   VisIconIXGRID -> 34
   VisIconIXGUIDE -> 35
   VisIconIXCONNECTIONPOINTS -> 36
   VisIconIXROTATECLOCKWISE -> 37
   VisIconIXROTATECOUNTERCLOCKWISE -> 38
   VisIconIXNEWWINDOW -> 39
   VisIconIXCORNERSTYLE -> 40
   VisIconIXLINEEND -> 41
   VisIconIXSHADOWSTYLE -> 42
   VisIconIXFILLCOLOR -> 43
   VisIconIXLINECOLOR -> 44
   VisIconIXLINEWEIGHT -> 45
   VisIconIXLINEPATTERN -> 46
   VisIconIXFILLPATTERN -> 47
   VisIconIXPOINTSIZEDOWN -> 48
   VisIconIXPOINTSIZEUP -> 49
   VisIconIXBOLD -> 50
   VisIconIXITALIC -> 51
   VisIconIXUNDERLINE -> 52
   VisIconIXSUPERSCRIPT -> 53
   VisIconIXSUBSCRIPT -> 54
   VisIconIXTEXTCOLOR -> 55
   VisIconIXTEXTALIGNLEFT -> 56
   VisIconIXTEXTALIGNCENTER -> 57
   VisIconIXTEXTALIGNRIGHT -> 58
   VisIconIXTEXTALIGNJUSTIFY -> 59
   VisIconIXTEXTALIGNTOP -> 60
   VisIconIXTEXTALIGNMIDDLE -> 61
   VisIconIXTEXTALIGNBOTTOM -> 62
   VisIconIXALIGN -> 63
   VisIconIXALIGNLEFT -> 64
   VisIconIXALIGNCENTER -> 65
   VisIconIXALIGNRIGHT -> 66
   VisIconIXALIGNTOP -> 67
   VisIconIXALIGNMIDDLE -> 68
   VisIconIXALIGNBOTTOM -> 69
   VisIconIXDISTRIBUTE -> 70
   VisIconIXDHORZ_EQSPACE -> 71
   VisIconIXDHORZ_CENTER -> 72
   VisIconIXDVERT_EQSPACE -> 73
   VisIconIXDVERT_MIDDLE -> 74
   VisIconIXCONNECTSHAPES -> 75
   VisIconIXFIRSTPAGE -> 76
   VisIconIXLASTPAGE -> 77
   VisIconIXPAGEBREAKS -> 78
   VisIconIXSPLINETOOL -> 79
   VisIconIXICONNAME -> 80
   VisIconIXICONONLY -> 81
   VisIconIXNAMEONLY -> 82
   VisIconIXARRANGE -> 83
   VisIconIXCANCEL -> 84
   VisIconIXACCEPT -> 85
   VisIconIXICONPENCIL -> 86
   VisIconIXICONBUCKET -> 87
   VisIconIXICONLASSO -> 88
   VisIconIXICONSELNET -> 89
   VisIconIXBRINGFRONT -> 90
   VisIconIXSENDBACK -> 91
   VisIconIXGROUP -> 92
   VisIconIXUNGROUP -> 93
   VisIconIXCASCADE -> 94
   VisIconIXTILE -> 95
   VisIconIXCONNECTORTOOL -> 96
   VisIconIXTEXTBLOCKTOOL -> 97
   VisIconIXWHOLEPAGE -> 98
   VisIconIXSINGLETILE -> 99
   VisIconIXSPELLING -> 100
   VisIconIXFORMATPAINTER -> 101
   VisIconIXHELPMODE -> 102
   VisIconIXLAYERPROPERTIES -> 103
   VisIconIXLAYOUTSHAPES -> 104
   VisIconIXINSERTHYPERLINK -> 105
   VisIconIXSEARCHTHEWEB -> 106
   VisIconIXGOBACK -> 107
   VisIconIXGOFORWARD -> 108
   VisIconIXWEBTOOLBAR -> 109
   VisIconIXSHAPEEXPL -> 110
   VisIconIXCUSTPROP -> 111
   VisIconIXROTATETEXT -> 112
   VisIconIXBULLETS -> 113
   VisIconIXDECRINDENT -> 114
   VisIconIXINCRINDENT -> 115
   VisIconIXDECRPARA -> 116
   VisIconIXINCRPARA -> 117
   VisIconIXINSERTCONTROL -> 118
   VisIconIXDESIGNMODE -> 119
   VisIconIXSHAPESHEET -> 120
   VisIconIXMACROS -> 121
   VisIconIXVBEDITOR -> 122
  
  toEnum v =
   case v of
   0 -> VisIconIXNEW
   1 -> VisIconIXOPEN
   2 -> VisIconIXOPENSTENCIL
   3 -> VisIconIXSAVE
   4 -> VisIconIXPRINT
   5 -> VisIconIXPRINTPREVIEW
   6 -> VisIconIXCUT
   7 -> VisIconIXCOPY
   8 -> VisIconIXPASTE
   9 -> VisIconIXCLEAR
   10 -> VisIconIXUNDO
   11 -> VisIconIXREDO
   12 -> VisIconIXREPEAT
   13 -> VisIconIXPREVIOUSPAGE
   14 -> VisIconIXNEXTPAGE
   15 -> VisIconIXZOOMOUT
   16 -> VisIconIXZOOMIN
   17 -> VisIconIXZOOM100
   18 -> VisIconIXFLIPHORIZONTAL
   19 -> VisIconIXFLIPVERTICAL
   20 -> VisIconIXPOINTERTOOL
   21 -> VisIconIXPENCILTOOL
   22 -> VisIconIXLINETOOL
   23 -> VisIconIXQTRARCTOOL
   24 -> VisIconIXRECTANGLETOOL
   25 -> VisIconIXOVALTOOL
   26 -> VisIconIXSTAMPTOOL
   27 -> VisIconIXTEXTOOL
   28 -> VisIconIXROTATETOOL
   29 -> VisIconIXCROP
   30 -> VisIconIXCONNECTIONPTTOOL
   31 -> VisIconIXSNAP
   32 -> VisIconIXGLUE
   33 -> VisIconIXRULER
   34 -> VisIconIXGRID
   35 -> VisIconIXGUIDE
   36 -> VisIconIXCONNECTIONPOINTS
   37 -> VisIconIXROTATECLOCKWISE
   38 -> VisIconIXROTATECOUNTERCLOCKWISE
   39 -> VisIconIXNEWWINDOW
   40 -> VisIconIXCORNERSTYLE
   41 -> VisIconIXLINEEND
   42 -> VisIconIXSHADOWSTYLE
   43 -> VisIconIXFILLCOLOR
   44 -> VisIconIXLINECOLOR
   45 -> VisIconIXLINEWEIGHT
   46 -> VisIconIXLINEPATTERN
   47 -> VisIconIXFILLPATTERN
   48 -> VisIconIXPOINTSIZEDOWN
   49 -> VisIconIXPOINTSIZEUP
   50 -> VisIconIXBOLD
   51 -> VisIconIXITALIC
   52 -> VisIconIXUNDERLINE
   53 -> VisIconIXSUPERSCRIPT
   54 -> VisIconIXSUBSCRIPT
   55 -> VisIconIXTEXTCOLOR
   56 -> VisIconIXTEXTALIGNLEFT
   57 -> VisIconIXTEXTALIGNCENTER
   58 -> VisIconIXTEXTALIGNRIGHT
   59 -> VisIconIXTEXTALIGNJUSTIFY
   60 -> VisIconIXTEXTALIGNTOP
   61 -> VisIconIXTEXTALIGNMIDDLE
   62 -> VisIconIXTEXTALIGNBOTTOM
   63 -> VisIconIXALIGN
   64 -> VisIconIXALIGNLEFT
   65 -> VisIconIXALIGNCENTER
   66 -> VisIconIXALIGNRIGHT
   67 -> VisIconIXALIGNTOP
   68 -> VisIconIXALIGNMIDDLE
   69 -> VisIconIXALIGNBOTTOM
   70 -> VisIconIXDISTRIBUTE
   71 -> VisIconIXDHORZ_EQSPACE
   72 -> VisIconIXDHORZ_CENTER
   73 -> VisIconIXDVERT_EQSPACE
   74 -> VisIconIXDVERT_MIDDLE
   75 -> VisIconIXCONNECTSHAPES
   76 -> VisIconIXFIRSTPAGE
   77 -> VisIconIXLASTPAGE
   78 -> VisIconIXPAGEBREAKS
   79 -> VisIconIXSPLINETOOL
   80 -> VisIconIXICONNAME
   81 -> VisIconIXICONONLY
   82 -> VisIconIXNAMEONLY
   83 -> VisIconIXARRANGE
   84 -> VisIconIXCANCEL
   85 -> VisIconIXACCEPT
   86 -> VisIconIXICONPENCIL
   87 -> VisIconIXICONBUCKET
   88 -> VisIconIXICONLASSO
   89 -> VisIconIXICONSELNET
   90 -> VisIconIXBRINGFRONT
   91 -> VisIconIXSENDBACK
   92 -> VisIconIXGROUP
   93 -> VisIconIXUNGROUP
   94 -> VisIconIXCASCADE
   95 -> VisIconIXTILE
   96 -> VisIconIXCONNECTORTOOL
   97 -> VisIconIXTEXTBLOCKTOOL
   98 -> VisIconIXWHOLEPAGE
   99 -> VisIconIXSINGLETILE
   100 -> VisIconIXSPELLING
   101 -> VisIconIXFORMATPAINTER
   102 -> VisIconIXHELPMODE
   103 -> VisIconIXLAYERPROPERTIES
   104 -> VisIconIXLAYOUTSHAPES
   105 -> VisIconIXINSERTHYPERLINK
   106 -> VisIconIXSEARCHTHEWEB
   107 -> VisIconIXGOBACK
   108 -> VisIconIXGOFORWARD
   109 -> VisIconIXWEBTOOLBAR
   110 -> VisIconIXSHAPEEXPL
   111 -> VisIconIXCUSTPROP
   112 -> VisIconIXROTATETEXT
   113 -> VisIconIXBULLETS
   114 -> VisIconIXDECRINDENT
   115 -> VisIconIXINCRINDENT
   116 -> VisIconIXDECRPARA
   117 -> VisIconIXINCRPARA
   118 -> VisIconIXINSERTCONTROL
   119 -> VisIconIXDESIGNMODE
   120 -> VisIconIXSHAPESHEET
   121 -> VisIconIXMACROS
   122 -> VisIconIXVBEDITOR
   _ -> P.error "unmarshallVisUIIconIDs: illegal enum value "
  
data VisUICtrlTypes
 = VisCtrlTypeEND
 | VisCtrlTypeSTATE
 | VisCtrlTypeBUTTON
 | VisCtrlTypeSTATE_BUTTON
 | VisCtrlTypePALETTEBUTTON
 | VisCtrlTypeHIERBUTTON
 | VisCtrlTypeSTATE_HIERBUTTON
 | VisCtrlTypeDROPBUTTON
 | VisCtrlTypeSTATE_DROPBUTTON
 | VisCtrlTypeSPINBUTTON
 | VisCtrlTypePUSHBUTTON
 | VisCtrlTypeOWNERDRAW_BUTTON
 | VisCtrlTypeEDITBOX
 | VisCtrlTypeCOMBOBOX
 | VisCtrlTypeCOMBODRAW
 | VisCtrlTypeLISTBOX
 | VisCtrlTypeLISTBOXDRAW
 | VisCtrlTypeCOLORBOX
 | VisCtrlTypeLABEL
 | VisCtrlTypeMESSAGE
 | VisCtrlTypeSPACER
 deriving ()
instance P.Enum VisUICtrlTypes where
  fromEnum v =
   case v of
   VisCtrlTypeEND -> 0
   VisCtrlTypeSTATE -> 1
   VisCtrlTypeBUTTON -> 2
   VisCtrlTypeSTATE_BUTTON -> 3
   VisCtrlTypePALETTEBUTTON -> 16
   VisCtrlTypeHIERBUTTON -> 4
   VisCtrlTypeSTATE_HIERBUTTON -> 5
   VisCtrlTypeDROPBUTTON -> 8
   VisCtrlTypeSTATE_DROPBUTTON -> 9
   VisCtrlTypeSPINBUTTON -> 16
   VisCtrlTypePUSHBUTTON -> 32
   VisCtrlTypeOWNERDRAW_BUTTON -> 33
   VisCtrlTypeEDITBOX -> 64
   VisCtrlTypeCOMBOBOX -> 128
   VisCtrlTypeCOMBODRAW -> 256
   VisCtrlTypeLISTBOX -> 512
   VisCtrlTypeLISTBOXDRAW -> 513
   VisCtrlTypeCOLORBOX -> 1024
   VisCtrlTypeLABEL -> 2048
   VisCtrlTypeMESSAGE -> 4096
   VisCtrlTypeSPACER -> 16384
  
  toEnum v =
   case v of
   0 -> VisCtrlTypeEND
   1 -> VisCtrlTypeSTATE
   2 -> VisCtrlTypeBUTTON
   3 -> VisCtrlTypeSTATE_BUTTON
   16 -> VisCtrlTypePALETTEBUTTON
   4 -> VisCtrlTypeHIERBUTTON
   5 -> VisCtrlTypeSTATE_HIERBUTTON
   8 -> VisCtrlTypeDROPBUTTON
   9 -> VisCtrlTypeSTATE_DROPBUTTON
   16 -> VisCtrlTypeSPINBUTTON
   32 -> VisCtrlTypePUSHBUTTON
   33 -> VisCtrlTypeOWNERDRAW_BUTTON
   64 -> VisCtrlTypeEDITBOX
   128 -> VisCtrlTypeCOMBOBOX
   256 -> VisCtrlTypeCOMBODRAW
   512 -> VisCtrlTypeLISTBOX
   513 -> VisCtrlTypeLISTBOXDRAW
   1024 -> VisCtrlTypeCOLORBOX
   2048 -> VisCtrlTypeLABEL
   4096 -> VisCtrlTypeMESSAGE
   16384 -> VisCtrlTypeSPACER
   _ -> P.error "unmarshallVisUICtrlTypes: illegal enum value "
  
data VisUICtrlIDs
 = VisCtrlIDNEW
 | VisCtrlIDOPEN
 | VisCtrlIDOPENSTEN
 | VisCtrlIDSAVE
 | VisCtrlIDPRINT
 | VisCtrlIDPREVIEW
 | VisCtrlIDCUT
 | VisCtrlIDCOPY
 | VisCtrlIDPASTE
 | VisCtrlIDCLEAR
 | VisCtrlIDUNDO
 | VisCtrlIDREDO
 | VisCtrlIDREPEAT
 | VisCtrlIDPREVIOUSPAGE
 | VisCtrlIDNEXTPAGE
 | VisCtrlIDZOOMOUT
 | VisCtrlIDZOOMIN
 | VisCtrlIDZOOM100
 | VisCtrlIDFLIPHORZ
 | VisCtrlIDFLIPVERT
 | VisCtrlIDPOINTERTOOL
 | VisCtrlIDPENCILTOOL
 | VisCtrlIDLINETOOL
 | VisCtrlIDQTRARCTOOL
 | VisCtrlIDRECTTOOL
 | VisCtrlIDOVALTOOL
 | VisCtrlIDSTAMPTOOL
 | VisCtrlIDTEXTTOOL
 | VisCtrlIDROTATETOOL
 | VisCtrlIDCROPTOOL
 | VisCtrlIDCONNECTIONPTTOOL
 | VisCtrlIDSNAP
 | VisCtrlIDGLUE
 | VisCtrlIDRULER
 | VisCtrlIDGRID
 | VisCtrlIDGUIDE
 | VisCtrlIDCONNECT
 | VisCtrlIDROTATECLOCKWISE
 | VisCtrlIDROTATECOUNTER
 | VisCtrlIDNEWWINDOW
 | VisCtrlIDCORNERSTYLE
 | VisCtrlIDLINEEND
 | VisCtrlIDSHADOWSTYLE
 | VisCtrlIDFILLCOLOR
 | VisCtrlIDLINECOLOR
 | VisCtrlIDLINEWEIGHT
 | VisCtrlIDLINEPATTERN
 | VisCtrlIDFILLPATTERN
 | VisCtrlIDPOINTSIZEDOWN
 | VisCtrlIDPOINTSIZEUP
 | VisCtrlIDBOLD
 | VisCtrlIDITALIC
 | VisCtrlIDULINE
 | VisCtrlIDSUPERSCRIPT
 | VisCtrlIDSUBSCRIPT
 | VisCtrlIDTEXTCOLOR
 | VisCtrlIDTEXTLEFT
 | VisCtrlIDTEXTCENTER
 | VisCtrlIDTEXTRIGHT
 | VisCtrlIDTEXTJUSTIFY
 | VisCtrlIDTEXTTOP
 | VisCtrlIDTEXTMIDDLE
 | VisCtrlIDTEXTBOTTOM
 | VisCtrlIDALIGN
 | VisCtrlIDALIGNLEFT
 | VisCtrlIDALIGNCENTER
 | VisCtrlIDALIGNRIGHT
 | VisCtrlIDALIGNTOP
 | VisCtrlIDALIGNMIDDLE
 | VisCtrlIDALIGNBOTTOM
 | VisCtrlIDDISTRIBUTE
 | VisCtrlIDDHORZ_EQSPACE
 | VisCtrlIDDHORZ_CENTER
 | VisCtrlIDDVERT_EQSPACE
 | VisCtrlIDDVERT_MIDDLE
 | VisCtrlIDCONNECTSHAPES
 | VisCtrlIDFIRSTPAGE
 | VisCtrlIDLASTPAGE
 | VisCtrlIDPAGEBREAKS
 | VisCtrlIDICONNAME
 | VisCtrlIDICONONLY
 | VisCtrlIDNAMEONLY
 | VisCtrlIDARRANGEICONS
 | VisCtrlIDCANCELFORMULA
 | VisCtrlIDACCEPTFORMULA
 | VisCtrlIDICONPENCIL
 | VisCtrlIDICONBUCKET
 | VisCtrlIDICONLASSO
 | VisCtrlIDICONSELNET
 | VisCtrlIDBRINGFRONT
 | VisCtrlIDSENDBACK
 | VisCtrlIDGROUP
 | VisCtrlIDUNGROUP
 | VisCtrlIDCASCADE
 | VisCtrlIDTILE
 | VisCtrlIDCONNECTORTOOL
 | VisCtrlIDTEXTBLOCKTOOL
 | VisCtrlIDWHOLEPAGE
 | VisCtrlIDSINGLETILE
 | VisCtrlIDFORMULA
 | VisCtrlIDSPACER
 | VisCtrlIDALLSTYLESCOMBO
 | VisCtrlIDTEXTSTYLECOMBO
 | VisCtrlIDLINESTYLECOMBO
 | VisCtrlIDFILLSTYLECOMBO
 | VisCtrlIDZOOMCOMBO
 | VisCtrlIDFONTCOMBO
 | VisCtrlIDPOINTSIZECOMBO
 | VisCtrlIDALLSTYLESLIST
 | VisCtrlIDTEXTSTYLELIST
 | VisCtrlIDLINESTYLELIST
 | VisCtrlIDFILLSTYLELIST
 | VisCtrlIDZOOMLIST
 | VisCtrlIDFONTLIST
 | VisCtrlIDPOINTSIZELIST
 | VisCtrlIDGOTOPAGELIST
 | VisCtrlIDCLOSE
 | VisCtrlIDLEFTCOLORBOX
 | VisCtrlIDRIGHTCOLORBOX
 | VisCtrlIDCOLOR1
 | VisCtrlIDCOLOR2
 | VisCtrlIDCOLOR3
 | VisCtrlIDCOLOR4
 | VisCtrlIDCOLOR5
 | VisCtrlIDCOLOR6
 | VisCtrlIDCOLOR7
 | VisCtrlIDCOLOR8
 | VisCtrlIDCOLOR9
 | VisCtrlIDCOLOR10
 | VisCtrlIDCOLOR11
 | VisCtrlIDCOLOR12
 | VisCtrlIDCOLOR13
 | VisCtrlIDCOLOR14
 | VisCtrlIDCOLOR15
 | VisCtrlIDCOLOR16
 | VisCtrlIDTRANSPARENT
 | VisCtrlIDALLSTYLESLABEL
 | VisCtrlIDTEXTSTYLELABEL
 | VisCtrlIDLINESTYLELABEL
 | VisCtrlIDFILLSTYLELABEL
 | VisCtrlIDZOOMLABEL
 | VisCtrlIDFONTLABEL
 | VisCtrlIDPOINTSIZELABEL
 | VisCtrlIDLEFTCOLORLABEL
 | VisCtrlIDRIGHTCOLORLABEL
 | VisCtrlIDSTATUSLABEL
 | VisCtrlIDPREVIEWLABEL
 | VisCtrlIDSTATUSREADOUT
 | VisCtrlIDSTATUSMSG_1
 | VisCtrlIDSTATUSMSG_2
 | VisCtrlIDSTATUSMSG_3
 | VisCtrlIDSTATUSMSG_4
 | VisCtrlIDSTATUSMSG_5
 | VisCtrlIDSTATUSMSG_6
 | VisCtrlIDSTATUSMSG_7
 | VisCtrlIDSTATUSMSG_8
 | VisCtrlIDSTATUSMSG_9
 | VisCtrlIDSPLINETOOL
 | VisCtrlIDSPELLING
 | VisCtrlIDFORMATPAINTER
 | VisCtrlIDHELPMODE
 | VisCtrlIDLAYERPROPERTIES
 | VisCtrlIDLAYOUTSHAPES
 | VisCtrlIDINSERTHYPERLINK
 | VisCtrlIDSEARCHTHEWEB
 | VisCtrlIDGOBACK
 | VisCtrlIDGOFORWARD
 | VisCtrlIDWEBTOOLBAR
 | VisCtrlIDSHAPEEXPL
 | VisCtrlIDCUSTPROP
 | VisCtrlIDROTATETEXT
 | VisCtrlIDBULLETS
 | VisCtrlIDDECRINDENT
 | VisCtrlIDINCRINDENT
 | VisCtrlIDDECRPARA
 | VisCtrlIDINCRPARA
 | VisCtrlIDINSERTCONTROL
 | VisCtrlIDDESIGNMODE
 | VisCtrlIDSHAPESHEET
 | VisCtrlIDSHAPELAYER
 | VisCtrlIDGOTOPAGE
 | VisCtrlIDLINECOLORS
 | VisCtrlIDLINEWEIGHTS
 | VisCtrlIDLINEPATTERNS
 | VisCtrlIDFILLCOLORS
 | VisCtrlIDFILLPATTERNS
 | VisCtrlIDTEXTCOLORS
 | VisCtrlIDMACROS
 | VisCtrlIDVBEDITOR
 | VisCtrlIDSHAPELAYERCOMBO
 | VisCtrlIDSHAPELAYERLIST
 | VisCtrlIDALIGNSHAPES
 | VisCtrlIDDISTRIBUTESHAPES
 | VisCtrlIDMSG_PAGES
 deriving ()
instance P.Enum VisUICtrlIDs where
  fromEnum v =
   case v of
   VisCtrlIDNEW -> 8383
   VisCtrlIDOPEN -> 1
   VisCtrlIDOPENSTEN -> 2
   VisCtrlIDSAVE -> 3
   VisCtrlIDPRINT -> 4
   VisCtrlIDPREVIEW -> 5
   VisCtrlIDCUT -> 6
   VisCtrlIDCOPY -> 7
   VisCtrlIDPASTE -> 8
   VisCtrlIDCLEAR -> 9
   VisCtrlIDUNDO -> 10
   VisCtrlIDREDO -> 11
   VisCtrlIDREPEAT -> 12
   VisCtrlIDPREVIOUSPAGE -> 13
   VisCtrlIDNEXTPAGE -> 14
   VisCtrlIDZOOMOUT -> 15
   VisCtrlIDZOOMIN -> 16
   VisCtrlIDZOOM100 -> 17
   VisCtrlIDFLIPHORZ -> 18
   VisCtrlIDFLIPVERT -> 19
   VisCtrlIDPOINTERTOOL -> 20
   VisCtrlIDPENCILTOOL -> 21
   VisCtrlIDLINETOOL -> 22
   VisCtrlIDQTRARCTOOL -> 23
   VisCtrlIDRECTTOOL -> 24
   VisCtrlIDOVALTOOL -> 25
   VisCtrlIDSTAMPTOOL -> 26
   VisCtrlIDTEXTTOOL -> 27
   VisCtrlIDROTATETOOL -> 28
   VisCtrlIDCROPTOOL -> 29
   VisCtrlIDCONNECTIONPTTOOL -> 30
   VisCtrlIDSNAP -> 31
   VisCtrlIDGLUE -> 32
   VisCtrlIDRULER -> 33
   VisCtrlIDGRID -> 34
   VisCtrlIDGUIDE -> 35
   VisCtrlIDCONNECT -> 36
   VisCtrlIDROTATECLOCKWISE -> 37
   VisCtrlIDROTATECOUNTER -> 38
   VisCtrlIDNEWWINDOW -> 39
   VisCtrlIDCORNERSTYLE -> 40
   VisCtrlIDLINEEND -> 41
   VisCtrlIDSHADOWSTYLE -> 42
   VisCtrlIDFILLCOLOR -> 43
   VisCtrlIDLINECOLOR -> 44
   VisCtrlIDLINEWEIGHT -> 45
   VisCtrlIDLINEPATTERN -> 46
   VisCtrlIDFILLPATTERN -> 47
   VisCtrlIDPOINTSIZEDOWN -> 48
   VisCtrlIDPOINTSIZEUP -> 49
   VisCtrlIDBOLD -> 50
   VisCtrlIDITALIC -> 51
   VisCtrlIDULINE -> 52
   VisCtrlIDSUPERSCRIPT -> 53
   VisCtrlIDSUBSCRIPT -> 54
   VisCtrlIDTEXTCOLOR -> 55
   VisCtrlIDTEXTLEFT -> 56
   VisCtrlIDTEXTCENTER -> 57
   VisCtrlIDTEXTRIGHT -> 58
   VisCtrlIDTEXTJUSTIFY -> 59
   VisCtrlIDTEXTTOP -> 60
   VisCtrlIDTEXTMIDDLE -> 61
   VisCtrlIDTEXTBOTTOM -> 62
   VisCtrlIDALIGN -> 63
   VisCtrlIDALIGNLEFT -> 64
   VisCtrlIDALIGNCENTER -> 65
   VisCtrlIDALIGNRIGHT -> 66
   VisCtrlIDALIGNTOP -> 67
   VisCtrlIDALIGNMIDDLE -> 68
   VisCtrlIDALIGNBOTTOM -> 69
   VisCtrlIDDISTRIBUTE -> 70
   VisCtrlIDDHORZ_EQSPACE -> 71
   VisCtrlIDDHORZ_CENTER -> 72
   VisCtrlIDDVERT_EQSPACE -> 73
   VisCtrlIDDVERT_MIDDLE -> 74
   VisCtrlIDCONNECTSHAPES -> 75
   VisCtrlIDFIRSTPAGE -> 76
   VisCtrlIDLASTPAGE -> 77
   VisCtrlIDPAGEBREAKS -> 78
   VisCtrlIDICONNAME -> 80
   VisCtrlIDICONONLY -> 81
   VisCtrlIDNAMEONLY -> 82
   VisCtrlIDARRANGEICONS -> 83
   VisCtrlIDCANCELFORMULA -> 84
   VisCtrlIDACCEPTFORMULA -> 85
   VisCtrlIDICONPENCIL -> 86
   VisCtrlIDICONBUCKET -> 87
   VisCtrlIDICONLASSO -> 88
   VisCtrlIDICONSELNET -> 89
   VisCtrlIDBRINGFRONT -> 90
   VisCtrlIDSENDBACK -> 91
   VisCtrlIDGROUP -> 92
   VisCtrlIDUNGROUP -> 93
   VisCtrlIDCASCADE -> 94
   VisCtrlIDTILE -> 95
   VisCtrlIDCONNECTORTOOL -> 96
   VisCtrlIDTEXTBLOCKTOOL -> 97
   VisCtrlIDWHOLEPAGE -> 98
   VisCtrlIDSINGLETILE -> 99
   VisCtrlIDFORMULA -> 190
   VisCtrlIDSPACER -> 191
   VisCtrlIDALLSTYLESCOMBO -> 200
   VisCtrlIDTEXTSTYLECOMBO -> 201
   VisCtrlIDLINESTYLECOMBO -> 202
   VisCtrlIDFILLSTYLECOMBO -> 203
   VisCtrlIDZOOMCOMBO -> 204
   VisCtrlIDFONTCOMBO -> 205
   VisCtrlIDPOINTSIZECOMBO -> 206
   VisCtrlIDALLSTYLESLIST -> 220
   VisCtrlIDTEXTSTYLELIST -> 221
   VisCtrlIDLINESTYLELIST -> 222
   VisCtrlIDFILLSTYLELIST -> 223
   VisCtrlIDZOOMLIST -> 224
   VisCtrlIDFONTLIST -> 225
   VisCtrlIDPOINTSIZELIST -> 226
   VisCtrlIDGOTOPAGELIST -> 227
   VisCtrlIDCLOSE -> 240
   VisCtrlIDLEFTCOLORBOX -> 300
   VisCtrlIDRIGHTCOLORBOX -> 301
   VisCtrlIDCOLOR1 -> 302
   VisCtrlIDCOLOR2 -> 303
   VisCtrlIDCOLOR3 -> 304
   VisCtrlIDCOLOR4 -> 305
   VisCtrlIDCOLOR5 -> 306
   VisCtrlIDCOLOR6 -> 307
   VisCtrlIDCOLOR7 -> 308
   VisCtrlIDCOLOR8 -> 309
   VisCtrlIDCOLOR9 -> 310
   VisCtrlIDCOLOR10 -> 311
   VisCtrlIDCOLOR11 -> 312
   VisCtrlIDCOLOR12 -> 313
   VisCtrlIDCOLOR13 -> 314
   VisCtrlIDCOLOR14 -> 315
   VisCtrlIDCOLOR15 -> 316
   VisCtrlIDCOLOR16 -> 317
   VisCtrlIDTRANSPARENT -> 318
   VisCtrlIDALLSTYLESLABEL -> 400
   VisCtrlIDTEXTSTYLELABEL -> 401
   VisCtrlIDLINESTYLELABEL -> 402
   VisCtrlIDFILLSTYLELABEL -> 403
   VisCtrlIDZOOMLABEL -> 404
   VisCtrlIDFONTLABEL -> 405
   VisCtrlIDPOINTSIZELABEL -> 406
   VisCtrlIDLEFTCOLORLABEL -> 407
   VisCtrlIDRIGHTCOLORLABEL -> 408
   VisCtrlIDSTATUSLABEL -> 409
   VisCtrlIDPREVIEWLABEL -> 410
   VisCtrlIDSTATUSREADOUT -> 500
   VisCtrlIDSTATUSMSG_1 -> 501
   VisCtrlIDSTATUSMSG_2 -> 502
   VisCtrlIDSTATUSMSG_3 -> 503
   VisCtrlIDSTATUSMSG_4 -> 504
   VisCtrlIDSTATUSMSG_5 -> 505
   VisCtrlIDSTATUSMSG_6 -> 506
   VisCtrlIDSTATUSMSG_7 -> 507
   VisCtrlIDSTATUSMSG_8 -> 508
   VisCtrlIDSTATUSMSG_9 -> 509
   VisCtrlIDSPLINETOOL -> 79
   VisCtrlIDSPELLING -> 100
   VisCtrlIDFORMATPAINTER -> 101
   VisCtrlIDHELPMODE -> 102
   VisCtrlIDLAYERPROPERTIES -> 103
   VisCtrlIDLAYOUTSHAPES -> 104
   VisCtrlIDINSERTHYPERLINK -> 105
   VisCtrlIDSEARCHTHEWEB -> 106
   VisCtrlIDGOBACK -> 107
   VisCtrlIDGOFORWARD -> 108
   VisCtrlIDWEBTOOLBAR -> 109
   VisCtrlIDSHAPEEXPL -> 110
   VisCtrlIDCUSTPROP -> 111
   VisCtrlIDROTATETEXT -> 112
   VisCtrlIDBULLETS -> 113
   VisCtrlIDDECRINDENT -> 114
   VisCtrlIDINCRINDENT -> 115
   VisCtrlIDDECRPARA -> 116
   VisCtrlIDINCRPARA -> 117
   VisCtrlIDINSERTCONTROL -> 118
   VisCtrlIDDESIGNMODE -> 119
   VisCtrlIDSHAPESHEET -> 120
   VisCtrlIDSHAPELAYER -> 247
   VisCtrlIDGOTOPAGE -> 207
   VisCtrlIDLINECOLORS -> 241
   VisCtrlIDLINEWEIGHTS -> 242
   VisCtrlIDLINEPATTERNS -> 243
   VisCtrlIDFILLCOLORS -> 244
   VisCtrlIDFILLPATTERNS -> 245
   VisCtrlIDTEXTCOLORS -> 246
   VisCtrlIDMACROS -> 121
   VisCtrlIDVBEDITOR -> 122
   VisCtrlIDSHAPELAYERCOMBO -> 208
   VisCtrlIDSHAPELAYERLIST -> 228
   VisCtrlIDALIGNSHAPES -> 260
   VisCtrlIDDISTRIBUTESHAPES -> 261
   VisCtrlIDMSG_PAGES -> 510
  
  toEnum v =
   case v of
   8383 -> VisCtrlIDNEW
   1 -> VisCtrlIDOPEN
   2 -> VisCtrlIDOPENSTEN
   3 -> VisCtrlIDSAVE
   4 -> VisCtrlIDPRINT
   5 -> VisCtrlIDPREVIEW
   6 -> VisCtrlIDCUT
   7 -> VisCtrlIDCOPY
   8 -> VisCtrlIDPASTE
   9 -> VisCtrlIDCLEAR
   10 -> VisCtrlIDUNDO
   11 -> VisCtrlIDREDO
   12 -> VisCtrlIDREPEAT
   13 -> VisCtrlIDPREVIOUSPAGE
   14 -> VisCtrlIDNEXTPAGE
   15 -> VisCtrlIDZOOMOUT
   16 -> VisCtrlIDZOOMIN
   17 -> VisCtrlIDZOOM100
   18 -> VisCtrlIDFLIPHORZ
   19 -> VisCtrlIDFLIPVERT
   20 -> VisCtrlIDPOINTERTOOL
   21 -> VisCtrlIDPENCILTOOL
   22 -> VisCtrlIDLINETOOL
   23 -> VisCtrlIDQTRARCTOOL
   24 -> VisCtrlIDRECTTOOL
   25 -> VisCtrlIDOVALTOOL
   26 -> VisCtrlIDSTAMPTOOL
   27 -> VisCtrlIDTEXTTOOL
   28 -> VisCtrlIDROTATETOOL
   29 -> VisCtrlIDCROPTOOL
   30 -> VisCtrlIDCONNECTIONPTTOOL
   31 -> VisCtrlIDSNAP
   32 -> VisCtrlIDGLUE
   33 -> VisCtrlIDRULER
   34 -> VisCtrlIDGRID
   35 -> VisCtrlIDGUIDE
   36 -> VisCtrlIDCONNECT
   37 -> VisCtrlIDROTATECLOCKWISE
   38 -> VisCtrlIDROTATECOUNTER
   39 -> VisCtrlIDNEWWINDOW
   40 -> VisCtrlIDCORNERSTYLE
   41 -> VisCtrlIDLINEEND
   42 -> VisCtrlIDSHADOWSTYLE
   43 -> VisCtrlIDFILLCOLOR
   44 -> VisCtrlIDLINECOLOR
   45 -> VisCtrlIDLINEWEIGHT
   46 -> VisCtrlIDLINEPATTERN
   47 -> VisCtrlIDFILLPATTERN
   48 -> VisCtrlIDPOINTSIZEDOWN
   49 -> VisCtrlIDPOINTSIZEUP
   50 -> VisCtrlIDBOLD
   51 -> VisCtrlIDITALIC
   52 -> VisCtrlIDULINE
   53 -> VisCtrlIDSUPERSCRIPT
   54 -> VisCtrlIDSUBSCRIPT
   55 -> VisCtrlIDTEXTCOLOR
   56 -> VisCtrlIDTEXTLEFT
   57 -> VisCtrlIDTEXTCENTER
   58 -> VisCtrlIDTEXTRIGHT
   59 -> VisCtrlIDTEXTJUSTIFY
   60 -> VisCtrlIDTEXTTOP
   61 -> VisCtrlIDTEXTMIDDLE
   62 -> VisCtrlIDTEXTBOTTOM
   63 -> VisCtrlIDALIGN
   64 -> VisCtrlIDALIGNLEFT
   65 -> VisCtrlIDALIGNCENTER
   66 -> VisCtrlIDALIGNRIGHT
   67 -> VisCtrlIDALIGNTOP
   68 -> VisCtrlIDALIGNMIDDLE
   69 -> VisCtrlIDALIGNBOTTOM
   70 -> VisCtrlIDDISTRIBUTE
   71 -> VisCtrlIDDHORZ_EQSPACE
   72 -> VisCtrlIDDHORZ_CENTER
   73 -> VisCtrlIDDVERT_EQSPACE
   74 -> VisCtrlIDDVERT_MIDDLE
   75 -> VisCtrlIDCONNECTSHAPES
   76 -> VisCtrlIDFIRSTPAGE
   77 -> VisCtrlIDLASTPAGE
   78 -> VisCtrlIDPAGEBREAKS
   80 -> VisCtrlIDICONNAME
   81 -> VisCtrlIDICONONLY
   82 -> VisCtrlIDNAMEONLY
   83 -> VisCtrlIDARRANGEICONS
   84 -> VisCtrlIDCANCELFORMULA
   85 -> VisCtrlIDACCEPTFORMULA
   86 -> VisCtrlIDICONPENCIL
   87 -> VisCtrlIDICONBUCKET
   88 -> VisCtrlIDICONLASSO
   89 -> VisCtrlIDICONSELNET
   90 -> VisCtrlIDBRINGFRONT
   91 -> VisCtrlIDSENDBACK
   92 -> VisCtrlIDGROUP
   93 -> VisCtrlIDUNGROUP
   94 -> VisCtrlIDCASCADE
   95 -> VisCtrlIDTILE
   96 -> VisCtrlIDCONNECTORTOOL
   97 -> VisCtrlIDTEXTBLOCKTOOL
   98 -> VisCtrlIDWHOLEPAGE
   99 -> VisCtrlIDSINGLETILE
   190 -> VisCtrlIDFORMULA
   191 -> VisCtrlIDSPACER
   200 -> VisCtrlIDALLSTYLESCOMBO
   201 -> VisCtrlIDTEXTSTYLECOMBO
   202 -> VisCtrlIDLINESTYLECOMBO
   203 -> VisCtrlIDFILLSTYLECOMBO
   204 -> VisCtrlIDZOOMCOMBO
   205 -> VisCtrlIDFONTCOMBO
   206 -> VisCtrlIDPOINTSIZECOMBO
   220 -> VisCtrlIDALLSTYLESLIST
   221 -> VisCtrlIDTEXTSTYLELIST
   222 -> VisCtrlIDLINESTYLELIST
   223 -> VisCtrlIDFILLSTYLELIST
   224 -> VisCtrlIDZOOMLIST
   225 -> VisCtrlIDFONTLIST
   226 -> VisCtrlIDPOINTSIZELIST
   227 -> VisCtrlIDGOTOPAGELIST
   240 -> VisCtrlIDCLOSE
   300 -> VisCtrlIDLEFTCOLORBOX
   301 -> VisCtrlIDRIGHTCOLORBOX
   302 -> VisCtrlIDCOLOR1
   303 -> VisCtrlIDCOLOR2
   304 -> VisCtrlIDCOLOR3
   305 -> VisCtrlIDCOLOR4
   306 -> VisCtrlIDCOLOR5
   307 -> VisCtrlIDCOLOR6
   308 -> VisCtrlIDCOLOR7
   309 -> VisCtrlIDCOLOR8
   310 -> VisCtrlIDCOLOR9
   311 -> VisCtrlIDCOLOR10
   312 -> VisCtrlIDCOLOR11
   313 -> VisCtrlIDCOLOR12
   314 -> VisCtrlIDCOLOR13
   315 -> VisCtrlIDCOLOR14
   316 -> VisCtrlIDCOLOR15
   317 -> VisCtrlIDCOLOR16
   318 -> VisCtrlIDTRANSPARENT
   400 -> VisCtrlIDALLSTYLESLABEL
   401 -> VisCtrlIDTEXTSTYLELABEL
   402 -> VisCtrlIDLINESTYLELABEL
   403 -> VisCtrlIDFILLSTYLELABEL
   404 -> VisCtrlIDZOOMLABEL
   405 -> VisCtrlIDFONTLABEL
   406 -> VisCtrlIDPOINTSIZELABEL
   407 -> VisCtrlIDLEFTCOLORLABEL
   408 -> VisCtrlIDRIGHTCOLORLABEL
   409 -> VisCtrlIDSTATUSLABEL
   410 -> VisCtrlIDPREVIEWLABEL
   500 -> VisCtrlIDSTATUSREADOUT
   501 -> VisCtrlIDSTATUSMSG_1
   502 -> VisCtrlIDSTATUSMSG_2
   503 -> VisCtrlIDSTATUSMSG_3
   504 -> VisCtrlIDSTATUSMSG_4
   505 -> VisCtrlIDSTATUSMSG_5
   506 -> VisCtrlIDSTATUSMSG_6
   507 -> VisCtrlIDSTATUSMSG_7
   508 -> VisCtrlIDSTATUSMSG_8
   509 -> VisCtrlIDSTATUSMSG_9
   79 -> VisCtrlIDSPLINETOOL
   100 -> VisCtrlIDSPELLING
   101 -> VisCtrlIDFORMATPAINTER
   102 -> VisCtrlIDHELPMODE
   103 -> VisCtrlIDLAYERPROPERTIES
   104 -> VisCtrlIDLAYOUTSHAPES
   105 -> VisCtrlIDINSERTHYPERLINK
   106 -> VisCtrlIDSEARCHTHEWEB
   107 -> VisCtrlIDGOBACK
   108 -> VisCtrlIDGOFORWARD
   109 -> VisCtrlIDWEBTOOLBAR
   110 -> VisCtrlIDSHAPEEXPL
   111 -> VisCtrlIDCUSTPROP
   112 -> VisCtrlIDROTATETEXT
   113 -> VisCtrlIDBULLETS
   114 -> VisCtrlIDDECRINDENT
   115 -> VisCtrlIDINCRINDENT
   116 -> VisCtrlIDDECRPARA
   117 -> VisCtrlIDINCRPARA
   118 -> VisCtrlIDINSERTCONTROL
   119 -> VisCtrlIDDESIGNMODE
   120 -> VisCtrlIDSHAPESHEET
   247 -> VisCtrlIDSHAPELAYER
   207 -> VisCtrlIDGOTOPAGE
   241 -> VisCtrlIDLINECOLORS
   242 -> VisCtrlIDLINEWEIGHTS
   243 -> VisCtrlIDLINEPATTERNS
   244 -> VisCtrlIDFILLCOLORS
   245 -> VisCtrlIDFILLPATTERNS
   246 -> VisCtrlIDTEXTCOLORS
   121 -> VisCtrlIDMACROS
   122 -> VisCtrlIDVBEDITOR
   208 -> VisCtrlIDSHAPELAYERCOMBO
   228 -> VisCtrlIDSHAPELAYERLIST
   260 -> VisCtrlIDALIGNSHAPES
   261 -> VisCtrlIDDISTRIBUTESHAPES
   510 -> VisCtrlIDMSG_PAGES
   _ -> P.error "unmarshallVisUICtrlIDs: illegal enum value "
  
data VisUICtrlAtts
 = VisCtrlAlignmentLEFT
 | VisCtrlAlignmentCENTER
 | VisCtrlAlignmentRIGHT
 | VisCtrlAlignmentBOX
 | VisCtrlAlignmentLEFTBOX
 | VisCtrlAlignmentCENTERBOX
 | VisCtrlAlignmentRIGHTBOX
 deriving ()
instance P.Enum VisUICtrlAtts where
  fromEnum v =
   case v of
   VisCtrlAlignmentLEFT -> 1
   VisCtrlAlignmentCENTER -> 2
   VisCtrlAlignmentRIGHT -> 4
   VisCtrlAlignmentBOX -> 128
   VisCtrlAlignmentLEFTBOX -> 129
   VisCtrlAlignmentCENTERBOX -> 130
   VisCtrlAlignmentRIGHTBOX -> 132
  
  toEnum v =
   case v of
   1 -> VisCtrlAlignmentLEFT
   2 -> VisCtrlAlignmentCENTER
   4 -> VisCtrlAlignmentRIGHT
   128 -> VisCtrlAlignmentBOX
   129 -> VisCtrlAlignmentLEFTBOX
   130 -> VisCtrlAlignmentCENTERBOX
   132 -> VisCtrlAlignmentRIGHTBOX
   _ -> P.error "unmarshallVisUICtrlAtts: illegal enum value "
  
data VisUICmds
 = VisCmdHierarchical
 | VisCmdFileNew
 | VisCmdFileOpen
 | VisCmdFileClose
 | VisCmdFileSave
 | VisCmdFileSaveAs
 | VisCmdFileSaveWorkspace
 | VisCmdFileImport
 | VisCmdFileSummaryInfoDlg
 | VisCmdFilePrint
 | VisCmdFileExit
 | VisCmdEditUndo
 | VisCmdEditRedo
 | VisCmdEditRepeat
 | VisCmdUFEditCut
 | VisCmdUFEditCopy
 | VisCmdUFEditPaste
 | VisCmdUFEditClear
 | VisCmdUFEditDuplicate
 | VisCmdUFEditSelectAll
 | VisCmdEditSelectSpecial
 | VisCmdEditPasteSpecial
 | VisCmdEditOpenObject
 | VisCmdEditLinks
 | VisCmdEditInsertObject
 | VisCmdEditInsertField
 | VisCmdViewFitInWindow
 | VisCmdView75
 | VisCmdView100
 | VisCmdView150
 | VisCmdView200
 | VisCmdViewCustom
 | VisCmdViewRulers
 | VisCmdViewGrid
 | VisCmdViewGuides
 | VisCmdViewConnections
 | VisCmdEditFind
 | VisCmdViewStatusBar
 | VisCmdObjectBringForward
 | VisCmdObjectBringToFront
 | VisCmdObjectSendBackward
 | VisCmdObjectSendToBack
 | VisCmdObjectAlignObjects
 | VisCmdObjectConnectObjects
 | VisCmdObjectGroup
 | VisCmdObjectUngroup
 | VisCmdObjectAddToGroup
 | VisCmdObjectRemoveFromGroup
 | VisCmdObjectConvertToGroup
 | VisCmdObjectRotate90
 | VisCmdObjectFlipVertical
 | VisCmdObjectFlipHorizontal
 | VisCmdObjectReverse
 | VisCmdObjectUnion
 | VisCmdObjectCombine
 | VisCmdObjectFragment
 | VisCmdFormatStyle
 | VisCmdFormatDefineStyles
 | VisCmdFormatLine
 | VisCmdFormatFill
 | VisCmdFormatText
 | VisCmdFormatFont
 | VisCmdFormatParagraph
 | VisCmdFormatTabs
 | VisCmdFormatBlock
 | VisCmdFormatBehavior
 | VisCmdFormatProtection
 | VisCmdFormatSpecial
 | VisCmdOptionsEditDrawing
 | VisCmdOptionsEditBackground
 | VisCmdOptionsPageSetup
 | VisCmdOptionsGoToDrawing
 | VisCmdOptionsNewPage
 | VisCmdOptionsDeletePages
 | VisCmdOptionsReorderPages
 | VisCmdOptionsPreferences
 | VisCmdOptionsColorPaletteDlg
 | VisCmdOptionsProtectDocument
 | VisCmdOptionsSnapGlueSetup
 | VisCmdWindowNewWindow
 | VisCmdWindowCascadeAll
 | VisCmdWindowTileAll
 | VisCmdWindowShowShapeSheet
 | VisCmdWindowShowMasterObjects
 | VisCmdRunAddOnMenu
 | VisCmdWindowShowDrawPage
 | VisCmdHelpContents
 | VisCmdDecreaseIndent
 | VisCmdIncreaseIndent
 | VisCmdDecreaseParaSpacing
 | VisCmdIncreaseParaSpacing
 | VisCmdTextRotate90
 | VisCmdHelpAboutVisio
 | VisCmdStenEditIcon
 | VisCmdStenEditDrawing
 | VisCmdStenNameMaster
 | VisCmdStenNewMaster
 | VisCmdStenImageMaster
 | VisCmdStenCleanup
 | VisCmdSWShowValues
 | VisCmdSWShowFormulas
 | VisCmdSWShowSectionsDlg
 | VisCmdSWPasteNameDlg
 | VisCmdSWPasteFunctionDlg
 | VisCmdSWInsertRow
 | VisCmdSWInsertRowAfter
 | VisCmdSWChangeRowTypeDlg
 | VisCmdSWDeleteRow
 | VisCmdSWAddSectionDlg
 | VisCmdSWDeleteSection
 | VisCmdFormatDoubleClick
 | VisCmdDrawLineStyle
 | VisCmdDrawFillStyle
 | VisCmdDrawSnap
 | VisCmdDrawGlue
 | VisCmdDrawZoom
 | VisCmdTextStyle
 | VisCmdTextFont
 | VisCmdTextSize
 | VisCmdTextBold
 | VisCmdTextItalic
 | VisCmdTextSmallCaps
 | VisCmdTextSuperscript
 | VisCmdTextSubscript
 | VisCmdTextUline
 | VisCmdSWCancel
 | VisCmdSWAccept
 | VisCmdSWFormula
 | VisCmdSWShowToggle
 | VisCmdIconLeftColor
 | VisCmdIconPencilTool
 | VisCmdRecalcObjectWH
 | VisCmdTurnToPrevPage
 | VisCmdTurnToNextPage
 | VisCmdEditReplace
 | VisCmdAlignObjectLeft
 | VisCmdAlignObjectCenter
 | VisCmdAlignObjectRight
 | VisCmdAlignObjectTop
 | VisCmdAlignObjectMiddle
 | VisCmdAlignObjectBottom
 | VisCmdCenterDrawing
 | VisCmdDeselectAll
 | VisCmdTextEditState
 | VisCmdZoomIn
 | VisCmdZoomOut
 | VisCmdDRPointerTool
 | VisCmdDRPencilTool
 | VisCmdDRLineTool
 | VisCmdDRQtrArcTool
 | VisCmdDRRectTool
 | VisCmdDROvalTool
 | VisCmdDRConnectorTool
 | VisCmdDRConnectionTool
 | VisCmdDRTextTool
 | VisCmdDRRotateTool
 | VisCmdObjectDistributeDlg
 | VisCmdDistributeHSpace
 | VisCmdDistributeCenter
 | VisCmdDistributeVSpace
 | VisCmdDistributeMiddle
 | VisCmdDlgLotusNotesFields
 | VisCmdToolsSpelling
 | VisCmdFormatPainter
 | VisCmdStenFloating
 | VisCmdView50
 | VisCmdView400
 | VisCmdSendAsMail
 | VisCmdShapeActions
 | VisCmdDRSplineTool
 | VisCmdFormatCustPropEdit
 | VisCmdRulerGridDlg
 | VisCmdFormatShadow
 | VisCmdFormatCorners
 | VisCmdToolsInventory
 | VisCmdPageSizeScale
 | VisCmdStenSwitchSides
 | VisCmdToolsArrayShapesAddOn
 | VisCmdSetLineWeight
 | VisCmdSetLinePattern
 | VisCmdSetLineEnds
 | VisCmdSetLineCornerStyle
 | VisCmdSetLineColor
 | VisCmdCloseWindow
 | VisCmdSetFillShadow
 | VisCmdSetFillColor
 | VisCmdHelpMode
 | VisCmdOffsetDlg
 | VisCmdDesignMode
 | VisCmdShapeExplorer
 | VisCmdSetFillPattern
 | VisCmdSetCharColor
 | VisCmdSetCharSizeUp
 | VisCmdSetCharSizeDown
 | VisCmdTextHAlignLeft
 | VisCmdTextHAlignCenter
 | VisCmdTextHAlignRight
 | VisCmdTextHAlignJustify
 | VisCmdTextVAlignTop
 | VisCmdTextVAlignMiddle
 | VisCmdTextVAlignBottom
 | VisCmdStampTool
 | VisCmdObjectInfoDlg
 | VisCmdObjectHelp
 | VisCmdFileOpenStencil
 | VisCmdPrintPage
 | VisCmdSWShapeActionDlg
 | VisCmdLayerDlg
 | VisCmdLayerSetupDlg
 | VisCmdCropTool
 | VisCmdTextBlockTool
 | VisCmdStenClose
 | VisCmdIntersect
 | VisCmdSubtract
 | VisCmdStenActivate
 | VisCmdStenIconAndName
 | VisCmdStenIconOnly
 | VisCmdStenNameOnly
 | VisCmdStenAutoArrange
 | VisCmdPrintPreview
 | VisCmdOpenInVisio
 | VisCmdFullScreenMode
 | VisCmdRotate90Clockwise
 | VisCmdZoomLast
 | VisCmdZoomPageWidth
 | VisCmdToolbarsDlg
 | VisCmdINETAddToFavorites
 | VisCmdViewPageBreaks
 | VisCmdZoomSingleTile
 | VisCmdPreviousTile
 | VisCmdNextTile
 | VisCmdFirstTile
 | VisCmdLastTile
 | VisCmdInsertAutoCADAddOn
 | VisCmdInsertControlDlg
 | VisCmdJoin
 | VisCmdTrim
 | VisCmdDlgCustomFit
 | VisCmdFitCurve
 | VisCmdIconBucketTool
 | VisCmdIconLassoTool
 | VisCmdIconSelectNet
 | VisCmdToolsLayoutShapesDlg
 | VisCmdToolsRunVBE
 | VisCmdToolsMacroDlg
 | VisCmdFileNewBlankDrawing
 | VisCmdFileNewBlankStencil
 | VisCmdProgRefHelp
 | VisCmdInsertHyperLink
 | VisCmdHelpTemplates
 | VisCmdEmailRouting
 | VisCmdSendToExchange
 | VisCmdINETUserSearchPage
 | VisCmdINETVisioHomePage
 | VisCmdINETGoForward
 | VisCmdINETGoBack
 | VisCmdOpenActiveObject
 | VisCmdCancelInPlaceEditing
 | VisCmdINETVisioSolutionsLibrary
 | VisCmdINETKnowledgeBase
 | VisCmdINETDiagrammingResources
 | VisCmdINETOpenHlink
 | VisCmdINETOpenHlinkNewWnd
 | VisCmdINETCopyHyperlink
 | VisCmdHyperlinkHier
 | VisCmdINETEditHyperlink
 | VisCmdINETPasteAsHyperlink
 | VisCmdBullets
 | VisCmdShapeLayerToolbar
 | VisCmdGoToPageToolbar
 | VisCmdFormatAllTextProps
 | VisCmdBrowseSampleDrawings
 deriving ()
instance P.Enum VisUICmds where
  fromEnum v =
   case v of
   VisCmdHierarchical -> 200
   VisCmdFileNew -> 1001
   VisCmdFileOpen -> 1002
   VisCmdFileClose -> 1003
   VisCmdFileSave -> 1004
   VisCmdFileSaveAs -> 1005
   VisCmdFileSaveWorkspace -> 1006
   VisCmdFileImport -> 1007
   VisCmdFileSummaryInfoDlg -> 1009
   VisCmdFilePrint -> 1010
   VisCmdFileExit -> 1016
   VisCmdEditUndo -> 1017
   VisCmdEditRedo -> 1018
   VisCmdEditRepeat -> 1019
   VisCmdUFEditCut -> 1020
   VisCmdUFEditCopy -> 1021
   VisCmdUFEditPaste -> 1022
   VisCmdUFEditClear -> 1023
   VisCmdUFEditDuplicate -> 1024
   VisCmdUFEditSelectAll -> 1025
   VisCmdEditSelectSpecial -> 1026
   VisCmdEditPasteSpecial -> 1027
   VisCmdEditOpenObject -> 1029
   VisCmdEditLinks -> 1030
   VisCmdEditInsertObject -> 1031
   VisCmdEditInsertField -> 1032
   VisCmdViewFitInWindow -> 1033
   VisCmdView75 -> 1034
   VisCmdView100 -> 1035
   VisCmdView150 -> 1036
   VisCmdView200 -> 1037
   VisCmdViewCustom -> 1038
   VisCmdViewRulers -> 1039
   VisCmdViewGrid -> 1040
   VisCmdViewGuides -> 1041
   VisCmdViewConnections -> 1042
   VisCmdEditFind -> 1043
   VisCmdViewStatusBar -> 1044
   VisCmdObjectBringForward -> 1045
   VisCmdObjectBringToFront -> 1046
   VisCmdObjectSendBackward -> 1047
   VisCmdObjectSendToBack -> 1048
   VisCmdObjectAlignObjects -> 1049
   VisCmdObjectConnectObjects -> 1050
   VisCmdObjectGroup -> 1051
   VisCmdObjectUngroup -> 1052
   VisCmdObjectAddToGroup -> 1053
   VisCmdObjectRemoveFromGroup -> 1054
   VisCmdObjectConvertToGroup -> 1055
   VisCmdObjectRotate90 -> 1056
   VisCmdObjectFlipVertical -> 1057
   VisCmdObjectFlipHorizontal -> 1058
   VisCmdObjectReverse -> 1059
   VisCmdObjectUnion -> 1060
   VisCmdObjectCombine -> 1061
   VisCmdObjectFragment -> 1062
   VisCmdFormatStyle -> 1063
   VisCmdFormatDefineStyles -> 1064
   VisCmdFormatLine -> 1065
   VisCmdFormatFill -> 1066
   VisCmdFormatText -> 1067
   VisCmdFormatFont -> 1067
   VisCmdFormatParagraph -> 1068
   VisCmdFormatTabs -> 1069
   VisCmdFormatBlock -> 1070
   VisCmdFormatBehavior -> 1071
   VisCmdFormatProtection -> 1072
   VisCmdFormatSpecial -> 1073
   VisCmdOptionsEditDrawing -> 1074
   VisCmdOptionsEditBackground -> 1075
   VisCmdOptionsPageSetup -> 1076
   VisCmdOptionsGoToDrawing -> 1077
   VisCmdOptionsNewPage -> 1078
   VisCmdOptionsDeletePages -> 1079
   VisCmdOptionsReorderPages -> 1080
   VisCmdOptionsPreferences -> 1081
   VisCmdOptionsColorPaletteDlg -> 1082
   VisCmdOptionsProtectDocument -> 1083
   VisCmdOptionsSnapGlueSetup -> 1084
   VisCmdWindowNewWindow -> 1085
   VisCmdWindowCascadeAll -> 1086
   VisCmdWindowTileAll -> 1087
   VisCmdWindowShowShapeSheet -> 1088
   VisCmdWindowShowMasterObjects -> 1089
   VisCmdRunAddOnMenu -> 1090
   VisCmdWindowShowDrawPage -> 1091
   VisCmdHelpContents -> 1092
   VisCmdDecreaseIndent -> 1093
   VisCmdIncreaseIndent -> 1094
   VisCmdDecreaseParaSpacing -> 1095
   VisCmdIncreaseParaSpacing -> 1096
   VisCmdTextRotate90 -> 1098
   VisCmdHelpAboutVisio -> 1100
   VisCmdStenEditIcon -> 1101
   VisCmdStenEditDrawing -> 1102
   VisCmdStenNameMaster -> 1103
   VisCmdStenNewMaster -> 1104
   VisCmdStenImageMaster -> 1105
   VisCmdStenCleanup -> 1106
   VisCmdSWShowValues -> 1107
   VisCmdSWShowFormulas -> 1108
   VisCmdSWShowSectionsDlg -> 1109
   VisCmdSWPasteNameDlg -> 1110
   VisCmdSWPasteFunctionDlg -> 1111
   VisCmdSWInsertRow -> 1112
   VisCmdSWInsertRowAfter -> 1113
   VisCmdSWChangeRowTypeDlg -> 1114
   VisCmdSWDeleteRow -> 1115
   VisCmdSWAddSectionDlg -> 1116
   VisCmdSWDeleteSection -> 1117
   VisCmdFormatDoubleClick -> 1118
   VisCmdDrawLineStyle -> 1122
   VisCmdDrawFillStyle -> 1123
   VisCmdDrawSnap -> 1124
   VisCmdDrawGlue -> 1125
   VisCmdDrawZoom -> 1126
   VisCmdTextStyle -> 1128
   VisCmdTextFont -> 1129
   VisCmdTextSize -> 1130
   VisCmdTextBold -> 1131
   VisCmdTextItalic -> 1132
   VisCmdTextSmallCaps -> 1133
   VisCmdTextSuperscript -> 1134
   VisCmdTextSubscript -> 1135
   VisCmdTextUline -> 1136
   VisCmdSWCancel -> 1139
   VisCmdSWAccept -> 1140
   VisCmdSWFormula -> 1141
   VisCmdSWShowToggle -> 1142
   VisCmdIconLeftColor -> 1143
   VisCmdIconPencilTool -> 1145
   VisCmdRecalcObjectWH -> 1146
   VisCmdTurnToPrevPage -> 1147
   VisCmdTurnToNextPage -> 1148
   VisCmdEditReplace -> 1179
   VisCmdAlignObjectLeft -> 1196
   VisCmdAlignObjectCenter -> 1197
   VisCmdAlignObjectRight -> 1198
   VisCmdAlignObjectTop -> 1199
   VisCmdAlignObjectMiddle -> 1200
   VisCmdAlignObjectBottom -> 1201
   VisCmdCenterDrawing -> 1202
   VisCmdDeselectAll -> 1213
   VisCmdTextEditState -> 1214
   VisCmdZoomIn -> 1216
   VisCmdZoomOut -> 1217
   VisCmdDRPointerTool -> 1219
   VisCmdDRPencilTool -> 1220
   VisCmdDRLineTool -> 1221
   VisCmdDRQtrArcTool -> 1222
   VisCmdDRRectTool -> 1223
   VisCmdDROvalTool -> 1224
   VisCmdDRConnectorTool -> 1225
   VisCmdDRConnectionTool -> 1226
   VisCmdDRTextTool -> 1227
   VisCmdDRRotateTool -> 1228
   VisCmdObjectDistributeDlg -> 1230
   VisCmdDistributeHSpace -> 1231
   VisCmdDistributeCenter -> 1233
   VisCmdDistributeVSpace -> 1235
   VisCmdDistributeMiddle -> 1237
   VisCmdDlgLotusNotesFields -> 1245
   VisCmdToolsSpelling -> 1270
   VisCmdFormatPainter -> 1271
   VisCmdStenFloating -> 1274
   VisCmdView50 -> 1279
   VisCmdView400 -> 1280
   VisCmdSendAsMail -> 1292
   VisCmdShapeActions -> 1309
   VisCmdDRSplineTool -> 1311
   VisCmdFormatCustPropEdit -> 1312
   VisCmdRulerGridDlg -> 1318
   VisCmdFormatShadow -> 1333
   VisCmdFormatCorners -> 1334
   VisCmdToolsInventory -> 1335
   VisCmdPageSizeScale -> 1076
   VisCmdStenSwitchSides -> 1342
   VisCmdToolsArrayShapesAddOn -> 1354
   VisCmdSetLineWeight -> 1355
   VisCmdSetLinePattern -> 1356
   VisCmdSetLineEnds -> 1357
   VisCmdSetLineCornerStyle -> 1358
   VisCmdSetLineColor -> 1359
   VisCmdCloseWindow -> 1361
   VisCmdSetFillShadow -> 1379
   VisCmdSetFillColor -> 1385
   VisCmdHelpMode -> 1386
   VisCmdOffsetDlg -> 1387
   VisCmdDesignMode -> 1388
   VisCmdShapeExplorer -> 1389
   VisCmdSetFillPattern -> 1399
   VisCmdSetCharColor -> 1404
   VisCmdSetCharSizeUp -> 1405
   VisCmdSetCharSizeDown -> 1406
   VisCmdTextHAlignLeft -> 1407
   VisCmdTextHAlignCenter -> 1408
   VisCmdTextHAlignRight -> 1409
   VisCmdTextHAlignJustify -> 1412
   VisCmdTextVAlignTop -> 1413
   VisCmdTextVAlignMiddle -> 1414
   VisCmdTextVAlignBottom -> 1422
   VisCmdStampTool -> 1424
   VisCmdObjectInfoDlg -> 1425
   VisCmdObjectHelp -> 1428
   VisCmdFileOpenStencil -> 1442
   VisCmdPrintPage -> 1443
   VisCmdSWShapeActionDlg -> 1444
   VisCmdLayerDlg -> 1446
   VisCmdLayerSetupDlg -> 1448
   VisCmdCropTool -> 1449
   VisCmdTextBlockTool -> 1451
   VisCmdStenClose -> 1452
   VisCmdIntersect -> 1453
   VisCmdSubtract -> 1454
   VisCmdStenActivate -> 1458
   VisCmdStenIconAndName -> 1480
   VisCmdStenIconOnly -> 1481
   VisCmdStenNameOnly -> 1482
   VisCmdStenAutoArrange -> 1483
   VisCmdPrintPreview -> 1490
   VisCmdOpenInVisio -> 1491
   VisCmdFullScreenMode -> 1492
   VisCmdRotate90Clockwise -> 1494
   VisCmdZoomLast -> 1495
   VisCmdZoomPageWidth -> 1496
   VisCmdToolbarsDlg -> 1500
   VisCmdINETAddToFavorites -> 1506
   VisCmdViewPageBreaks -> 1509
   VisCmdZoomSingleTile -> 1512
   VisCmdPreviousTile -> 1513
   VisCmdNextTile -> 1514
   VisCmdFirstTile -> 1515
   VisCmdLastTile -> 1516
   VisCmdInsertAutoCADAddOn -> 1521
   VisCmdInsertControlDlg -> 1522
   VisCmdJoin -> 1533
   VisCmdTrim -> 1534
   VisCmdDlgCustomFit -> 1536
   VisCmdFitCurve -> 1538
   VisCmdIconBucketTool -> 1543
   VisCmdIconLassoTool -> 1544
   VisCmdIconSelectNet -> 1545
   VisCmdToolsLayoutShapesDlg -> 1574
   VisCmdToolsRunVBE -> 1576
   VisCmdToolsMacroDlg -> 1577
   VisCmdFileNewBlankDrawing -> 1579
   VisCmdFileNewBlankStencil -> 1582
   VisCmdProgRefHelp -> 1584
   VisCmdInsertHyperLink -> 1585
   VisCmdHelpTemplates -> 1586
   VisCmdEmailRouting -> 1588
   VisCmdSendToExchange -> 1589
   VisCmdINETUserSearchPage -> 1595
   VisCmdINETVisioHomePage -> 1596
   VisCmdINETGoForward -> 1598
   VisCmdINETGoBack -> 1599
   VisCmdOpenActiveObject -> 1601
   VisCmdCancelInPlaceEditing -> 1602
   VisCmdINETVisioSolutionsLibrary -> 1604
   VisCmdINETKnowledgeBase -> 1605
   VisCmdINETDiagrammingResources -> 1606
   VisCmdINETOpenHlink -> 1607
   VisCmdINETOpenHlinkNewWnd -> 1608
   VisCmdINETCopyHyperlink -> 1610
   VisCmdHyperlinkHier -> 1611
   VisCmdINETEditHyperlink -> 1619
   VisCmdINETPasteAsHyperlink -> 1620
   VisCmdBullets -> 1633
   VisCmdShapeLayerToolbar -> 1634
   VisCmdGoToPageToolbar -> 1635
   VisCmdFormatAllTextProps -> 1642
   VisCmdBrowseSampleDrawings -> 1645
  
  toEnum v =
   case v of
   200 -> VisCmdHierarchical
   1001 -> VisCmdFileNew
   1002 -> VisCmdFileOpen
   1003 -> VisCmdFileClose
   1004 -> VisCmdFileSave
   1005 -> VisCmdFileSaveAs
   1006 -> VisCmdFileSaveWorkspace
   1007 -> VisCmdFileImport
   1009 -> VisCmdFileSummaryInfoDlg
   1010 -> VisCmdFilePrint
   1016 -> VisCmdFileExit
   1017 -> VisCmdEditUndo
   1018 -> VisCmdEditRedo
   1019 -> VisCmdEditRepeat
   1020 -> VisCmdUFEditCut
   1021 -> VisCmdUFEditCopy
   1022 -> VisCmdUFEditPaste
   1023 -> VisCmdUFEditClear
   1024 -> VisCmdUFEditDuplicate
   1025 -> VisCmdUFEditSelectAll
   1026 -> VisCmdEditSelectSpecial
   1027 -> VisCmdEditPasteSpecial
   1029 -> VisCmdEditOpenObject
   1030 -> VisCmdEditLinks
   1031 -> VisCmdEditInsertObject
   1032 -> VisCmdEditInsertField
   1033 -> VisCmdViewFitInWindow
   1034 -> VisCmdView75
   1035 -> VisCmdView100
   1036 -> VisCmdView150
   1037 -> VisCmdView200
   1038 -> VisCmdViewCustom
   1039 -> VisCmdViewRulers
   1040 -> VisCmdViewGrid
   1041 -> VisCmdViewGuides
   1042 -> VisCmdViewConnections
   1043 -> VisCmdEditFind
   1044 -> VisCmdViewStatusBar
   1045 -> VisCmdObjectBringForward
   1046 -> VisCmdObjectBringToFront
   1047 -> VisCmdObjectSendBackward
   1048 -> VisCmdObjectSendToBack
   1049 -> VisCmdObjectAlignObjects
   1050 -> VisCmdObjectConnectObjects
   1051 -> VisCmdObjectGroup
   1052 -> VisCmdObjectUngroup
   1053 -> VisCmdObjectAddToGroup
   1054 -> VisCmdObjectRemoveFromGroup
   1055 -> VisCmdObjectConvertToGroup
   1056 -> VisCmdObjectRotate90
   1057 -> VisCmdObjectFlipVertical
   1058 -> VisCmdObjectFlipHorizontal
   1059 -> VisCmdObjectReverse
   1060 -> VisCmdObjectUnion
   1061 -> VisCmdObjectCombine
   1062 -> VisCmdObjectFragment
   1063 -> VisCmdFormatStyle
   1064 -> VisCmdFormatDefineStyles
   1065 -> VisCmdFormatLine
   1066 -> VisCmdFormatFill
   1067 -> VisCmdFormatText
   1067 -> VisCmdFormatFont
   1068 -> VisCmdFormatParagraph
   1069 -> VisCmdFormatTabs
   1070 -> VisCmdFormatBlock
   1071 -> VisCmdFormatBehavior
   1072 -> VisCmdFormatProtection
   1073 -> VisCmdFormatSpecial
   1074 -> VisCmdOptionsEditDrawing
   1075 -> VisCmdOptionsEditBackground
   1076 -> VisCmdOptionsPageSetup
   1077 -> VisCmdOptionsGoToDrawing
   1078 -> VisCmdOptionsNewPage
   1079 -> VisCmdOptionsDeletePages
   1080 -> VisCmdOptionsReorderPages
   1081 -> VisCmdOptionsPreferences
   1082 -> VisCmdOptionsColorPaletteDlg
   1083 -> VisCmdOptionsProtectDocument
   1084 -> VisCmdOptionsSnapGlueSetup
   1085 -> VisCmdWindowNewWindow
   1086 -> VisCmdWindowCascadeAll
   1087 -> VisCmdWindowTileAll
   1088 -> VisCmdWindowShowShapeSheet
   1089 -> VisCmdWindowShowMasterObjects
   1090 -> VisCmdRunAddOnMenu
   1091 -> VisCmdWindowShowDrawPage
   1092 -> VisCmdHelpContents
   1093 -> VisCmdDecreaseIndent
   1094 -> VisCmdIncreaseIndent
   1095 -> VisCmdDecreaseParaSpacing
   1096 -> VisCmdIncreaseParaSpacing
   1098 -> VisCmdTextRotate90
   1100 -> VisCmdHelpAboutVisio
   1101 -> VisCmdStenEditIcon
   1102 -> VisCmdStenEditDrawing
   1103 -> VisCmdStenNameMaster
   1104 -> VisCmdStenNewMaster
   1105 -> VisCmdStenImageMaster
   1106 -> VisCmdStenCleanup
   1107 -> VisCmdSWShowValues
   1108 -> VisCmdSWShowFormulas
   1109 -> VisCmdSWShowSectionsDlg
   1110 -> VisCmdSWPasteNameDlg
   1111 -> VisCmdSWPasteFunctionDlg
   1112 -> VisCmdSWInsertRow
   1113 -> VisCmdSWInsertRowAfter
   1114 -> VisCmdSWChangeRowTypeDlg
   1115 -> VisCmdSWDeleteRow
   1116 -> VisCmdSWAddSectionDlg
   1117 -> VisCmdSWDeleteSection
   1118 -> VisCmdFormatDoubleClick
   1122 -> VisCmdDrawLineStyle
   1123 -> VisCmdDrawFillStyle
   1124 -> VisCmdDrawSnap
   1125 -> VisCmdDrawGlue
   1126 -> VisCmdDrawZoom
   1128 -> VisCmdTextStyle
   1129 -> VisCmdTextFont
   1130 -> VisCmdTextSize
   1131 -> VisCmdTextBold
   1132 -> VisCmdTextItalic
   1133 -> VisCmdTextSmallCaps
   1134 -> VisCmdTextSuperscript
   1135 -> VisCmdTextSubscript
   1136 -> VisCmdTextUline
   1139 -> VisCmdSWCancel
   1140 -> VisCmdSWAccept
   1141 -> VisCmdSWFormula
   1142 -> VisCmdSWShowToggle
   1143 -> VisCmdIconLeftColor
   1145 -> VisCmdIconPencilTool
   1146 -> VisCmdRecalcObjectWH
   1147 -> VisCmdTurnToPrevPage
   1148 -> VisCmdTurnToNextPage
   1179 -> VisCmdEditReplace
   1196 -> VisCmdAlignObjectLeft
   1197 -> VisCmdAlignObjectCenter
   1198 -> VisCmdAlignObjectRight
   1199 -> VisCmdAlignObjectTop
   1200 -> VisCmdAlignObjectMiddle
   1201 -> VisCmdAlignObjectBottom
   1202 -> VisCmdCenterDrawing
   1213 -> VisCmdDeselectAll
   1214 -> VisCmdTextEditState
   1216 -> VisCmdZoomIn
   1217 -> VisCmdZoomOut
   1219 -> VisCmdDRPointerTool
   1220 -> VisCmdDRPencilTool
   1221 -> VisCmdDRLineTool
   1222 -> VisCmdDRQtrArcTool
   1223 -> VisCmdDRRectTool
   1224 -> VisCmdDROvalTool
   1225 -> VisCmdDRConnectorTool
   1226 -> VisCmdDRConnectionTool
   1227 -> VisCmdDRTextTool
   1228 -> VisCmdDRRotateTool
   1230 -> VisCmdObjectDistributeDlg
   1231 -> VisCmdDistributeHSpace
   1233 -> VisCmdDistributeCenter
   1235 -> VisCmdDistributeVSpace
   1237 -> VisCmdDistributeMiddle
   1245 -> VisCmdDlgLotusNotesFields
   1270 -> VisCmdToolsSpelling
   1271 -> VisCmdFormatPainter
   1274 -> VisCmdStenFloating
   1279 -> VisCmdView50
   1280 -> VisCmdView400
   1292 -> VisCmdSendAsMail
   1309 -> VisCmdShapeActions
   1311 -> VisCmdDRSplineTool
   1312 -> VisCmdFormatCustPropEdit
   1318 -> VisCmdRulerGridDlg
   1333 -> VisCmdFormatShadow
   1334 -> VisCmdFormatCorners
   1335 -> VisCmdToolsInventory
   1076 -> VisCmdPageSizeScale
   1342 -> VisCmdStenSwitchSides
   1354 -> VisCmdToolsArrayShapesAddOn
   1355 -> VisCmdSetLineWeight
   1356 -> VisCmdSetLinePattern
   1357 -> VisCmdSetLineEnds
   1358 -> VisCmdSetLineCornerStyle
   1359 -> VisCmdSetLineColor
   1361 -> VisCmdCloseWindow
   1379 -> VisCmdSetFillShadow
   1385 -> VisCmdSetFillColor
   1386 -> VisCmdHelpMode
   1387 -> VisCmdOffsetDlg
   1388 -> VisCmdDesignMode
   1389 -> VisCmdShapeExplorer
   1399 -> VisCmdSetFillPattern
   1404 -> VisCmdSetCharColor
   1405 -> VisCmdSetCharSizeUp
   1406 -> VisCmdSetCharSizeDown
   1407 -> VisCmdTextHAlignLeft
   1408 -> VisCmdTextHAlignCenter
   1409 -> VisCmdTextHAlignRight
   1412 -> VisCmdTextHAlignJustify
   1413 -> VisCmdTextVAlignTop
   1414 -> VisCmdTextVAlignMiddle
   1422 -> VisCmdTextVAlignBottom
   1424 -> VisCmdStampTool
   1425 -> VisCmdObjectInfoDlg
   1428 -> VisCmdObjectHelp
   1442 -> VisCmdFileOpenStencil
   1443 -> VisCmdPrintPage
   1444 -> VisCmdSWShapeActionDlg
   1446 -> VisCmdLayerDlg
   1448 -> VisCmdLayerSetupDlg
   1449 -> VisCmdCropTool
   1451 -> VisCmdTextBlockTool
   1452 -> VisCmdStenClose
   1453 -> VisCmdIntersect
   1454 -> VisCmdSubtract
   1458 -> VisCmdStenActivate
   1480 -> VisCmdStenIconAndName
   1481 -> VisCmdStenIconOnly
   1482 -> VisCmdStenNameOnly
   1483 -> VisCmdStenAutoArrange
   1490 -> VisCmdPrintPreview
   1491 -> VisCmdOpenInVisio
   1492 -> VisCmdFullScreenMode
   1494 -> VisCmdRotate90Clockwise
   1495 -> VisCmdZoomLast
   1496 -> VisCmdZoomPageWidth
   1500 -> VisCmdToolbarsDlg
   1506 -> VisCmdINETAddToFavorites
   1509 -> VisCmdViewPageBreaks
   1512 -> VisCmdZoomSingleTile
   1513 -> VisCmdPreviousTile
   1514 -> VisCmdNextTile
   1515 -> VisCmdFirstTile
   1516 -> VisCmdLastTile
   1521 -> VisCmdInsertAutoCADAddOn
   1522 -> VisCmdInsertControlDlg
   1533 -> VisCmdJoin
   1534 -> VisCmdTrim
   1536 -> VisCmdDlgCustomFit
   1538 -> VisCmdFitCurve
   1543 -> VisCmdIconBucketTool
   1544 -> VisCmdIconLassoTool
   1545 -> VisCmdIconSelectNet
   1574 -> VisCmdToolsLayoutShapesDlg
   1576 -> VisCmdToolsRunVBE
   1577 -> VisCmdToolsMacroDlg
   1579 -> VisCmdFileNewBlankDrawing
   1582 -> VisCmdFileNewBlankStencil
   1584 -> VisCmdProgRefHelp
   1585 -> VisCmdInsertHyperLink
   1586 -> VisCmdHelpTemplates
   1588 -> VisCmdEmailRouting
   1589 -> VisCmdSendToExchange
   1595 -> VisCmdINETUserSearchPage
   1596 -> VisCmdINETVisioHomePage
   1598 -> VisCmdINETGoForward
   1599 -> VisCmdINETGoBack
   1601 -> VisCmdOpenActiveObject
   1602 -> VisCmdCancelInPlaceEditing
   1604 -> VisCmdINETVisioSolutionsLibrary
   1605 -> VisCmdINETKnowledgeBase
   1606 -> VisCmdINETDiagrammingResources
   1607 -> VisCmdINETOpenHlink
   1608 -> VisCmdINETOpenHlinkNewWnd
   1610 -> VisCmdINETCopyHyperlink
   1611 -> VisCmdHyperlinkHier
   1619 -> VisCmdINETEditHyperlink
   1620 -> VisCmdINETPasteAsHyperlink
   1633 -> VisCmdBullets
   1634 -> VisCmdShapeLayerToolbar
   1635 -> VisCmdGoToPageToolbar
   1642 -> VisCmdFormatAllTextProps
   1645 -> VisCmdBrowseSampleDrawings
   _ -> P.error "unmarshallVisUICmds: illegal enum value "
  
data VisTraceFlags
 = VisTraceEvents
 | VisTraceAdvises
 | VisTraceAddonInvokes
 | VisTraceCallsToVBA
 deriving ()
instance P.Enum VisTraceFlags where
  fromEnum v =
   case v of
   VisTraceEvents -> 1
   VisTraceAdvises -> 2
   VisTraceAddonInvokes -> 4
   VisTraceCallsToVBA -> 8
  
  toEnum v =
   case v of
   1 -> VisTraceEvents
   2 -> VisTraceAdvises
   4 -> VisTraceAddonInvokes
   8 -> VisTraceCallsToVBA
   _ -> P.error "unmarshallVisTraceFlags: illegal enum value "
  
data VisToolbarFlavors
 = VisToolBarNone
 | VisToolBarOn
 | VisToolBarMSOffice
 | VisToolBarLotusSS
 deriving ()
instance P.Enum VisToolbarFlavors where
  fromEnum v =
   case v of
   VisToolBarNone -> (-1)
   VisToolBarOn -> 0
   VisToolBarMSOffice -> 0
   VisToolBarLotusSS -> 0
  
  toEnum v =
   case v of
   (-1) -> VisToolBarNone
   0 -> VisToolBarOn
   0 -> VisToolBarMSOffice
   0 -> VisToolBarLotusSS
   _ -> P.error "unmarshallVisToolbarFlavors: illegal enum value "
  
data VisToParts
 = VisConnectToError
 | VisToNone
 | VisGuideX
 | VisGuideY
 | VisWholeShape
 | VisConnectionPoint
 | VisConnectError
 | VisNone
 deriving ()
instance P.Enum VisToParts where
  fromEnum v =
   case v of
   VisConnectToError -> (-1)
   VisToNone -> 0
   VisGuideX -> 1
   VisGuideY -> 2
   VisWholeShape -> 3
   VisConnectionPoint -> 100
   VisConnectError -> (-1)
   VisNone -> 0
  
  toEnum v =
   case v of
   (-1) -> VisConnectToError
   0 -> VisToNone
   1 -> VisGuideX
   2 -> VisGuideY
   3 -> VisWholeShape
   100 -> VisConnectionPoint
   (-1) -> VisConnectError
   0 -> VisNone
   _ -> P.error "unmarshallVisToParts: illegal enum value "
  
data VisStatCodes
 = VisStatNormal
 | VisStatAppHasShutdown
 | VisStatDeleted
 | VisStatTouched
 | VisStatClosed
 | VisStatSuspended
 deriving ()
instance P.Enum VisStatCodes where
  fromEnum v =
   case v of
   VisStatNormal -> 0
   VisStatAppHasShutdown -> 1
   VisStatDeleted -> 2
   VisStatTouched -> 4
   VisStatClosed -> 8
   VisStatSuspended -> 16
  
  toEnum v =
   case v of
   0 -> VisStatNormal
   1 -> VisStatAppHasShutdown
   2 -> VisStatDeleted
   4 -> VisStatTouched
   8 -> VisStatClosed
   16 -> VisStatSuspended
   _ -> P.error "unmarshallVisStatCodes: illegal enum value "
  
data VisShapeTypes
 = VisTypePage
 | VisTypeGroup
 | VisTypeShape
 | VisTypeForeignObject
 | VisTypeGuide
 | VisTypeMetafile
 | VisTypeBitmap
 | VisTypeIsLinked
 | VisTypeIsEmbedded
 | VisTypeIsControl
 | VisTypeIsOLE2
 deriving ()
instance P.Enum VisShapeTypes where
  fromEnum v =
   case v of
   VisTypePage -> 1
   VisTypeGroup -> 2
   VisTypeShape -> 3
   VisTypeForeignObject -> 4
   VisTypeGuide -> 5
   VisTypeMetafile -> 16
   VisTypeBitmap -> 32
   VisTypeIsLinked -> 256
   VisTypeIsEmbedded -> 512
   VisTypeIsControl -> 1024
   VisTypeIsOLE2 -> 32768
  
  toEnum v =
   case v of
   1 -> VisTypePage
   2 -> VisTypeGroup
   3 -> VisTypeShape
   4 -> VisTypeForeignObject
   5 -> VisTypeGuide
   16 -> VisTypeMetafile
   32 -> VisTypeBitmap
   256 -> VisTypeIsLinked
   512 -> VisTypeIsEmbedded
   1024 -> VisTypeIsControl
   32768 -> VisTypeIsOLE2
   _ -> P.error "unmarshallVisShapeTypes: illegal enum value "
  
data VisShapeIDs
 = VisInvalShapeID
 | VisPageSheetID
 deriving ()
instance P.Enum VisShapeIDs where
  fromEnum v =
   case v of
   VisInvalShapeID -> (-1)
   VisPageSheetID -> 0
  
  toEnum v =
   case v of
   (-1) -> VisInvalShapeID
   0 -> VisPageSheetID
   _ -> P.error "unmarshallVisShapeIDs: illegal enum value "
  
data VisSelectArgs
 = VisDeselect
 | VisSelect
 | VisSubSelect
 | VisSelectAll
 | VisDeselectAll
 deriving ()
instance P.Enum VisSelectArgs where
  fromEnum v =
   case v of
   VisDeselect -> 1
   VisSelect -> 2
   VisSubSelect -> 3
   VisSelectAll -> 4
   VisDeselectAll -> 256
  
  toEnum v =
   case v of
   1 -> VisDeselect
   2 -> VisSelect
   3 -> VisSubSelect
   4 -> VisSelectAll
   256 -> VisDeselectAll
   _ -> P.error "unmarshallVisSelectArgs: illegal enum value "
  
data VisSectionIndices
 = VisSectionInval
 | VisSectionFirst
 | VisSectionLast
 | VisSectionNone
 | VisSectionObject
 | VisSectionMember
 | VisSectionCharacter
 | VisSectionParagraph
 | VisSectionTab
 | VisSectionScratch
 | VisSectionExport
 | VisSectionConnectionPts
 | VisSectionTextField
 | VisSectionControls
 | VisSectionFirstComponent
 | VisSectionLastComponent
 | VisSectionAction
 | VisSectionLayer
 | VisSectionUser
 | VisSectionProp
 | VisSectionLastReal
 deriving ()
instance P.Enum VisSectionIndices where
  fromEnum v =
   case v of
   VisSectionInval -> 255
   VisSectionFirst -> 0
   VisSectionLast -> 252
   VisSectionNone -> 255
   VisSectionObject -> 1
   VisSectionMember -> 2
   VisSectionCharacter -> 3
   VisSectionParagraph -> 4
   VisSectionTab -> 5
   VisSectionScratch -> 6
   VisSectionExport -> 7
   VisSectionConnectionPts -> 7
   VisSectionTextField -> 8
   VisSectionControls -> 9
   VisSectionFirstComponent -> 10
   VisSectionLastComponent -> 239
   VisSectionAction -> 240
   VisSectionLayer -> 241
   VisSectionUser -> 242
   VisSectionProp -> 243
   VisSectionLastReal -> 243
  
  toEnum v =
   case v of
   255 -> VisSectionInval
   0 -> VisSectionFirst
   252 -> VisSectionLast
   255 -> VisSectionNone
   1 -> VisSectionObject
   2 -> VisSectionMember
   3 -> VisSectionCharacter
   4 -> VisSectionParagraph
   5 -> VisSectionTab
   6 -> VisSectionScratch
   7 -> VisSectionExport
   7 -> VisSectionConnectionPts
   8 -> VisSectionTextField
   9 -> VisSectionControls
   10 -> VisSectionFirstComponent
   239 -> VisSectionLastComponent
   240 -> VisSectionAction
   241 -> VisSectionLayer
   242 -> VisSectionUser
   243 -> VisSectionProp
   243 -> VisSectionLastReal
   _ -> P.error "unmarshallVisSectionIndices: illegal enum value "
  
data VisScrollbarStates
 = VisScrollBarNeither
 | VisScrollBarHoriz
 | VisScrollBarVert
 | VisScrollBarBoth
 deriving ()
instance P.Enum VisScrollbarStates where
  fromEnum v =
   case v of
   VisScrollBarNeither -> 0
   VisScrollBarHoriz -> 1
   VisScrollBarVert -> 4
   VisScrollBarBoth -> 5
  
  toEnum v =
   case v of
   0 -> VisScrollBarNeither
   1 -> VisScrollBarHoriz
   4 -> VisScrollBarVert
   5 -> VisScrollBarBoth
   _ -> P.error "unmarshallVisScrollbarStates: illegal enum value "
  
data VisRunTypes
 = VisCharPropRow
 | VisParaPropRow
 | VisTabPropRow
 | VisWordRun
 | VisParaRun
 | VisFieldRun
 deriving ()
instance P.Enum VisRunTypes where
  fromEnum v =
   case v of
   VisCharPropRow -> 1
   VisParaPropRow -> 2
   VisTabPropRow -> 3
   VisWordRun -> 10
   VisParaRun -> 11
   VisFieldRun -> 20
  
  toEnum v =
   case v of
   1 -> VisCharPropRow
   2 -> VisParaPropRow
   3 -> VisTabPropRow
   10 -> VisWordRun
   11 -> VisParaRun
   20 -> VisFieldRun
   _ -> P.error "unmarshallVisRunTypes: illegal enum value "
  
data VisRowTags
 = VisTagBase
 | VisTagRowVoid
 | VisTagInvalid
 | VisTagComponent
 | VisTagMoveTo
 | VisTagLineTo
 | VisTagArcTo
 | VisTagEllipticalArcTo
 | VisTagSplineBeg
 | VisTagSplineSpan
 | VisTagTab0
 | VisTagTab2
 | VisTagTab10
 | VisTagCtlPt
 | VisTagCtlPtTip
 | VisTagCnnctPt
 | VisTagCnnctNamed
 | VisTagCnnctPtABCD
 | VisTagCnnctNamedABCD
 deriving ()
instance P.Enum VisRowTags where
  fromEnum v =
   case v of
   VisTagBase -> 130
   VisTagRowVoid -> 180
   VisTagInvalid -> (-1)
   VisTagComponent -> 137
   VisTagMoveTo -> 138
   VisTagLineTo -> 139
   VisTagArcTo -> 140
   VisTagEllipticalArcTo -> 144
   VisTagSplineBeg -> 165
   VisTagSplineSpan -> 166
   VisTagTab0 -> 136
   VisTagTab2 -> 150
   VisTagTab10 -> 151
   VisTagCtlPt -> 162
   VisTagCtlPtTip -> 170
   VisTagCnnctPt -> 153
   VisTagCnnctNamed -> 185
   VisTagCnnctPtABCD -> 186
   VisTagCnnctNamedABCD -> 187
  
  toEnum v =
   case v of
   130 -> VisTagBase
   180 -> VisTagRowVoid
   (-1) -> VisTagInvalid
   137 -> VisTagComponent
   138 -> VisTagMoveTo
   139 -> VisTagLineTo
   140 -> VisTagArcTo
   144 -> VisTagEllipticalArcTo
   165 -> VisTagSplineBeg
   166 -> VisTagSplineSpan
   136 -> VisTagTab0
   150 -> VisTagTab2
   151 -> VisTagTab10
   162 -> VisTagCtlPt
   170 -> VisTagCtlPtTip
   153 -> VisTagCnnctPt
   185 -> VisTagCnnctNamed
   186 -> VisTagCnnctPtABCD
   187 -> VisTagCnnctNamedABCD
   _ -> P.error "unmarshallVisRowTags: illegal enum value "
  
data VisRowIndices
 = VisRowFirst
 | VisRowLast
 | VisRowNone
 | VisRowXFormOut
 | VisRowXFormIn
 | VisRowLine
 | VisRowFill
 | VisRowXForm1D
 | VisRowEvent
 | VisRowLayerMem
 | VisRowGuide
 | VisRowStyle
 | VisRowForeign
 | VisRowPage
 | VisRowText
 | VisRowTextXForm
 | VisRowAlign
 | VisRowLock
 | VisRowData123
 | VisRowMisc
 | VisRowRulerGrid
 | VisRowHyperlink
 | VisRowComponent
 | VisRowVertex
 | VisRowMember
 | VisRowCharacter
 | VisRowParagraph
 | VisRowTab
 | VisRowScratch
 | VisRowExport
 | VisRowConnectionPts
 | VisRowField
 | VisRowControl
 | VisRowAction
 | VisRowLayer
 | VisRowUser
 | VisRowProp
 | VisRowFormat
 deriving ()
instance P.Enum VisRowIndices where
  fromEnum v =
   case v of
   VisRowFirst -> 0
   VisRowLast -> (-2)
   VisRowNone -> (-1)
   VisRowXFormOut -> 1
   VisRowXFormIn -> 1
   VisRowLine -> 2
   VisRowFill -> 3
   VisRowXForm1D -> 4
   VisRowEvent -> 5
   VisRowLayerMem -> 6
   VisRowGuide -> 7
   VisRowStyle -> 8
   VisRowForeign -> 9
   VisRowPage -> 10
   VisRowText -> 11
   VisRowTextXForm -> 12
   VisRowAlign -> 14
   VisRowLock -> 15
   VisRowData123 -> 16
   VisRowMisc -> 17
   VisRowRulerGrid -> 18
   VisRowHyperlink -> 19
   VisRowComponent -> 0
   VisRowVertex -> 1
   VisRowMember -> 0
   VisRowCharacter -> 0
   VisRowParagraph -> 0
   VisRowTab -> 0
   VisRowScratch -> 0
   VisRowExport -> 0
   VisRowConnectionPts -> 0
   VisRowField -> 0
   VisRowControl -> 0
   VisRowAction -> 0
   VisRowLayer -> 0
   VisRowUser -> 0
   VisRowProp -> 0
   VisRowFormat -> 0
  
  toEnum v =
   case v of
   0 -> VisRowFirst
   (-2) -> VisRowLast
   (-1) -> VisRowNone
   1 -> VisRowXFormOut
   1 -> VisRowXFormIn
   2 -> VisRowLine
   3 -> VisRowFill
   4 -> VisRowXForm1D
   5 -> VisRowEvent
   6 -> VisRowLayerMem
   7 -> VisRowGuide
   8 -> VisRowStyle
   9 -> VisRowForeign
   10 -> VisRowPage
   11 -> VisRowText
   12 -> VisRowTextXForm
   14 -> VisRowAlign
   15 -> VisRowLock
   16 -> VisRowData123
   17 -> VisRowMisc
   18 -> VisRowRulerGrid
   19 -> VisRowHyperlink
   0 -> VisRowComponent
   1 -> VisRowVertex
   0 -> VisRowMember
   0 -> VisRowCharacter
   0 -> VisRowParagraph
   0 -> VisRowTab
   0 -> VisRowScratch
   0 -> VisRowExport
   0 -> VisRowConnectionPts
   0 -> VisRowField
   0 -> VisRowControl
   0 -> VisRowAction
   0 -> VisRowLayer
   0 -> VisRowUser
   0 -> VisRowProp
   0 -> VisRowFormat
   _ -> P.error "unmarshallVisRowIndices: illegal enum value "
  
data VisRoundFlags
 = VisTruncate
 | VisRound
 deriving ()
instance P.Enum VisRoundFlags where
  fromEnum v =
   case v of
   VisTruncate -> 0
   VisRound -> 1
  
  toEnum v =
   case v of
   0 -> VisTruncate
   1 -> VisRound
   _ -> P.error "unmarshallVisRoundFlags: illegal enum value "
  
data VisOpenSaveArgs
 = VisOpenCopy
 | VisOpenRO
 | VisOpenDocked
 | VisOpenDontList
 | VisSaveAsRO
 | VisSaveAsWS
 | VisSavePrevNone
 | VisSavePrevDraft1st
 | VisSavePrevDetailed1st
 | VisSavePrevDraftAll
 | VisSavePrevDetailedAll
 deriving ()
instance P.Enum VisOpenSaveArgs where
  fromEnum v =
   case v of
   VisOpenCopy -> 1
   VisOpenRO -> 2
   VisOpenDocked -> 4
   VisOpenDontList -> 8
   VisSaveAsRO -> 1
   VisSaveAsWS -> 2
   VisSavePrevNone -> 0
   VisSavePrevDraft1st -> 1
   VisSavePrevDetailed1st -> 2
   VisSavePrevDraftAll -> 4
   VisSavePrevDetailedAll -> 8
  
  toEnum v =
   case v of
   1 -> VisOpenCopy
   2 -> VisOpenRO
   4 -> VisOpenDocked
   8 -> VisOpenDontList
   1 -> VisSaveAsRO
   2 -> VisSaveAsWS
   0 -> VisSavePrevNone
   1 -> VisSavePrevDraft1st
   2 -> VisSavePrevDetailed1st
   4 -> VisSavePrevDraftAll
   8 -> VisSavePrevDetailedAll
   _ -> P.error "unmarshallVisOpenSaveArgs: illegal enum value "
  
data VisObjectTypes
 = VisObjTypeUnknown
 | VisObjTypeApp
 | VisObjTypeCell
 | VisObjTypeChars
 | VisObjTypeConnect
 | VisObjTypeConnects
 | VisObjTypeDoc
 | VisObjTypeDocs
 | VisObjTypeMaster
 | VisObjTypeMasters
 | VisObjTypePage
 | VisObjTypePages
 | VisObjTypeSelection
 | VisObjTypeShape
 | VisObjTypeShapes
 | VisObjTypeStyle
 | VisObjTypeStyles
 | VisObjTypeWindow
 | VisObjTypeWindows
 | VisObjTypeLayer
 | VisObjTypeLayers
 | VisObjTypeFont
 | VisObjTypeFonts
 | VisObjTypeColor
 | VisObjTypeColors
 | VisObjTypeAddon
 | VisObjTypeAddons
 | VisObjTypeEvent
 | VisObjTypeEventList
 | VisObjTypeGlobal
 | VisObjTypeHyperlink
 | VisObjTypeOLEObjects
 | VisObjTypeOLEObject
 | VisObjTypePaths
 | VisObjTypePath
 | VisObjTypeCurve
 deriving ()
instance P.Enum VisObjectTypes where
  fromEnum v =
   case v of
   VisObjTypeUnknown -> 1
   VisObjTypeApp -> 3
   VisObjTypeCell -> 4
   VisObjTypeChars -> 5
   VisObjTypeConnect -> 8
   VisObjTypeConnects -> 9
   VisObjTypeDoc -> 10
   VisObjTypeDocs -> 11
   VisObjTypeMaster -> 12
   VisObjTypeMasters -> 13
   VisObjTypePage -> 14
   VisObjTypePages -> 15
   VisObjTypeSelection -> 16
   VisObjTypeShape -> 17
   VisObjTypeShapes -> 18
   VisObjTypeStyle -> 19
   VisObjTypeStyles -> 20
   VisObjTypeWindow -> 21
   VisObjTypeWindows -> 22
   VisObjTypeLayer -> 25
   VisObjTypeLayers -> 26
   VisObjTypeFont -> 27
   VisObjTypeFonts -> 28
   VisObjTypeColor -> 29
   VisObjTypeColors -> 30
   VisObjTypeAddon -> 31
   VisObjTypeAddons -> 32
   VisObjTypeEvent -> 33
   VisObjTypeEventList -> 34
   VisObjTypeGlobal -> 36
   VisObjTypeHyperlink -> 37
   VisObjTypeOLEObjects -> 38
   VisObjTypeOLEObject -> 39
   VisObjTypePaths -> 40
   VisObjTypePath -> 41
   VisObjTypeCurve -> 42
  
  toEnum v =
   case v of
   1 -> VisObjTypeUnknown
   3 -> VisObjTypeApp
   4 -> VisObjTypeCell
   5 -> VisObjTypeChars
   8 -> VisObjTypeConnect
   9 -> VisObjTypeConnects
   10 -> VisObjTypeDoc
   11 -> VisObjTypeDocs
   12 -> VisObjTypeMaster
   13 -> VisObjTypeMasters
   14 -> VisObjTypePage
   15 -> VisObjTypePages
   16 -> VisObjTypeSelection
   17 -> VisObjTypeShape
   18 -> VisObjTypeShapes
   19 -> VisObjTypeStyle
   20 -> VisObjTypeStyles
   21 -> VisObjTypeWindow
   22 -> VisObjTypeWindows
   25 -> VisObjTypeLayer
   26 -> VisObjTypeLayers
   27 -> VisObjTypeFont
   28 -> VisObjTypeFonts
   29 -> VisObjTypeColor
   30 -> VisObjTypeColors
   31 -> VisObjTypeAddon
   32 -> VisObjTypeAddons
   33 -> VisObjTypeEvent
   34 -> VisObjTypeEventList
   36 -> VisObjTypeGlobal
   37 -> VisObjTypeHyperlink
   38 -> VisObjTypeOLEObjects
   39 -> VisObjTypeOLEObject
   40 -> VisObjTypePaths
   41 -> VisObjTypePath
   42 -> VisObjTypeCurve
   _ -> P.error "unmarshallVisObjectTypes: illegal enum value "
  
data VisMasterProperties
 = VisLeft
 | VisCenter
 | VisRight
 | VisIconFormatVisio
 | VisIconFormatBMP
 | VisNormal
 | VisTall
 | VisWide
 | VisDouble
 | VisAutomatic
 | VisManual
 | VisMasIsLinePat
 | VisMasIsLineEnd
 | VisMasIsFillPat
 | VisMasLPTileDeform
 | VisMasLPTile
 | VisMasLPStretch
 | VisMasLPAnnotate
 | VisMasLPScale
 | VisMasLEDefault
 | VisMasLEUpright
 | VisMasLEScale
 | VisMasFPTile
 | VisMasFPCenter
 | VisMasFPStretch
 | VisMasFPScale
 deriving ()
instance P.Enum VisMasterProperties where
  fromEnum v =
   case v of
   VisLeft -> 1
   VisCenter -> 2
   VisRight -> 3
   VisIconFormatVisio -> 0
   VisIconFormatBMP -> 2
   VisNormal -> 1
   VisTall -> 2
   VisWide -> 3
   VisDouble -> 4
   VisAutomatic -> 1
   VisManual -> 0
   VisMasIsLinePat -> 1
   VisMasIsLineEnd -> 2
   VisMasIsFillPat -> 4
   VisMasLPTileDeform -> 0
   VisMasLPTile -> 16
   VisMasLPStretch -> 32
   VisMasLPAnnotate -> 48
   VisMasLPScale -> 64
   VisMasLEDefault -> 0
   VisMasLEUpright -> 256
   VisMasLEScale -> 1024
   VisMasFPTile -> 0
   VisMasFPCenter -> 4096
   VisMasFPStretch -> 8192
   VisMasFPScale -> 16384
  
  toEnum v =
   case v of
   1 -> VisLeft
   2 -> VisCenter
   3 -> VisRight
   0 -> VisIconFormatVisio
   2 -> VisIconFormatBMP
   1 -> VisNormal
   2 -> VisTall
   3 -> VisWide
   4 -> VisDouble
   1 -> VisAutomatic
   0 -> VisManual
   1 -> VisMasIsLinePat
   2 -> VisMasIsLineEnd
   4 -> VisMasIsFillPat
   0 -> VisMasLPTileDeform
   16 -> VisMasLPTile
   32 -> VisMasLPStretch
   48 -> VisMasLPAnnotate
   64 -> VisMasLPScale
   0 -> VisMasLEDefault
   256 -> VisMasLEUpright
   1024 -> VisMasLEScale
   0 -> VisMasFPTile
   4096 -> VisMasFPCenter
   8192 -> VisMasFPStretch
   16384 -> VisMasFPScale
   _ -> P.error "unmarshallVisMasterProperties: illegal enum value "
  
data VisInsertObjArgs
 = VisInsertLink
 | VisInsertIcon
 | VisInsertDontShow
 | VisInsertAsControl
 | VisInsertAsEmbed
 deriving ()
instance P.Enum VisInsertObjArgs where
  fromEnum v =
   case v of
   VisInsertLink -> 8
   VisInsertIcon -> 16
   VisInsertDontShow -> 4096
   VisInsertAsControl -> 8192
   VisInsertAsEmbed -> 16384
  
  toEnum v =
   case v of
   8 -> VisInsertLink
   16 -> VisInsertIcon
   4096 -> VisInsertDontShow
   8192 -> VisInsertAsControl
   16384 -> VisInsertAsEmbed
   _ -> P.error "unmarshallVisInsertObjArgs: illegal enum value "
  
data VisHitTestResults
 = VisHitOutside
 | VisHitOnBoundary
 | VisHitInside
 deriving ()
instance P.Enum VisHitTestResults where
  fromEnum v =
   case v of
   VisHitOutside -> 0
   VisHitOnBoundary -> 1
   VisHitInside -> 2
  
  toEnum v =
   case v of
   0 -> VisHitOutside
   1 -> VisHitOnBoundary
   2 -> VisHitInside
   _ -> P.error "unmarshallVisHitTestResults: illegal enum value "
  
data VisGuideTypes
 = VisPoint
 | VisHorz
 | VisVert
 deriving ()
instance P.Enum VisGuideTypes where
  fromEnum v =
   case v of
   VisPoint -> 1
   VisHorz -> 2
   VisVert -> 3
  
  toEnum v =
   case v of
   1 -> VisPoint
   2 -> VisHorz
   3 -> VisVert
   _ -> P.error "unmarshallVisGuideTypes: illegal enum value "
  
data VisGetSetArgs
 = VisGetFloats
 | VisGetTruncatedInts
 | VisGetRoundedInts
 | VisGetStrings
 | VisGetFormulas
 | VisSetFormulas
 | VisSetBlastGuards
 | VisSetTestCircular
 deriving ()
instance P.Enum VisGetSetArgs where
  fromEnum v =
   case v of
   VisGetFloats -> 0
   VisGetTruncatedInts -> 1
   VisGetRoundedInts -> 2
   VisGetStrings -> 3
   VisGetFormulas -> 4
   VisSetFormulas -> 1
   VisSetBlastGuards -> 2
   VisSetTestCircular -> 4
  
  toEnum v =
   case v of
   0 -> VisGetFloats
   1 -> VisGetTruncatedInts
   2 -> VisGetRoundedInts
   3 -> VisGetStrings
   4 -> VisGetFormulas
   1 -> VisSetFormulas
   2 -> VisSetBlastGuards
   4 -> VisSetTestCircular
   _ -> P.error "unmarshallVisGetSetArgs: illegal enum value "
  
data VisFromParts
 = VisConnectFromError
 | VisFromNone
 | VisLeftEdge
 | VisCenterEdge
 | VisRightEdge
 | VisBottomEdge
 | VisMiddleEdge
 | VisTopEdge
 | VisBeginX
 | VisBeginY
 | VisBegin
 | VisEndX
 | VisEndY
 | VisEnd
 | VisControlPoint
 deriving ()
instance P.Enum VisFromParts where
  fromEnum v =
   case v of
   VisConnectFromError -> (-1)
   VisFromNone -> 0
   VisLeftEdge -> 1
   VisCenterEdge -> 2
   VisRightEdge -> 3
   VisBottomEdge -> 4
   VisMiddleEdge -> 5
   VisTopEdge -> 6
   VisBeginX -> 7
   VisBeginY -> 8
   VisBegin -> 9
   VisEndX -> 10
   VisEndY -> 11
   VisEnd -> 12
   VisControlPoint -> 100
  
  toEnum v =
   case v of
   (-1) -> VisConnectFromError
   0 -> VisFromNone
   1 -> VisLeftEdge
   2 -> VisCenterEdge
   3 -> VisRightEdge
   4 -> VisBottomEdge
   5 -> VisMiddleEdge
   6 -> VisTopEdge
   7 -> VisBeginX
   8 -> VisBeginY
   9 -> VisBegin
   10 -> VisEndX
   11 -> VisEndY
   12 -> VisEnd
   100 -> VisControlPoint
   _ -> P.error "unmarshallVisFromParts: illegal enum value "
  
data VisFontAttributes
 = VisFontRaster
 | VisFontDevice
 | VisFontScalable
 | VisFont0Alias
 deriving ()
instance P.Enum VisFontAttributes where
  fromEnum v =
   case v of
   VisFontRaster -> 16
   VisFontDevice -> 32
   VisFontScalable -> 64
   VisFont0Alias -> 128
  
  toEnum v =
   case v of
   16 -> VisFontRaster
   32 -> VisFontDevice
   64 -> VisFontScalable
   128 -> VisFont0Alias
   _ -> P.error "unmarshallVisFontAttributes: illegal enum value "
  
data VisFieldFormats
 = VisFmtNumGenNoUnits
 | VisFmtNumGenDefUnits
 | VisFmt0PlNoUnits
 | VisFmt0PlDefUnits
 | VisFmt1PlNoUnits
 | VisFmt1PlDefUnits
 | VisFmt2PlNoUnits
 | VisFmt2PlDefUnits
 | VisFmt3PlNoUnits
 | VisFmt3PlDefUnits
 | VisFmtFeetAndInches
 | VisFmtRadians
 | VisFmtDegrees
 | VisFmtFeetAndInches1Pl
 | VisFmtFeetAndInches2Pl
 | VisFmtFraction1PlNoUnits
 | VisFmtFraction1PlDefUnits
 | VisFmtFraction2PlNoUnits
 | VisFmtFraction2PlDefUnits
 | VisFmtDateShort
 | VisFmtDateLong
 | VisFmtDateMDYY
 | VisFmtDateMMDDYY
 | VisFmtDateMmmDYYYY
 | VisFmtDateMmmmDYYYY
 | VisFmtDateDMYY
 | VisFmtDateDDMMYY
 | VisFmtDateDMMMYYYY
 | VisFmtDateDMMMMYYYY
 | VisFmtTimeGen
 | VisFmtTimeHMM
 | VisFmtTimeHHMM
 | VisFmtTimeHMM24
 | VisFmtTimeHHMM24
 | VisFmtTimeHMMAMPM
 | VisFmtTimeHHMMAMPM
 | VisFmtStrNormal
 | VisFmtStrLower
 | VisFmtStrUpper
 | VisFmtJDategggeXmXdXww
 | VisFmtJDateyyyyXmXdXww
 | VisFmtJDategggeXmXdX
 | VisFmtJDateyyyyXmXdX
 | VisFmtJDateyyyymd
 | VisFmtJDateyymmdd
 | VisFmtJDatehmmaxpx
 | VisFmtJDateaxpxhmm
 | VisFmtJDateaxpxhXmmX
 | VisFmtJDatehXmmX
 | VisFmtCDategggeXmmmmXdddd
 | VisFmtCDateggeXmmmmXdddd
 | VisFmtCDategeXmmmmXdddd
 deriving ()
instance P.Enum VisFieldFormats where
  fromEnum v =
   case v of
   VisFmtNumGenNoUnits -> 0
   VisFmtNumGenDefUnits -> 1
   VisFmt0PlNoUnits -> 2
   VisFmt0PlDefUnits -> 3
   VisFmt1PlNoUnits -> 4
   VisFmt1PlDefUnits -> 5
   VisFmt2PlNoUnits -> 6
   VisFmt2PlDefUnits -> 7
   VisFmt3PlNoUnits -> 8
   VisFmt3PlDefUnits -> 9
   VisFmtFeetAndInches -> 10
   VisFmtRadians -> 11
   VisFmtDegrees -> 12
   VisFmtFeetAndInches1Pl -> 13
   VisFmtFeetAndInches2Pl -> 14
   VisFmtFraction1PlNoUnits -> 15
   VisFmtFraction1PlDefUnits -> 16
   VisFmtFraction2PlNoUnits -> 17
   VisFmtFraction2PlDefUnits -> 18
   VisFmtDateShort -> 20
   VisFmtDateLong -> 21
   VisFmtDateMDYY -> 22
   VisFmtDateMMDDYY -> 23
   VisFmtDateMmmDYYYY -> 24
   VisFmtDateMmmmDYYYY -> 25
   VisFmtDateDMYY -> 26
   VisFmtDateDDMMYY -> 27
   VisFmtDateDMMMYYYY -> 28
   VisFmtDateDMMMMYYYY -> 29
   VisFmtTimeGen -> 30
   VisFmtTimeHMM -> 31
   VisFmtTimeHHMM -> 32
   VisFmtTimeHMM24 -> 33
   VisFmtTimeHHMM24 -> 34
   VisFmtTimeHMMAMPM -> 35
   VisFmtTimeHHMMAMPM -> 36
   VisFmtStrNormal -> 37
   VisFmtStrLower -> 38
   VisFmtStrUpper -> 39
   VisFmtJDategggeXmXdXww -> 40
   VisFmtJDateyyyyXmXdXww -> 41
   VisFmtJDategggeXmXdX -> 42
   VisFmtJDateyyyyXmXdX -> 43
   VisFmtJDateyyyymd -> 44
   VisFmtJDateyymmdd -> 45
   VisFmtJDatehmmaxpx -> 46
   VisFmtJDateaxpxhmm -> 47
   VisFmtJDateaxpxhXmmX -> 48
   VisFmtJDatehXmmX -> 49
   VisFmtCDategggeXmmmmXdddd -> 50
   VisFmtCDateggeXmmmmXdddd -> 51
   VisFmtCDategeXmmmmXdddd -> 52
  
  toEnum v =
   case v of
   0 -> VisFmtNumGenNoUnits
   1 -> VisFmtNumGenDefUnits
   2 -> VisFmt0PlNoUnits
   3 -> VisFmt0PlDefUnits
   4 -> VisFmt1PlNoUnits
   5 -> VisFmt1PlDefUnits
   6 -> VisFmt2PlNoUnits
   7 -> VisFmt2PlDefUnits
   8 -> VisFmt3PlNoUnits
   9 -> VisFmt3PlDefUnits
   10 -> VisFmtFeetAndInches
   11 -> VisFmtRadians
   12 -> VisFmtDegrees
   13 -> VisFmtFeetAndInches1Pl
   14 -> VisFmtFeetAndInches2Pl
   15 -> VisFmtFraction1PlNoUnits
   16 -> VisFmtFraction1PlDefUnits
   17 -> VisFmtFraction2PlNoUnits
   18 -> VisFmtFraction2PlDefUnits
   20 -> VisFmtDateShort
   21 -> VisFmtDateLong
   22 -> VisFmtDateMDYY
   23 -> VisFmtDateMMDDYY
   24 -> VisFmtDateMmmDYYYY
   25 -> VisFmtDateMmmmDYYYY
   26 -> VisFmtDateDMYY
   27 -> VisFmtDateDDMMYY
   28 -> VisFmtDateDMMMYYYY
   29 -> VisFmtDateDMMMMYYYY
   30 -> VisFmtTimeGen
   31 -> VisFmtTimeHMM
   32 -> VisFmtTimeHHMM
   33 -> VisFmtTimeHMM24
   34 -> VisFmtTimeHHMM24
   35 -> VisFmtTimeHMMAMPM
   36 -> VisFmtTimeHHMMAMPM
   37 -> VisFmtStrNormal
   38 -> VisFmtStrLower
   39 -> VisFmtStrUpper
   40 -> VisFmtJDategggeXmXdXww
   41 -> VisFmtJDateyyyyXmXdXww
   42 -> VisFmtJDategggeXmXdX
   43 -> VisFmtJDateyyyyXmXdX
   44 -> VisFmtJDateyyyymd
   45 -> VisFmtJDateyymmdd
   46 -> VisFmtJDatehmmaxpx
   47 -> VisFmtJDateaxpxhmm
   48 -> VisFmtJDateaxpxhXmmX
   49 -> VisFmtJDatehXmmX
   50 -> VisFmtCDategggeXmmmmXdddd
   51 -> VisFmtCDateggeXmmmmXdddd
   52 -> VisFmtCDategeXmmmmXdddd
   _ -> P.error "unmarshallVisFieldFormats: illegal enum value "
  
data VisFieldCodes
 = VisFCodeCreateDate
 | VisFCodeCreateTime
 | VisFCodeCurrentDate
 | VisFCodeCurrentTime
 | VisFCodeEditDate
 | VisFCodeEditTime
 | VisFCodePrintDate
 | VisFCodePrintTime
 | VisFCodeCreator
 | VisFCodeDescription
 | VisFCodeDirectory
 | VisFCodeFileName
 | VisFCodeKeyWords
 | VisFCodeSubject
 | VisFCodeTitle
 | VisFCodeManager
 | VisFCodeCompany
 | VisFCodeCategory
 | VisFCodeHyperlinkBase
 | VisFCodeWidth
 | VisFCodeHeight
 | VisFCodeAngle
 | VisFCodeData1
 | VisFCodeData2
 | VisFCodeData3
 | VisFCodeObjectID
 | VisFCodeMasterName
 | VisFCodeObjectName
 | VisFCodeObjectType
 | VisFCodeBackgroundName
 | VisFCodePageName
 | VisFCodeNumberOfPages
 | VisFCodePageNumber
 deriving ()
instance P.Enum VisFieldCodes where
  fromEnum v =
   case v of
   VisFCodeCreateDate -> 0
   VisFCodeCreateTime -> 1
   VisFCodeCurrentDate -> 2
   VisFCodeCurrentTime -> 3
   VisFCodeEditDate -> 4
   VisFCodeEditTime -> 5
   VisFCodePrintDate -> 6
   VisFCodePrintTime -> 7
   VisFCodeCreator -> 0
   VisFCodeDescription -> 1
   VisFCodeDirectory -> 2
   VisFCodeFileName -> 3
   VisFCodeKeyWords -> 4
   VisFCodeSubject -> 5
   VisFCodeTitle -> 6
   VisFCodeManager -> 7
   VisFCodeCompany -> 8
   VisFCodeCategory -> 9
   VisFCodeHyperlinkBase -> 10
   VisFCodeWidth -> 0
   VisFCodeHeight -> 1
   VisFCodeAngle -> 2
   VisFCodeData1 -> 0
   VisFCodeData2 -> 1
   VisFCodeData3 -> 2
   VisFCodeObjectID -> 3
   VisFCodeMasterName -> 4
   VisFCodeObjectName -> 5
   VisFCodeObjectType -> 6
   VisFCodeBackgroundName -> 0
   VisFCodePageName -> 1
   VisFCodeNumberOfPages -> 2
   VisFCodePageNumber -> 3
  
  toEnum v =
   case v of
   0 -> VisFCodeCreateDate
   1 -> VisFCodeCreateTime
   2 -> VisFCodeCurrentDate
   3 -> VisFCodeCurrentTime
   4 -> VisFCodeEditDate
   5 -> VisFCodeEditTime
   6 -> VisFCodePrintDate
   7 -> VisFCodePrintTime
   0 -> VisFCodeCreator
   1 -> VisFCodeDescription
   2 -> VisFCodeDirectory
   3 -> VisFCodeFileName
   4 -> VisFCodeKeyWords
   5 -> VisFCodeSubject
   6 -> VisFCodeTitle
   7 -> VisFCodeManager
   8 -> VisFCodeCompany
   9 -> VisFCodeCategory
   10 -> VisFCodeHyperlinkBase
   0 -> VisFCodeWidth
   1 -> VisFCodeHeight
   2 -> VisFCodeAngle
   0 -> VisFCodeData1
   1 -> VisFCodeData2
   2 -> VisFCodeData3
   3 -> VisFCodeObjectID
   4 -> VisFCodeMasterName
   5 -> VisFCodeObjectName
   6 -> VisFCodeObjectType
   0 -> VisFCodeBackgroundName
   1 -> VisFCodePageName
   2 -> VisFCodeNumberOfPages
   3 -> VisFCodePageNumber
   _ -> P.error "unmarshallVisFieldCodes: illegal enum value "
  
data VisFieldCategories
 = VisFCatCustom
 | VisFCatDateTime
 | VisFCatDocument
 | VisFCatGeometry
 | VisFCatObject
 | VisFCatPage
 | VisFCatNotes
 deriving ()
instance P.Enum VisFieldCategories where
  fromEnum v =
   case v of
   VisFCatCustom -> 0
   VisFCatDateTime -> 1
   VisFCatDocument -> 2
   VisFCatGeometry -> 3
   VisFCatObject -> 4
   VisFCatPage -> 5
   VisFCatNotes -> 6
  
  toEnum v =
   case v of
   0 -> VisFCatCustom
   1 -> VisFCatDateTime
   2 -> VisFCatDocument
   3 -> VisFCatGeometry
   4 -> VisFCatObject
   5 -> VisFCatPage
   6 -> VisFCatNotes
   _ -> P.error "unmarshallVisFieldCategories: illegal enum value "
  
data VisExistsFlags
 = VisExistsLocally
 | VisExistsAnywhere
 deriving ()
instance P.Enum VisExistsFlags where
  fromEnum v =
   case v of
   VisExistsLocally -> 1
   VisExistsAnywhere -> 0
  
  toEnum v =
   case v of
   1 -> VisExistsLocally
   0 -> VisExistsAnywhere
   _ -> P.error "unmarshallVisExistsFlags: illegal enum value "
  
data VisEventCodes
 = VisEvtIDInval
 | VisEvtCodeInval
 | VisEvtCodeDocCreate
 | VisEvtCodeDocOpen
 | VisEvtCodeDocSave
 | VisEvtCodeDocSaveAs
 | VisEvtCodeDocRunning
 | VisEvtCodeDocDesign
 | VisEvtCodeBefDocSave
 | VisEvtCodeBefDocSaveAs
 | VisEvtCodeBefForcedFlush
 | VisEvtCodeAfterForcedFlush
 | VisEvtCodeWinSelChange
 | VisEvtCodeBefWinSelDel
 | VisEvtCodeBefWinPageTurn
 | VisEvtCodeWinPageTurn
 | VisEvtCodeShapeDelete
 | VisEvtCodeBefSelDel
 | VisEvtCodeSelAdded
 | VisEvtAdd
 | VisEvtDel
 | VisEvtMod
 | VisEvtWindow
 | VisEvtDoc
 | VisEvtStyle
 | VisEvtMaster
 | VisEvtPage
 | VisEvtLayer
 | VisEvtShape
 | VisEvtText
 | VisEvtConnect
 | VisEvtSection
 | VisEvtRow
 | VisEvtCell
 | VisEvtFormula
 | VisEvtApp
 | VisEvtAppActivate
 | VisEvtAppDeactivate
 | VisEvtObjActivate
 | VisEvtObjDeactivate
 | VisEvtBeforeQuit
 | VisEvtBeforeModal
 | VisEvtAfterModal
 | VisEvtWinActivate
 | VisEvtMarker
 | VisEvtNonePending
 | VisEvtIdle
 | VisEvtCode1stUser
 | VisEvtCodeLastUser
 | VisEvtCodeCreate
 | VisEvtCodeOpen
 | VisActCodeRunAddon
 | VisActCodeAdvise
 | VisEvtIdMostRecent
 deriving ()
instance P.Enum VisEventCodes where
  fromEnum v =
   case v of
   VisEvtIDInval -> (-1)
   VisEvtCodeInval -> 0
   VisEvtCodeDocCreate -> 1
   VisEvtCodeDocOpen -> 2
   VisEvtCodeDocSave -> 3
   VisEvtCodeDocSaveAs -> 4
   VisEvtCodeDocRunning -> 5
   VisEvtCodeDocDesign -> 6
   VisEvtCodeBefDocSave -> 7
   VisEvtCodeBefDocSaveAs -> 8
   VisEvtCodeBefForcedFlush -> 200
   VisEvtCodeAfterForcedFlush -> 201
   VisEvtCodeWinSelChange -> 701
   VisEvtCodeBefWinSelDel -> 702
   VisEvtCodeBefWinPageTurn -> 703
   VisEvtCodeWinPageTurn -> 704
   VisEvtCodeShapeDelete -> 801
   VisEvtCodeBefSelDel -> 901
   VisEvtCodeSelAdded -> 902
   VisEvtAdd -> 32768
   VisEvtDel -> 16384
   VisEvtMod -> 8192
   VisEvtWindow -> 1
   VisEvtDoc -> 2
   VisEvtStyle -> 4
   VisEvtMaster -> 8
   VisEvtPage -> 16
   VisEvtLayer -> 32
   VisEvtShape -> 64
   VisEvtText -> 128
   VisEvtConnect -> 256
   VisEvtSection -> 512
   VisEvtRow -> 1024
   VisEvtCell -> 2048
   VisEvtFormula -> 4096
   VisEvtApp -> 4096
   VisEvtAppActivate -> 1
   VisEvtAppDeactivate -> 2
   VisEvtObjActivate -> 4
   VisEvtObjDeactivate -> 8
   VisEvtBeforeQuit -> 16
   VisEvtBeforeModal -> 32
   VisEvtAfterModal -> 64
   VisEvtWinActivate -> 128
   VisEvtMarker -> 256
   VisEvtNonePending -> 512
   VisEvtIdle -> 1024
   VisEvtCode1stUser -> 28672
   VisEvtCodeLastUser -> 32767
   VisEvtCodeCreate -> 1
   VisEvtCodeOpen -> 2
   VisActCodeRunAddon -> 1
   VisActCodeAdvise -> 2
   VisEvtIdMostRecent -> 0
  
  toEnum v =
   case v of
   (-1) -> VisEvtIDInval
   0 -> VisEvtCodeInval
   1 -> VisEvtCodeDocCreate
   2 -> VisEvtCodeDocOpen
   3 -> VisEvtCodeDocSave
   4 -> VisEvtCodeDocSaveAs
   5 -> VisEvtCodeDocRunning
   6 -> VisEvtCodeDocDesign
   7 -> VisEvtCodeBefDocSave
   8 -> VisEvtCodeBefDocSaveAs
   200 -> VisEvtCodeBefForcedFlush
   201 -> VisEvtCodeAfterForcedFlush
   701 -> VisEvtCodeWinSelChange
   702 -> VisEvtCodeBefWinSelDel
   703 -> VisEvtCodeBefWinPageTurn
   704 -> VisEvtCodeWinPageTurn
   801 -> VisEvtCodeShapeDelete
   901 -> VisEvtCodeBefSelDel
   902 -> VisEvtCodeSelAdded
   32768 -> VisEvtAdd
   16384 -> VisEvtDel
   8192 -> VisEvtMod
   1 -> VisEvtWindow
   2 -> VisEvtDoc
   4 -> VisEvtStyle
   8 -> VisEvtMaster
   16 -> VisEvtPage
   32 -> VisEvtLayer
   64 -> VisEvtShape
   128 -> VisEvtText
   256 -> VisEvtConnect
   512 -> VisEvtSection
   1024 -> VisEvtRow
   2048 -> VisEvtCell
   4096 -> VisEvtFormula
   4096 -> VisEvtApp
   1 -> VisEvtAppActivate
   2 -> VisEvtAppDeactivate
   4 -> VisEvtObjActivate
   8 -> VisEvtObjDeactivate
   16 -> VisEvtBeforeQuit
   32 -> VisEvtBeforeModal
   64 -> VisEvtAfterModal
   128 -> VisEvtWinActivate
   256 -> VisEvtMarker
   512 -> VisEvtNonePending
   1024 -> VisEvtIdle
   28672 -> VisEvtCode1stUser
   32767 -> VisEvtCodeLastUser
   1 -> VisEvtCodeCreate
   2 -> VisEvtCodeOpen
   1 -> VisActCodeRunAddon
   2 -> VisActCodeAdvise
   0 -> VisEvtIdMostRecent
   _ -> P.error "unmarshallVisEventCodes: illegal enum value "
  
data VisDrawSplineFlags
 = VisSplinePeriodic
 | VisSplineDoCircles
 | VisSplineAbrupt
 | VisSpline1D
 deriving ()
instance P.Enum VisDrawSplineFlags where
  fromEnum v =
   case v of
   VisSplinePeriodic -> 1
   VisSplineDoCircles -> 2
   VisSplineAbrupt -> 4
   VisSpline1D -> 8
  
  toEnum v =
   case v of
   1 -> VisSplinePeriodic
   2 -> VisSplineDoCircles
   4 -> VisSplineAbrupt
   8 -> VisSpline1D
   _ -> P.error "unmarshallVisDrawSplineFlags: illegal enum value "
  
data VisDocVersions
 = VisVersionUnsaved
 | VisVersion10
 | VisVersion20
 | VisVersion30
 | VisVersion40
 | VisVersion50
 deriving ()
instance P.Enum VisDocVersions where
  fromEnum v =
   case v of
   VisVersionUnsaved -> 0
   VisVersion10 -> 65571
   VisVersion20 -> 131072
   VisVersion30 -> 196611
   VisVersion40 -> 262144
   VisVersion50 -> 327680
  
  toEnum v =
   case v of
   0 -> VisVersionUnsaved
   65571 -> VisVersion10
   131072 -> VisVersion20
   196611 -> VisVersion30
   262144 -> VisVersion40
   327680 -> VisVersion50
   _ -> P.error "unmarshallVisDocVersions: illegal enum value "
  
data VisDocModeArgs
 = VisDocModeRun
 | VisDocModeDesign
 deriving ()
instance P.Enum VisDocModeArgs where
  fromEnum v =
   case v of
   VisDocModeRun -> 0
   VisDocModeDesign -> 1
  
  toEnum v =
   case v of
   0 -> VisDocModeRun
   1 -> VisDocModeDesign
   _ -> P.error "unmarshallVisDocModeArgs: illegal enum value "
  
data VisDefaultColors
 = VisTransparent
 | VisBlack
 | VisWhite
 | VisRed
 | VisGreen
 | VisBlue
 | VisYellow
 | VisMagenta
 | VisCyan
 | VisDarkRed
 | VisDarkGreen
 | VisDarkBlue
 | VisDarkYellow
 | VisPurple
 | VisDarkCyan
 | VisGray
 | VisGray10
 | VisGray20
 | VisGray30
 | VisGray40
 | VisDarkGray
 | VisGray50
 | VisGray60
 | VisGray70
 | VisGray80
 | VisGray90
 deriving ()
instance P.Enum VisDefaultColors where
  fromEnum v =
   case v of
   VisTransparent -> 0
   VisBlack -> 0
   VisWhite -> 1
   VisRed -> 2
   VisGreen -> 3
   VisBlue -> 4
   VisYellow -> 5
   VisMagenta -> 6
   VisCyan -> 7
   VisDarkRed -> 8
   VisDarkGreen -> 9
   VisDarkBlue -> 10
   VisDarkYellow -> 11
   VisPurple -> 12
   VisDarkCyan -> 13
   VisGray -> 14
   VisGray10 -> 15
   VisGray20 -> 16
   VisGray30 -> 17
   VisGray40 -> 18
   VisDarkGray -> 19
   VisGray50 -> 19
   VisGray60 -> 20
   VisGray70 -> 21
   VisGray80 -> 22
   VisGray90 -> 23
  
  toEnum v =
   case v of
   0 -> VisTransparent
   0 -> VisBlack
   1 -> VisWhite
   2 -> VisRed
   3 -> VisGreen
   4 -> VisBlue
   5 -> VisYellow
   6 -> VisMagenta
   7 -> VisCyan
   8 -> VisDarkRed
   9 -> VisDarkGreen
   10 -> VisDarkBlue
   11 -> VisDarkYellow
   12 -> VisPurple
   13 -> VisDarkCyan
   14 -> VisGray
   15 -> VisGray10
   16 -> VisGray20
   17 -> VisGray30
   18 -> VisGray40
   19 -> VisDarkGray
   19 -> VisGray50
   20 -> VisGray60
   21 -> VisGray70
   22 -> VisGray80
   23 -> VisGray90
   _ -> P.error "unmarshallVisDefaultColors: illegal enum value "
  
data VisCharsBias
 = VisBiasLetVisioChoose
 | VisBiasLeft
 | VisBiasRight
 deriving ()
instance P.Enum VisCharsBias where
  fromEnum v =
   case v of
   VisBiasLetVisioChoose -> 0
   VisBiasLeft -> 1
   VisBiasRight -> 2
  
  toEnum v =
   case v of
   0 -> VisBiasLetVisioChoose
   1 -> VisBiasLeft
   2 -> VisBiasRight
   _ -> P.error "unmarshallVisCharsBias: illegal enum value "
  
data VisCellVals
 = VisXFormResizeDontCare
 | VisXFormResizeSpread
 | VisXFormResizeScale
 | VisNoFill
 | VisSolid
 | VisWideUpDiagonal
 | VisWideCross
 | VisWideDiagonalCross
 | VisWideDownDiagonal
 | VisWideHorz
 | VisWideVert
 | VisBackDotsMini
 | VisHalfAndHalf
 | VisForeDotsMini
 | VisForeDotsNarrow
 | VisForeDotsWide
 | VisThickHorz
 | VisThickVertical
 | VisThickDownDiagonal
 | VisThickUpDiagonal
 | VisThickDiagonalCross
 | VisBackDotsWide
 | VisThinHorz
 | VisThinVert
 | VisThinDownDiagonal
 | VisThinUpDiagonal
 | VisThinCross
 | VisThinDiagonalCross
 | VisGuideXActive
 | VisGuideYActive
 | VisPrintSetup
 | VisTight
 | VisStandard
 | VisCustom
 | VisLogical
 | VisDSMetric
 | VisDSEngr
 | VisDSArch
 | VisNoScale
 | VisArchitectural
 | VisEngineering
 | VisScaleCustom
 | VisScaleMetric
 | VisScaleMechanical
 | VisVertTop
 | VisVertMiddle
 | VisVertBottom
 | VisTxtBlkOpaque
 | VisDynFBDefault
 | VisDynFBUCon3Leg
 | VisDynFBUCon5Leg
 | VisGlueTypeDefault
 | VisGlueTypeTrigger
 | VisGlueTypeWalking
 | VisWalkPrefBegNS
 | VisWalkPrefEndNS
 | VisLOFlagsVisDecides
 | VisLOFlagsPlacable
 | VisLOFlagsRoutable
 | VisLOFlagsDont
 | VisLOFlagsPNRGroup
 | VisLOIPlaceNormal
 | VisLOIRouteNormal
 | VisLOBPlaceNormal
 | VisLOBRouteNormal
 | VisLOBRouteRightAng
 | VisLOBRouteStraight
 | VisLOBRouteFlowNS
 | VisLOBRouteFlowWE
 | VisLOBRouteTreeNS
 | VisLOBRouteTreeWE
 | VisRulerFine
 | VisRulerNormal
 | VisRulerCoarse
 | VisRulerFixed
 | VisGridFine
 | VisGridNormal
 | VisGridCoarse
 | VisGridFixed
 | VisBold
 | VisItalic
 | VisUnderLine
 | VisSmallCaps
 | VisCaseNormal
 | VisCaseAllCaps
 | VisCaseInitialCaps
 | VisPosNormal
 | VisPosSuper
 | VisPosSub
 | VisHorzLeft
 | VisHorzCenter
 | VisHorzRight
 | VisHorzJustify
 | VisHorzForce
 | VisTabStopLeft
 | VisTabStopCenter
 | VisTabStopRight
 | VisTabStopDecimal
 | VisTabStopComma
 | VisCtlProportional
 | VisCtlLocked
 | VisCtlOffsetMin
 | VisCtlOffsetMid
 | VisCtlOffsetMax
 | VisCtlProportionalHidden
 | VisCtlLockedHidden
 | VisCtlOffsetMinHidden
 | VisCtlOffsetMidHidden
 | VisCtlOffsetMaxHidden
 | VisNoLayerColor
 | VisLayerValid
 | VisLayerDeleted
 | VisLayerAvailable
 | VisPropTypeString
 | VisPropTypeListFix
 | VisPropTypeNumber
 | VisPropTypeBool
 | VisPropTypeListVar
 deriving ()
instance P.Enum VisCellVals where
  fromEnum v =
   case v of
   VisXFormResizeDontCare -> 0
   VisXFormResizeSpread -> 1
   VisXFormResizeScale -> 2
   VisNoFill -> 0
   VisSolid -> 1
   VisWideUpDiagonal -> 2
   VisWideCross -> 3
   VisWideDiagonalCross -> 4
   VisWideDownDiagonal -> 5
   VisWideHorz -> 6
   VisWideVert -> 7
   VisBackDotsMini -> 8
   VisHalfAndHalf -> 9
   VisForeDotsMini -> 10
   VisForeDotsNarrow -> 11
   VisForeDotsWide -> 12
   VisThickHorz -> 13
   VisThickVertical -> 14
   VisThickDownDiagonal -> 15
   VisThickUpDiagonal -> 16
   VisThickDiagonalCross -> 17
   VisBackDotsWide -> 18
   VisThinHorz -> 19
   VisThinVert -> 20
   VisThinDownDiagonal -> 21
   VisThinUpDiagonal -> 22
   VisThinCross -> 23
   VisThinDiagonalCross -> 24
   VisGuideXActive -> 1024
   VisGuideYActive -> 2048
   VisPrintSetup -> 0
   VisTight -> 1
   VisStandard -> 2
   VisCustom -> 3
   VisLogical -> 4
   VisDSMetric -> 5
   VisDSEngr -> 6
   VisDSArch -> 7
   VisNoScale -> 0
   VisArchitectural -> 1
   VisEngineering -> 2
   VisScaleCustom -> 3
   VisScaleMetric -> 4
   VisScaleMechanical -> 5
   VisVertTop -> 0
   VisVertMiddle -> 1
   VisVertBottom -> 2
   VisTxtBlkOpaque -> 255
   VisDynFBDefault -> 0
   VisDynFBUCon3Leg -> 1
   VisDynFBUCon5Leg -> 2
   VisGlueTypeDefault -> 0
   VisGlueTypeTrigger -> 1
   VisGlueTypeWalking -> 2
   VisWalkPrefBegNS -> 1
   VisWalkPrefEndNS -> 2
   VisLOFlagsVisDecides -> 0
   VisLOFlagsPlacable -> 1
   VisLOFlagsRoutable -> 2
   VisLOFlagsDont -> 4
   VisLOFlagsPNRGroup -> 8
   VisLOIPlaceNormal -> 0
   VisLOIRouteNormal -> 0
   VisLOBPlaceNormal -> 0
   VisLOBRouteNormal -> 0
   VisLOBRouteRightAng -> 1
   VisLOBRouteStraight -> 2
   VisLOBRouteFlowNS -> 5
   VisLOBRouteFlowWE -> 6
   VisLOBRouteTreeNS -> 7
   VisLOBRouteTreeWE -> 8
   VisRulerFine -> 32
   VisRulerNormal -> 16
   VisRulerCoarse -> 8
   VisRulerFixed -> 0
   VisGridFine -> 8
   VisGridNormal -> 4
   VisGridCoarse -> 2
   VisGridFixed -> 0
   VisBold -> 1
   VisItalic -> 2
   VisUnderLine -> 4
   VisSmallCaps -> 8
   VisCaseNormal -> 0
   VisCaseAllCaps -> 1
   VisCaseInitialCaps -> 2
   VisPosNormal -> 0
   VisPosSuper -> 1
   VisPosSub -> 2
   VisHorzLeft -> 0
   VisHorzCenter -> 1
   VisHorzRight -> 2
   VisHorzJustify -> 3
   VisHorzForce -> 4
   VisTabStopLeft -> 0
   VisTabStopCenter -> 1
   VisTabStopRight -> 2
   VisTabStopDecimal -> 3
   VisTabStopComma -> 4
   VisCtlProportional -> 0
   VisCtlLocked -> 1
   VisCtlOffsetMin -> 2
   VisCtlOffsetMid -> 3
   VisCtlOffsetMax -> 4
   VisCtlProportionalHidden -> 5
   VisCtlLockedHidden -> 6
   VisCtlOffsetMinHidden -> 7
   VisCtlOffsetMidHidden -> 8
   VisCtlOffsetMaxHidden -> 9
   VisNoLayerColor -> 255
   VisLayerValid -> 0
   VisLayerDeleted -> 1
   VisLayerAvailable -> 2
   VisPropTypeString -> 0
   VisPropTypeListFix -> 1
   VisPropTypeNumber -> 2
   VisPropTypeBool -> 3
   VisPropTypeListVar -> 4
  
  toEnum v =
   case v of
   0 -> VisXFormResizeDontCare
   1 -> VisXFormResizeSpread
   2 -> VisXFormResizeScale
   0 -> VisNoFill
   1 -> VisSolid
   2 -> VisWideUpDiagonal
   3 -> VisWideCross
   4 -> VisWideDiagonalCross
   5 -> VisWideDownDiagonal
   6 -> VisWideHorz
   7 -> VisWideVert
   8 -> VisBackDotsMini
   9 -> VisHalfAndHalf
   10 -> VisForeDotsMini
   11 -> VisForeDotsNarrow
   12 -> VisForeDotsWide
   13 -> VisThickHorz
   14 -> VisThickVertical
   15 -> VisThickDownDiagonal
   16 -> VisThickUpDiagonal
   17 -> VisThickDiagonalCross
   18 -> VisBackDotsWide
   19 -> VisThinHorz
   20 -> VisThinVert
   21 -> VisThinDownDiagonal
   22 -> VisThinUpDiagonal
   23 -> VisThinCross
   24 -> VisThinDiagonalCross
   1024 -> VisGuideXActive
   2048 -> VisGuideYActive
   0 -> VisPrintSetup
   1 -> VisTight
   2 -> VisStandard
   3 -> VisCustom
   4 -> VisLogical
   5 -> VisDSMetric
   6 -> VisDSEngr
   7 -> VisDSArch
   0 -> VisNoScale
   1 -> VisArchitectural
   2 -> VisEngineering
   3 -> VisScaleCustom
   4 -> VisScaleMetric
   5 -> VisScaleMechanical
   0 -> VisVertTop
   1 -> VisVertMiddle
   2 -> VisVertBottom
   255 -> VisTxtBlkOpaque
   0 -> VisDynFBDefault
   1 -> VisDynFBUCon3Leg
   2 -> VisDynFBUCon5Leg
   0 -> VisGlueTypeDefault
   1 -> VisGlueTypeTrigger
   2 -> VisGlueTypeWalking
   1 -> VisWalkPrefBegNS
   2 -> VisWalkPrefEndNS
   0 -> VisLOFlagsVisDecides
   1 -> VisLOFlagsPlacable
   2 -> VisLOFlagsRoutable
   4 -> VisLOFlagsDont
   8 -> VisLOFlagsPNRGroup
   0 -> VisLOIPlaceNormal
   0 -> VisLOIRouteNormal
   0 -> VisLOBPlaceNormal
   0 -> VisLOBRouteNormal
   1 -> VisLOBRouteRightAng
   2 -> VisLOBRouteStraight
   5 -> VisLOBRouteFlowNS
   6 -> VisLOBRouteFlowWE
   7 -> VisLOBRouteTreeNS
   8 -> VisLOBRouteTreeWE
   32 -> VisRulerFine
   16 -> VisRulerNormal
   8 -> VisRulerCoarse
   0 -> VisRulerFixed
   8 -> VisGridFine
   4 -> VisGridNormal
   2 -> VisGridCoarse
   0 -> VisGridFixed
   1 -> VisBold
   2 -> VisItalic
   4 -> VisUnderLine
   8 -> VisSmallCaps
   0 -> VisCaseNormal
   1 -> VisCaseAllCaps
   2 -> VisCaseInitialCaps
   0 -> VisPosNormal
   1 -> VisPosSuper
   2 -> VisPosSub
   0 -> VisHorzLeft
   1 -> VisHorzCenter
   2 -> VisHorzRight
   3 -> VisHorzJustify
   4 -> VisHorzForce
   0 -> VisTabStopLeft
   1 -> VisTabStopCenter
   2 -> VisTabStopRight
   3 -> VisTabStopDecimal
   4 -> VisTabStopComma
   0 -> VisCtlProportional
   1 -> VisCtlLocked
   2 -> VisCtlOffsetMin
   3 -> VisCtlOffsetMid
   4 -> VisCtlOffsetMax
   5 -> VisCtlProportionalHidden
   6 -> VisCtlLockedHidden
   7 -> VisCtlOffsetMinHidden
   8 -> VisCtlOffsetMidHidden
   9 -> VisCtlOffsetMaxHidden
   255 -> VisNoLayerColor
   0 -> VisLayerValid
   1 -> VisLayerDeleted
   2 -> VisLayerAvailable
   0 -> VisPropTypeString
   1 -> VisPropTypeListFix
   2 -> VisPropTypeNumber
   3 -> VisPropTypeBool
   4 -> VisPropTypeListVar
   _ -> P.error "unmarshallVisCellVals: illegal enum value "
  
data VisCellIndices
 = VisXFormPinX
 | VisXFormPinY
 | VisXFormWidth
 | VisXFormHeight
 | VisXFormLocPinX
 | VisXFormLocPinY
 | VisXFormAngle
 | VisXFormFlipX
 | VisXFormFlipY
 | VisXFormResizeMode
 | VisLineWeight
 | VisLineColor
 | VisLinePattern
 | VisLineRounding
 | VisLineArrowSize
 | VisLineBeginArrow
 | VisLineEndArrow
 | VisLineEndCap
 | VisFillForegnd
 | VisFillBkgnd
 | VisFillPattern
 | VisFillShdwForegnd
 | VisFillShdwBkgnd
 | VisFillShdwPattern
 | Vis1DBeginX
 | Vis1DBeginY
 | Vis1DEndX
 | Vis1DEndY
 | VisEvtCellTheData
 | VisEvtCellTheText
 | VisEvtCellDblClick
 | VisEvtCellXFMod
 | VisEvtCellDrop
 | VisLayerMember
 | VisGuideFlags
 | VisStyleIncludesLine
 | VisStyleIncludesFill
 | VisStyleIncludesText
 | VisFrgnImgOffsetX
 | VisFrgnImgOffsetY
 | VisFrgnImgWidth
 | VisFrgnImgHeight
 | VisPageWidth
 | VisPageHeight
 | VisPageShdwOffsetX
 | VisPageShdwOffsetY
 | VisPageScale
 | VisPageDrawingScale
 | VisPageDrawSizeType
 | VisPageDrawScaleType
 | VisTxtBlkLeftMargin
 | VisTxtBlkRightMargin
 | VisTxtBlkTopMargin
 | VisTxtBlkBottomMargin
 | VisTxtBlkVerticalAlign
 | VisTxtBlkBkgnd
 | VisAlignLeft
 | VisAlignCenter
 | VisAlignRight
 | VisAlignTop
 | VisAlignMiddle
 | VisAlignBottom
 | VisLockWidth
 | VisLockHeight
 | VisLockMoveX
 | VisLockMoveY
 | VisLockAspect
 | VisLockDelete
 | VisLockBegin
 | VisLockEnd
 | VisLockRotate
 | VisLockCrop
 | VisLockVtxEdit
 | VisLockTextEdit
 | VisLockFormat
 | VisLockGroup
 | VisLockCalcWH
 | VisLockSelect
 | VisObjHelp
 | VisCopyRight
 | VisNoObjHandles
 | VisNonPrinting
 | VisNoCtlHandles
 | VisNoAlignBox
 | VisUpdateAlignBox
 | VisHideText
 | VisDynFeedback
 | VisGlueType
 | VisWalkPref
 | VisBegTrigger
 | VisEndTrigger
 | VisLOFlags
 | VisLOInteraction
 | VisLOBehavior
 | VisXRulerDensity
 | VisYRulerDensity
 | VisXRulerOrigin
 | VisYRulerOrigin
 | VisXGridDensity
 | VisYGridDensity
 | VisXGridSpacing
 | VisYGridSpacing
 | VisXGridOrigin
 | VisYGridOrigin
 | VisHLinkDescription
 | VisHLinkAddress
 | VisHLinkSubAddress
 | VisHLinkExtraInfo
 | VisHLinkFrame
 | VisHLinkNewWin
 | VisCompNoFill
 | VisCompNoShow
 | VisX
 | VisY
 | VisBow
 | VisControlX
 | VisControlY
 | VisEccentricityAngle
 | VisAspectRatio
 | VisSplineKnot
 | VisSplineKnot2
 | VisSplineKnot3
 | VisSplineDegree
 | VisFieldCell
 | VisCharacterFont
 | VisCharacterColor
 | VisCharacterStyle
 | VisCharacterCase
 | VisCharacterPos
 | VisCharacterSize
 | VisIndentFirst
 | VisIndentLeft
 | VisIndentRight
 | VisSpaceLine
 | VisSpaceBefore
 | VisSpaceAfter
 | VisHorzAlign
 | VisTabStopCount
 | VisTabPos
 | VisTabAlign
 | VisScratchX
 | VisScratchY
 | VisScratchA
 | VisScratchB
 | VisScratchC
 | VisScratchD
 | VisCnnctA
 | VisCnnctB
 | VisCnnctC
 | VisCnnctD
 | VisCtlX
 | VisCtlY
 | VisCtlXDyn
 | VisCtlYDyn
 | VisCtlXCon
 | VisCtlYCon
 | VisCtlGlue
 | VisCtlType
 | VisCtlTip
 | VisActionMenu
 | VisActionPrompt
 | VisActionHelp
 | VisActionAction
 | VisActionChecked
 | VisActionDisabled
 | VisLayerName
 | VisLayerColor
 | VisLayerStatus
 | VisLayerVisible
 | VisLayerPrint
 | VisLayerActive
 | VisLayerLock
 | VisLayerSnap
 | VisLayerGlue
 | VisUserValue
 | VisUserPrompt
 | VisCustPropsValue
 | VisCustPropsPrompt
 | VisCustPropsLabel
 | VisCustPropsFormat
 | VisCustPropsSortKey
 | VisCustPropsType
 | VisCustPropsInvis
 | VisCustPropsAsk
 deriving ()
instance P.Enum VisCellIndices where
  fromEnum v =
   case v of
   VisXFormPinX -> 0
   VisXFormPinY -> 1
   VisXFormWidth -> 2
   VisXFormHeight -> 3
   VisXFormLocPinX -> 4
   VisXFormLocPinY -> 5
   VisXFormAngle -> 6
   VisXFormFlipX -> 7
   VisXFormFlipY -> 8
   VisXFormResizeMode -> 9
   VisLineWeight -> 0
   VisLineColor -> 1
   VisLinePattern -> 2
   VisLineRounding -> 3
   VisLineArrowSize -> 4
   VisLineBeginArrow -> 5
   VisLineEndArrow -> 6
   VisLineEndCap -> 7
   VisFillForegnd -> 0
   VisFillBkgnd -> 1
   VisFillPattern -> 2
   VisFillShdwForegnd -> 3
   VisFillShdwBkgnd -> 4
   VisFillShdwPattern -> 5
   Vis1DBeginX -> 0
   Vis1DBeginY -> 1
   Vis1DEndX -> 2
   Vis1DEndY -> 3
   VisEvtCellTheData -> 0
   VisEvtCellTheText -> 1
   VisEvtCellDblClick -> 2
   VisEvtCellXFMod -> 3
   VisEvtCellDrop -> 4
   VisLayerMember -> 0
   VisGuideFlags -> 2
   VisStyleIncludesLine -> 0
   VisStyleIncludesFill -> 1
   VisStyleIncludesText -> 2
   VisFrgnImgOffsetX -> 0
   VisFrgnImgOffsetY -> 1
   VisFrgnImgWidth -> 2
   VisFrgnImgHeight -> 3
   VisPageWidth -> 0
   VisPageHeight -> 1
   VisPageShdwOffsetX -> 2
   VisPageShdwOffsetY -> 3
   VisPageScale -> 4
   VisPageDrawingScale -> 5
   VisPageDrawSizeType -> 6
   VisPageDrawScaleType -> 7
   VisTxtBlkLeftMargin -> 0
   VisTxtBlkRightMargin -> 1
   VisTxtBlkTopMargin -> 2
   VisTxtBlkBottomMargin -> 3
   VisTxtBlkVerticalAlign -> 4
   VisTxtBlkBkgnd -> 5
   VisAlignLeft -> 0
   VisAlignCenter -> 1
   VisAlignRight -> 2
   VisAlignTop -> 3
   VisAlignMiddle -> 4
   VisAlignBottom -> 5
   VisLockWidth -> 0
   VisLockHeight -> 1
   VisLockMoveX -> 2
   VisLockMoveY -> 3
   VisLockAspect -> 4
   VisLockDelete -> 5
   VisLockBegin -> 6
   VisLockEnd -> 7
   VisLockRotate -> 8
   VisLockCrop -> 9
   VisLockVtxEdit -> 10
   VisLockTextEdit -> 11
   VisLockFormat -> 12
   VisLockGroup -> 13
   VisLockCalcWH -> 14
   VisLockSelect -> 15
   VisObjHelp -> 0
   VisCopyRight -> 1
   VisNoObjHandles -> 0
   VisNonPrinting -> 1
   VisNoCtlHandles -> 2
   VisNoAlignBox -> 3
   VisUpdateAlignBox -> 4
   VisHideText -> 5
   VisDynFeedback -> 8
   VisGlueType -> 9
   VisWalkPref -> 10
   VisBegTrigger -> 11
   VisEndTrigger -> 12
   VisLOFlags -> 13
   VisLOInteraction -> 14
   VisLOBehavior -> 15
   VisXRulerDensity -> 0
   VisYRulerDensity -> 1
   VisXRulerOrigin -> 4
   VisYRulerOrigin -> 5
   VisXGridDensity -> 6
   VisYGridDensity -> 7
   VisXGridSpacing -> 8
   VisYGridSpacing -> 9
   VisXGridOrigin -> 10
   VisYGridOrigin -> 11
   VisHLinkDescription -> 0
   VisHLinkAddress -> 1
   VisHLinkSubAddress -> 2
   VisHLinkExtraInfo -> 3
   VisHLinkFrame -> 4
   VisHLinkNewWin -> 5
   VisCompNoFill -> 0
   VisCompNoShow -> 2
   VisX -> 0
   VisY -> 1
   VisBow -> 2
   VisControlX -> 2
   VisControlY -> 3
   VisEccentricityAngle -> 4
   VisAspectRatio -> 5
   VisSplineKnot -> 2
   VisSplineKnot2 -> 3
   VisSplineKnot3 -> 4
   VisSplineDegree -> 5
   VisFieldCell -> 0
   VisCharacterFont -> 0
   VisCharacterColor -> 1
   VisCharacterStyle -> 2
   VisCharacterCase -> 3
   VisCharacterPos -> 4
   VisCharacterSize -> 7
   VisIndentFirst -> 0
   VisIndentLeft -> 1
   VisIndentRight -> 2
   VisSpaceLine -> 3
   VisSpaceBefore -> 4
   VisSpaceAfter -> 5
   VisHorzAlign -> 6
   VisTabStopCount -> 0
   VisTabPos -> 1
   VisTabAlign -> 2
   VisScratchX -> 0
   VisScratchY -> 1
   VisScratchA -> 2
   VisScratchB -> 3
   VisScratchC -> 4
   VisScratchD -> 5
   VisCnnctA -> 2
   VisCnnctB -> 3
   VisCnnctC -> 4
   VisCnnctD -> 5
   VisCtlX -> 0
   VisCtlY -> 1
   VisCtlXDyn -> 2
   VisCtlYDyn -> 3
   VisCtlXCon -> 4
   VisCtlYCon -> 5
   VisCtlGlue -> 6
   VisCtlType -> 7
   VisCtlTip -> 8
   VisActionMenu -> 0
   VisActionPrompt -> 1
   VisActionHelp -> 2
   VisActionAction -> 3
   VisActionChecked -> 4
   VisActionDisabled -> 5
   VisLayerName -> 0
   VisLayerColor -> 2
   VisLayerStatus -> 3
   VisLayerVisible -> 4
   VisLayerPrint -> 5
   VisLayerActive -> 6
   VisLayerLock -> 7
   VisLayerSnap -> 8
   VisLayerGlue -> 9
   VisUserValue -> 0
   VisUserPrompt -> 1
   VisCustPropsValue -> 0
   VisCustPropsPrompt -> 1
   VisCustPropsLabel -> 2
   VisCustPropsFormat -> 3
   VisCustPropsSortKey -> 4
   VisCustPropsType -> 5
   VisCustPropsInvis -> 6
   VisCustPropsAsk -> 7
  
  toEnum v =
   case v of
   0 -> VisXFormPinX
   1 -> VisXFormPinY
   2 -> VisXFormWidth
   3 -> VisXFormHeight
   4 -> VisXFormLocPinX
   5 -> VisXFormLocPinY
   6 -> VisXFormAngle
   7 -> VisXFormFlipX
   8 -> VisXFormFlipY
   9 -> VisXFormResizeMode
   0 -> VisLineWeight
   1 -> VisLineColor
   2 -> VisLinePattern
   3 -> VisLineRounding
   4 -> VisLineArrowSize
   5 -> VisLineBeginArrow
   6 -> VisLineEndArrow
   7 -> VisLineEndCap
   0 -> VisFillForegnd
   1 -> VisFillBkgnd
   2 -> VisFillPattern
   3 -> VisFillShdwForegnd
   4 -> VisFillShdwBkgnd
   5 -> VisFillShdwPattern
   0 -> Vis1DBeginX
   1 -> Vis1DBeginY
   2 -> Vis1DEndX
   3 -> Vis1DEndY
   0 -> VisEvtCellTheData
   1 -> VisEvtCellTheText
   2 -> VisEvtCellDblClick
   3 -> VisEvtCellXFMod
   4 -> VisEvtCellDrop
   0 -> VisLayerMember
   2 -> VisGuideFlags
   0 -> VisStyleIncludesLine
   1 -> VisStyleIncludesFill
   2 -> VisStyleIncludesText
   0 -> VisFrgnImgOffsetX
   1 -> VisFrgnImgOffsetY
   2 -> VisFrgnImgWidth
   3 -> VisFrgnImgHeight
   0 -> VisPageWidth
   1 -> VisPageHeight
   2 -> VisPageShdwOffsetX
   3 -> VisPageShdwOffsetY
   4 -> VisPageScale
   5 -> VisPageDrawingScale
   6 -> VisPageDrawSizeType
   7 -> VisPageDrawScaleType
   0 -> VisTxtBlkLeftMargin
   1 -> VisTxtBlkRightMargin
   2 -> VisTxtBlkTopMargin
   3 -> VisTxtBlkBottomMargin
   4 -> VisTxtBlkVerticalAlign
   5 -> VisTxtBlkBkgnd
   0 -> VisAlignLeft
   1 -> VisAlignCenter
   2 -> VisAlignRight
   3 -> VisAlignTop
   4 -> VisAlignMiddle
   5 -> VisAlignBottom
   0 -> VisLockWidth
   1 -> VisLockHeight
   2 -> VisLockMoveX
   3 -> VisLockMoveY
   4 -> VisLockAspect
   5 -> VisLockDelete
   6 -> VisLockBegin
   7 -> VisLockEnd
   8 -> VisLockRotate
   9 -> VisLockCrop
   10 -> VisLockVtxEdit
   11 -> VisLockTextEdit
   12 -> VisLockFormat
   13 -> VisLockGroup
   14 -> VisLockCalcWH
   15 -> VisLockSelect
   0 -> VisObjHelp
   1 -> VisCopyRight
   0 -> VisNoObjHandles
   1 -> VisNonPrinting
   2 -> VisNoCtlHandles
   3 -> VisNoAlignBox
   4 -> VisUpdateAlignBox
   5 -> VisHideText
   8 -> VisDynFeedback
   9 -> VisGlueType
   10 -> VisWalkPref
   11 -> VisBegTrigger
   12 -> VisEndTrigger
   13 -> VisLOFlags
   14 -> VisLOInteraction
   15 -> VisLOBehavior
   0 -> VisXRulerDensity
   1 -> VisYRulerDensity
   4 -> VisXRulerOrigin
   5 -> VisYRulerOrigin
   6 -> VisXGridDensity
   7 -> VisYGridDensity
   8 -> VisXGridSpacing
   9 -> VisYGridSpacing
   10 -> VisXGridOrigin
   11 -> VisYGridOrigin
   0 -> VisHLinkDescription
   1 -> VisHLinkAddress
   2 -> VisHLinkSubAddress
   3 -> VisHLinkExtraInfo
   4 -> VisHLinkFrame
   5 -> VisHLinkNewWin
   0 -> VisCompNoFill
   2 -> VisCompNoShow
   0 -> VisX
   1 -> VisY
   2 -> VisBow
   2 -> VisControlX
   3 -> VisControlY
   4 -> VisEccentricityAngle
   5 -> VisAspectRatio
   2 -> VisSplineKnot
   3 -> VisSplineKnot2
   4 -> VisSplineKnot3
   5 -> VisSplineDegree
   0 -> VisFieldCell
   0 -> VisCharacterFont
   1 -> VisCharacterColor
   2 -> VisCharacterStyle
   3 -> VisCharacterCase
   4 -> VisCharacterPos
   7 -> VisCharacterSize
   0 -> VisIndentFirst
   1 -> VisIndentLeft
   2 -> VisIndentRight
   3 -> VisSpaceLine
   4 -> VisSpaceBefore
   5 -> VisSpaceAfter
   6 -> VisHorzAlign
   0 -> VisTabStopCount
   1 -> VisTabPos
   2 -> VisTabAlign
   0 -> VisScratchX
   1 -> VisScratchY
   2 -> VisScratchA
   3 -> VisScratchB
   4 -> VisScratchC
   5 -> VisScratchD
   2 -> VisCnnctA
   3 -> VisCnnctB
   4 -> VisCnnctC
   5 -> VisCnnctD
   0 -> VisCtlX
   1 -> VisCtlY
   2 -> VisCtlXDyn
   3 -> VisCtlYDyn
   4 -> VisCtlXCon
   5 -> VisCtlYCon
   6 -> VisCtlGlue
   7 -> VisCtlType
   8 -> VisCtlTip
   0 -> VisActionMenu
   1 -> VisActionPrompt
   2 -> VisActionHelp
   3 -> VisActionAction
   4 -> VisActionChecked
   5 -> VisActionDisabled
   0 -> VisLayerName
   2 -> VisLayerColor
   3 -> VisLayerStatus
   4 -> VisLayerVisible
   5 -> VisLayerPrint
   6 -> VisLayerActive
   7 -> VisLayerLock
   8 -> VisLayerSnap
   9 -> VisLayerGlue
   0 -> VisUserValue
   1 -> VisUserPrompt
   0 -> VisCustPropsValue
   1 -> VisCustPropsPrompt
   2 -> VisCustPropsLabel
   3 -> VisCustPropsFormat
   4 -> VisCustPropsSortKey
   5 -> VisCustPropsType
   6 -> VisCustPropsInvis
   7 -> VisCustPropsAsk
   _ -> P.error "unmarshallVisCellIndices: illegal enum value "
  
data VisCellError
 = VisErrorSuccess
 | VisErrorDivideByZero
 | VisErrorValue
 | VisErrorReference
 | VisErrorName
 | VisErrorNumber
 | VisErrorNotAvailable
 deriving ()
instance P.Enum VisCellError where
  fromEnum v =
   case v of
   VisErrorSuccess -> 0
   VisErrorDivideByZero -> 39
   VisErrorValue -> 47
   VisErrorReference -> 55
   VisErrorName -> 61
   VisErrorNumber -> 68
   VisErrorNotAvailable -> 74
  
  toEnum v =
   case v of
   0 -> VisErrorSuccess
   39 -> VisErrorDivideByZero
   47 -> VisErrorValue
   55 -> VisErrorReference
   61 -> VisErrorName
   68 -> VisErrorNumber
   74 -> VisErrorNotAvailable
   _ -> P.error "unmarshallVisCellError: illegal enum value "
  
data VisBoundingBoxArgs
 = VisBBoxUprightWH
 | VisBBoxUprightText
 | VisBBoxExtents
 | VisBBoxIncludeGuides
 | VisBBoxDrawingCoords
 | VisBBoxNoNonPrint
 deriving ()
instance P.Enum VisBoundingBoxArgs where
  fromEnum v =
   case v of
   VisBBoxUprightWH -> 1
   VisBBoxUprightText -> 2
   VisBBoxExtents -> 4
   VisBBoxIncludeGuides -> 4096
   VisBBoxDrawingCoords -> 8192
   VisBBoxNoNonPrint -> 16384
  
  toEnum v =
   case v of
   1 -> VisBBoxUprightWH
   2 -> VisBBoxUprightText
   4 -> VisBBoxExtents
   4096 -> VisBBoxIncludeGuides
   8192 -> VisBBoxDrawingCoords
   16384 -> VisBBoxNoNonPrint
   _ -> P.error "unmarshallVisBoundingBoxArgs: illegal enum value "
  
-- --------------------------------------------------
-- 
-- interface IVAmbients
-- 
-- --------------------------------------------------
data IVAmbients_ a = IVAmbients__
   
type IVAmbients a = A.IDispatch (IVAmbients_ a)
iidIVAmbients :: Com.IID (IVAmbients ())
iidIVAmbients = Com.mkIID "{000D0D10-0000-0000-C000-000000000046}"

getBackColorVA :: IVAmbients a
 -> P.IO (P.Int)
getBackColorVA =
  A.propertyGet "BackColor"
   []
   A.outInt

getDisplayNameVA :: IVAmbients a
 -> P.IO (P.String)
getDisplayNameVA =
  A.propertyGet "DisplayName"
   []
   A.outString

getFontVA :: IVAmbients a
 -> P.IO (A.IDispatch ())
getFontVA =
  A.propertyGet "Font"
   []
   A.outIDispatch

getForeColorVA :: IVAmbients a
 -> P.IO (P.Int)
getForeColorVA =
  A.propertyGet "ForeColor"
   []
   A.outInt

getLocaleIDVA :: IVAmbients a
 -> P.IO (P.Int)
getLocaleIDVA =
  A.propertyGet "LocaleID"
   []
   A.outInt

getMessageReflectVA :: IVAmbients a
 -> P.IO (P.Bool)
getMessageReflectVA =
  A.propertyGet "MessageReflect"
   []
   A.outBool

getScaleUnitsVA :: IVAmbients a
 -> P.IO (P.String)
getScaleUnitsVA =
  A.propertyGet "ScaleUnits"
   []
   A.outString

getTextAlignVA :: IVAmbients a
 -> P.IO (P.Int)
getTextAlignVA =
  A.propertyGet "TextAlign"
   []
   A.outInt

getUserModeVA :: IVAmbients a
 -> P.IO (P.Bool)
getUserModeVA =
  A.propertyGet "UserMode"
   []
   A.outBool

getUIDeadVA :: IVAmbients a
 -> P.IO (P.Bool)
getUIDeadVA =
  A.propertyGet "UIDead"
   []
   A.outBool

getShowGrabHandlesVA :: IVAmbients a
 -> P.IO (P.Bool)
getShowGrabHandlesVA =
  A.propertyGet "ShowGrabHandles"
   []
   A.outBool

getShowHatchingVA :: IVAmbients a
 -> P.IO (P.Bool)
getShowHatchingVA =
  A.propertyGet "ShowHatching"
   []
   A.outBool

getDisplayAsDefaultVA :: IVAmbients a
 -> P.IO (P.Bool)
getDisplayAsDefaultVA =
  A.propertyGet "DisplayAsDefault"
   []
   A.outBool

getSupportsMnemonicsVA :: IVAmbients a
 -> P.IO (P.Bool)
getSupportsMnemonicsVA =
  A.propertyGet "SupportsMnemonics"
   []
   A.outBool

getAutoClipVA :: IVAmbients a
 -> P.IO (P.Bool)
getAutoClipVA =
  A.propertyGet "AutoClip"
   []
   A.outBool

getAppearanceVA :: IVAmbients a
 -> P.IO (P.Int)
getAppearanceVA =
  A.propertyGet "Appearance"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVAccelItem
-- 
-- --------------------------------------------------
data IVAccelItem_ a = IVAccelItem__
   
type IVAccelItem a = A.IDispatch (IVAccelItem_ a)
iidIVAccelItem :: Com.IID (IVAccelItem ())
iidIVAccelItem = Com.mkIID "{000D0292-0000-0000-C000-000000000046}"

delete :: IVAccelItem a
 -> P.IO ()
delete =
  A.method0 "Delete"
   []

getDefaultVAI :: IVAccelItem a
 -> P.IO (P.Int)
getDefaultVAI =
  A.propertyGet "Default"
   []
   A.outInt

setCmdNumVAI :: P.Int
 -> IVAccelItem a
 -> P.IO ()
setCmdNumVAI pwCmd =
  A.propertySet "CmdNum"
   [A.inInt pwCmd]

getCmdNumVAI :: IVAccelItem a
 -> P.IO (P.Int)
getCmdNumVAI =
  A.propertyGet "CmdNum"
   []
   A.outInt

setKeyVAI :: P.Int
 -> IVAccelItem a
 -> P.IO ()
setKeyVAI pKey =
  A.propertySet "Key"
   [A.inInt pKey]

getKeyVAI :: IVAccelItem a
 -> P.IO (P.Int)
getKeyVAI =
  A.propertyGet "Key"
   []
   A.outInt

setAltVAI :: P.Int
 -> IVAccelItem a
 -> P.IO ()
setAltVAI pAlt =
  A.propertySet "Alt"
   [A.inInt pAlt]

getAltVAI :: IVAccelItem a
 -> P.IO (P.Int)
getAltVAI =
  A.propertyGet "Alt"
   []
   A.outInt

setShiftVAI :: P.Int
 -> IVAccelItem a
 -> P.IO ()
setShiftVAI pShift =
  A.propertySet "Shift"
   [A.inInt pShift]

getShiftVAI :: IVAccelItem a
 -> P.IO (P.Int)
getShiftVAI =
  A.propertyGet "Shift"
   []
   A.outInt

setControlVAI :: P.Int
 -> IVAccelItem a
 -> P.IO ()
setControlVAI pControl =
  A.propertySet "Control"
   [A.inInt pControl]

getControlVAI :: IVAccelItem a
 -> P.IO (P.Int)
getControlVAI =
  A.propertyGet "Control"
   []
   A.outInt

getParentVAI :: IVAccelItem a
 -> P.IO (IVAccelItems ())
getParentVAI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVAccelItems
-- 
-- --------------------------------------------------
data IVAccelItems_ a = IVAccelItems__
   
type IVAccelItems a = A.IDispatch (IVAccelItems_ a)
iidIVAccelItems :: Com.IID (IVAccelItems ())
iidIVAccelItems =
  Com.mkIID "{000D0295-0000-0000-C000-000000000046}"

getNewEnumVAI :: IVAccelItems a
 -> P.IO (Com.IUnknown ())
getNewEnumVAI =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVAI :: P.Int
 -> IVAccelItems a
 -> P.IO (IVAccelItem ())
getItemVAI lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

add :: IVAccelItems a
 -> P.IO (IVAccelItem ())
add =
  A.function1 "Add"
   []
   A.outIDispatch

getCountVAI :: IVAccelItems a
 -> P.IO (P.Int)
getCountVAI =
  A.propertyGet "Count"
   []
   A.outInt

parentVAI :: IVAccelItems a
 -> P.IO (IVAccelTable ())
parentVAI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVAccelTable
-- 
-- --------------------------------------------------
data IVAccelTable_ a = IVAccelTable__
   
type IVAccelTable a = A.IDispatch (IVAccelTable_ a)
iidIVAccelTable :: Com.IID (IVAccelTable ())
iidIVAccelTable =
  Com.mkIID "{000D02A2-0000-0000-C000-000000000046}"

deleteVAT :: IVAccelTable a
 -> P.IO ()
deleteVAT =
  A.method0 "Delete"
   []

getDefaultVAT :: IVAccelTable a
 -> P.IO (P.String)
getDefaultVAT =
  A.propertyGet "Default"
   []
   A.outString

setTableNameVAT :: P.String
 -> IVAccelTable a
 -> P.IO ()
setTableNameVAT pTableName =
  A.propertySet "TableName"
   [A.inString pTableName]

getTableNameVAT :: IVAccelTable a
 -> P.IO (P.String)
getTableNameVAT =
  A.propertyGet "TableName"
   []
   A.outString

getSetIDVAT :: IVAccelTable a
 -> P.IO (P.Int)
getSetIDVAT =
  A.propertyGet "SetID"
   []
   A.outInt

getAccelItemsVAT :: IVAccelTable a
 -> P.IO (IVAccelItems ())
getAccelItemsVAT =
  A.propertyGet "AccelItems"
   []
   A.outIDispatch

getParentVAT :: IVAccelTable a
 -> P.IO (IVAccelTables ())
getParentVAT =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVAccelTables
-- 
-- --------------------------------------------------
data IVAccelTables_ a = IVAccelTables__
   
type IVAccelTables a = A.IDispatch (IVAccelTables_ a)
iidIVAccelTables :: Com.IID (IVAccelTables ())
iidIVAccelTables =
  Com.mkIID "{000D02A5-0000-0000-C000-000000000046}"

getNewEnumVAT :: IVAccelTables a
 -> P.IO (Com.IUnknown ())
getNewEnumVAT =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVAT :: P.Int
 -> IVAccelTables a
 -> P.IO (IVAccelTable ())
getItemVAT lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

getItemAtIDVAT :: P.Int
 -> IVAccelTables a
 -> P.IO (IVAccelTable ())
getItemAtIDVAT lID =
  A.propertyGet "ItemAtID"
   [A.inInt lID]
   A.outIDispatch

addVAT :: IVAccelTables a
 -> P.IO (IVAccelTable ())
addVAT =
  A.function1 "Add"
   []
   A.outIDispatch

addAtID :: P.Int
 -> IVAccelTables a
 -> P.IO (IVAccelTable ())
addAtID lID =
  A.function1 "AddAtID"
   [A.inInt lID]
   A.outIDispatch

getCountVAT :: IVAccelTables a
 -> P.IO (P.Int)
getCountVAT =
  A.propertyGet "Count"
   []
   A.outInt

parentVAT :: IVAccelTables a
 -> P.IO (IVUIObject ())
parentVAT =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVUIObject
-- 
-- --------------------------------------------------
data IVUIObject_ a = IVUIObject__
   
type IVUIObject a = A.IDispatch (IVUIObject_ a)
iidIVUIObject :: Com.IID (IVUIObject ())
iidIVUIObject = Com.mkIID "{000D0202-0000-0000-C000-000000000046}"

deleteVUIO :: IVUIObject a
 -> P.IO ()
deleteVUIO =
  A.method0 "Delete"
   []

getDefaultVUIO :: IVUIObject a
 -> P.IO (P.String)
getDefaultVUIO =
  A.propertyGet "Default"
   []
   A.outString

setNameVUIO :: P.String
 -> IVUIObject a
 -> P.IO ()
setNameVUIO pName =
  A.propertySet "Name"
   [A.inString pName]

getNameVUIO :: IVUIObject a
 -> P.IO (P.String)
getNameVUIO =
  A.propertyGet "Name"
   []
   A.outString

setFlavorVUIO :: P.Int
 -> IVUIObject a
 -> P.IO ()
setFlavorVUIO pFlavor =
  A.propertySet "Flavor"
   [A.inInt pFlavor]

getFlavorVUIO :: IVUIObject a
 -> P.IO (P.Int)
getFlavorVUIO =
  A.propertyGet "Flavor"
   []
   A.outInt

getMenuSetsVUIO :: IVUIObject a
 -> P.IO (IVMenuSets ())
getMenuSetsVUIO =
  A.propertyGet "MenuSets"
   []
   A.outIDispatch

getToolbarSetsVUIO :: IVUIObject a
 -> P.IO (IVToolbarSets ())
getToolbarSetsVUIO =
  A.propertyGet "ToolbarSets"
   []
   A.outIDispatch

getStatusBarsVUIO :: IVUIObject a
 -> P.IO (IVStatusBars ())
getStatusBarsVUIO =
  A.propertyGet "StatusBars"
   []
   A.outIDispatch

getAccelTablesVUIO :: IVUIObject a
 -> P.IO (IVAccelTables ())
getAccelTablesVUIO =
  A.propertyGet "AccelTables"
   []
   A.outIDispatch

saveToFile :: P.String
 -> IVUIObject a
 -> P.IO ()
saveToFile fileName =
  A.method0 "SaveToFile"
   [A.inString fileName]

loadFromFile :: P.String
 -> IVUIObject a
 -> P.IO ()
loadFromFile fileName =
  A.method0 "LoadFromFile"
   [A.inString fileName]

updateUI :: IVUIObject a
 -> P.IO ()
updateUI =
  A.method0 "UpdateUI"
   []

-- --------------------------------------------------
-- 
-- interface IVMenuSets
-- 
-- --------------------------------------------------
data IVMenuSets_ a = IVMenuSets__
   
type IVMenuSets a = A.IDispatch (IVMenuSets_ a)
iidIVMenuSets :: Com.IID (IVMenuSets ())
iidIVMenuSets = Com.mkIID "{000D0236-0000-0000-C000-000000000046}"

getNewEnumVMS :: IVMenuSets a
 -> P.IO (Com.IUnknown ())
getNewEnumVMS =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVMS :: P.Int
 -> IVMenuSets a
 -> P.IO (IVMenuSet ())
getItemVMS lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

getItemAtIDVMS :: P.Int
 -> IVMenuSets a
 -> P.IO (IVMenuSet ())
getItemAtIDVMS lID =
  A.propertyGet "ItemAtID"
   [A.inInt lID]
   A.outIDispatch

addVMS :: IVMenuSets a
 -> P.IO (IVMenuSet ())
addVMS =
  A.function1 "Add"
   []
   A.outIDispatch

addAtIDVMS :: P.Int
 -> IVMenuSets a
 -> P.IO (IVMenuSet ())
addAtIDVMS lID =
  A.function1 "AddAtID"
   [A.inInt lID]
   A.outIDispatch

getCountVMS :: IVMenuSets a
 -> P.IO (P.Int)
getCountVMS =
  A.propertyGet "Count"
   []
   A.outInt

getParentVMS :: IVMenuSets a
 -> P.IO (IVUIObject ())
getParentVMS =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenuSet
-- 
-- --------------------------------------------------
data IVMenuSet_ a = IVMenuSet__
   
type IVMenuSet a = A.IDispatch (IVMenuSet_ a)
iidIVMenuSet :: Com.IID (IVMenuSet ())
iidIVMenuSet = Com.mkIID "{000D0232-0000-0000-C000-000000000046}"

deleteVMS :: IVMenuSet a
 -> P.IO ()
deleteVMS =
  A.method0 "Delete"
   []

getDefaultVMS :: IVMenuSet a
 -> P.IO (P.String)
getDefaultVMS =
  A.propertyGet "Default"
   []
   A.outString

setCaptionVMS :: P.String
 -> IVMenuSet a
 -> P.IO ()
setCaptionVMS pCaption =
  A.propertySet "Caption"
   [A.inString pCaption]

getCaptionVMS :: IVMenuSet a
 -> P.IO (P.String)
getCaptionVMS =
  A.propertyGet "Caption"
   []
   A.outString

getSetIDVMS :: IVMenuSet a
 -> P.IO (P.Int)
getSetIDVMS =
  A.propertyGet "SetID"
   []
   A.outInt

getMenusVMS :: IVMenuSet a
 -> P.IO (IVMenus ())
getMenusVMS =
  A.propertyGet "Menus"
   []
   A.outIDispatch

parentVMS :: IVMenuSet a
 -> P.IO (IVMenuSets ())
parentVMS =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenus
-- 
-- --------------------------------------------------
data IVMenus_ a = IVMenus__
   
type IVMenus a = A.IDispatch (IVMenus_ a)
iidIVMenus :: Com.IID (IVMenus ())
iidIVMenus = Com.mkIID "{000D0225-0000-0000-C000-000000000046}"

getNewEnumVM :: IVMenus a
 -> P.IO (Com.IUnknown ())
getNewEnumVM =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVM :: P.Int
 -> IVMenus a
 -> P.IO (IVMenu ())
getItemVM lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

addVM :: IVMenus a
 -> P.IO (IVMenu ())
addVM =
  A.function1 "Add"
   []
   A.outIDispatch

addAt :: P.Int
 -> IVMenus a
 -> P.IO (IVMenu ())
addAt lIndex =
  A.function1 "AddAt"
   [A.inInt lIndex]
   A.outIDispatch

getCountVM :: IVMenus a
 -> P.IO (P.Int)
getCountVM =
  A.propertyGet "Count"
   []
   A.outInt

getParentVM :: IVMenus a
 -> P.IO (IVMenuSet ())
getParentVM =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenu
-- 
-- --------------------------------------------------
data IVMenu_ a = IVMenu__
   
type IVMenu a = A.IDispatch (IVMenu_ a)
iidIVMenu :: Com.IID (IVMenu ())
iidIVMenu = Com.mkIID "{000D0222-0000-0000-C000-000000000046}"

deleteVM :: IVMenu a
 -> P.IO ()
deleteVM =
  A.method0 "Delete"
   []

getDefaultVM :: IVMenu a
 -> P.IO (P.String)
getDefaultVM =
  A.propertyGet "Default"
   []
   A.outString

setCaptionVM :: P.String
 -> IVMenu a
 -> P.IO ()
setCaptionVM pCaption =
  A.propertySet "Caption"
   [A.inString pCaption]

getCaptionVM :: IVMenu a
 -> P.IO (P.String)
getCaptionVM =
  A.propertyGet "Caption"
   []
   A.outString

getIndexVM :: IVMenu a
 -> P.IO (P.Int)
getIndexVM =
  A.propertyGet "Index"
   []
   A.outInt

setMDIWindowMenuVM :: P.Int
 -> IVMenu a
 -> P.IO ()
setMDIWindowMenuVM pMDIWindowMenu =
  A.propertySet "MDIWindowMenu"
   [A.inInt pMDIWindowMenu]

getMDIWindowMenuVM :: IVMenu a
 -> P.IO (P.Int)
getMDIWindowMenuVM =
  A.propertyGet "MDIWindowMenu"
   []
   A.outInt

getMenuItemsVM :: IVMenu a
 -> P.IO (IVMenuItems ())
getMenuItemsVM =
  A.propertyGet "MenuItems"
   []
   A.outIDispatch

parentVM :: IVMenu a
 -> P.IO (IVMenus ())
parentVM =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenuItems
-- 
-- --------------------------------------------------
data IVMenuItems_ a = IVMenuItems__
   
type IVMenuItems a = A.IDispatch (IVMenuItems_ a)
iidIVMenuItems :: Com.IID (IVMenuItems ())
iidIVMenuItems = Com.mkIID "{000D0216-0000-0000-C000-000000000046}"

getNewEnumVMI :: IVMenuItems a
 -> P.IO (Com.IUnknown ())
getNewEnumVMI =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVMI :: P.Int
 -> IVMenuItems a
 -> P.IO (IVMenuItem ())
getItemVMI lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

addVMI :: IVMenuItems a
 -> P.IO (IVMenuItem ())
addVMI =
  A.function1 "Add"
   []
   A.outIDispatch

addAtVMI :: P.Int
 -> IVMenuItems a
 -> P.IO (IVMenuItem ())
addAtVMI lIndex =
  A.function1 "AddAt"
   [A.inInt lIndex]
   A.outIDispatch

getCountVMI :: IVMenuItems a
 -> P.IO (P.Int)
getCountVMI =
  A.propertyGet "Count"
   []
   A.outInt

getParentVMI :: IVMenuItems a
 -> P.IO (IVMenu ())
getParentVMI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenuItem
-- 
-- --------------------------------------------------
data IVMenuItem_ a = IVMenuItem__
   
type IVMenuItem a = A.IDispatch (IVMenuItem_ a)
iidIVMenuItem :: Com.IID (IVMenuItem ())
iidIVMenuItem = Com.mkIID "{000D0212-0000-0000-C000-000000000046}"

deleteVMI :: IVMenuItem a
 -> P.IO ()
deleteVMI =
  A.method0 "Delete"
   []

getDefaultVMI :: IVMenuItem a
 -> P.IO (P.String)
getDefaultVMI =
  A.propertyGet "Default"
   []
   A.outString

getIndexVMI :: IVMenuItem a
 -> P.IO (P.Int)
getIndexVMI =
  A.propertyGet "Index"
   []
   A.outInt

getMenuItemsVMI :: IVMenuItem a
 -> P.IO (IVMenuItems ())
getMenuItemsVMI =
  A.propertyGet "MenuItems"
   []
   A.outIDispatch

parentVMI :: IVMenuItem a
 -> P.IO (IVMenuItems ())
parentVMI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

setCmdNumVMI :: P.Int
 -> IVMenuItem a
 -> P.IO ()
setCmdNumVMI pwCmd =
  A.propertySet "CmdNum"
   [A.inInt pwCmd]

getCmdNumVMI :: IVMenuItem a
 -> P.IO (P.Int)
getCmdNumVMI =
  A.propertyGet "CmdNum"
   []
   A.outInt

setHelpContextIDVMI :: P.Int
 -> IVMenuItem a
 -> P.IO ()
setHelpContextIDVMI pHelpContextID =
  A.propertySet "HelpContextID"
   [A.inInt pHelpContextID]

getHelpContextIDVMI :: IVMenuItem a
 -> P.IO (P.Int)
getHelpContextIDVMI =
  A.propertyGet "HelpContextID"
   []
   A.outInt

getIsSeparatorVMI :: IVMenuItem a
 -> P.IO (P.Int)
getIsSeparatorVMI =
  A.propertyGet "IsSeparator"
   []
   A.outInt

getIsHierarchicalVMI :: IVMenuItem a
 -> P.IO (P.Int)
getIsHierarchicalVMI =
  A.propertyGet "IsHierarchical"
   []
   A.outInt

setCaptionVMI :: P.String
 -> IVMenuItem a
 -> P.IO ()
setCaptionVMI pCaption =
  A.propertySet "Caption"
   [A.inString pCaption]

getCaptionVMI :: IVMenuItem a
 -> P.IO (P.String)
getCaptionVMI =
  A.propertyGet "Caption"
   []
   A.outString

setActionTextVMI :: P.String
 -> IVMenuItem a
 -> P.IO ()
setActionTextVMI pActionText =
  A.propertySet "ActionText"
   [A.inString pActionText]

getActionTextVMI :: IVMenuItem a
 -> P.IO (P.String)
getActionTextVMI =
  A.propertyGet "ActionText"
   []
   A.outString

setMiniHelpVMI :: P.String
 -> IVMenuItem a
 -> P.IO ()
setMiniHelpVMI pMiniHelp =
  A.propertySet "MiniHelp"
   [A.inString pMiniHelp]

getMiniHelpVMI :: IVMenuItem a
 -> P.IO (P.String)
getMiniHelpVMI =
  A.propertyGet "MiniHelp"
   []
   A.outString

setAddOnNameVMI :: P.String
 -> IVMenuItem a
 -> P.IO ()
setAddOnNameVMI pAddOnName =
  A.propertySet "AddOnName"
   [A.inString pAddOnName]

getAddOnNameVMI :: IVMenuItem a
 -> P.IO (P.String)
getAddOnNameVMI =
  A.propertyGet "AddOnName"
   []
   A.outString

setAddOnArgsVMI :: P.String
 -> IVMenuItem a
 -> P.IO ()
setAddOnArgsVMI pAddOnArgs =
  A.propertySet "AddOnArgs"
   [A.inString pAddOnArgs]

getAddOnArgsVMI :: IVMenuItem a
 -> P.IO (P.String)
getAddOnArgsVMI =
  A.propertyGet "AddOnArgs"
   []
   A.outString

setHelpFileVMI :: P.String
 -> IVMenuItem a
 -> P.IO ()
setHelpFileVMI pHelpFile =
  A.propertySet "HelpFile"
   [A.inString pHelpFile]

getHelpFileVMI :: IVMenuItem a
 -> P.IO (P.String)
getHelpFileVMI =
  A.propertyGet "HelpFile"
   []
   A.outString

-- --------------------------------------------------
-- 
-- interface IVToolbarSets
-- 
-- --------------------------------------------------
data IVToolbarSets_ a = IVToolbarSets__
   
type IVToolbarSets a = A.IDispatch (IVToolbarSets_ a)
iidIVToolbarSets :: Com.IID (IVToolbarSets ())
iidIVToolbarSets =
  Com.mkIID "{000D0266-0000-0000-C000-000000000046}"

getNewEnumVTS :: IVToolbarSets a
 -> P.IO (Com.IUnknown ())
getNewEnumVTS =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVTS :: P.Int
 -> IVToolbarSets a
 -> P.IO (IVToolbarSet ())
getItemVTS lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

getItemAtIDVTS :: P.Int
 -> IVToolbarSets a
 -> P.IO (IVToolbarSet ())
getItemAtIDVTS lID =
  A.propertyGet "ItemAtID"
   [A.inInt lID]
   A.outIDispatch

addVTS :: IVToolbarSets a
 -> P.IO (IVToolbarSet ())
addVTS =
  A.function1 "Add"
   []
   A.outIDispatch

addAtIDVTS :: P.Int
 -> IVToolbarSets a
 -> P.IO (IVToolbarSet ())
addAtIDVTS lID =
  A.function1 "AddAtID"
   [A.inInt lID]
   A.outIDispatch

getCountVTS :: IVToolbarSets a
 -> P.IO (P.Int)
getCountVTS =
  A.propertyGet "Count"
   []
   A.outInt

getParentVTS :: IVToolbarSets a
 -> P.IO (IVUIObject ())
getParentVTS =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbarSet
-- 
-- --------------------------------------------------
data IVToolbarSet_ a = IVToolbarSet__
   
type IVToolbarSet a = A.IDispatch (IVToolbarSet_ a)
iidIVToolbarSet :: Com.IID (IVToolbarSet ())
iidIVToolbarSet =
  Com.mkIID "{000D0262-0000-0000-C000-000000000046}"

deleteVTS :: IVToolbarSet a
 -> P.IO ()
deleteVTS =
  A.method0 "Delete"
   []

getDefaultVTS :: IVToolbarSet a
 -> P.IO (P.String)
getDefaultVTS =
  A.propertyGet "Default"
   []
   A.outString

setCaptionVTS :: P.String
 -> IVToolbarSet a
 -> P.IO ()
setCaptionVTS pCaption =
  A.propertySet "Caption"
   [A.inString pCaption]

getCaptionVTS :: IVToolbarSet a
 -> P.IO (P.String)
getCaptionVTS =
  A.propertyGet "Caption"
   []
   A.outString

getSetIDVTS :: IVToolbarSet a
 -> P.IO (P.Int)
getSetIDVTS =
  A.propertyGet "SetID"
   []
   A.outInt

getToolbarsVTS :: IVToolbarSet a
 -> P.IO (IVToolbars ())
getToolbarsVTS =
  A.propertyGet "Toolbars"
   []
   A.outIDispatch

parentVTS :: IVToolbarSet a
 -> P.IO (IVToolbarSets ())
parentVTS =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbars
-- 
-- --------------------------------------------------
data IVToolbars_ a = IVToolbars__
   
type IVToolbars a = A.IDispatch (IVToolbars_ a)
iidIVToolbars :: Com.IID (IVToolbars ())
iidIVToolbars = Com.mkIID "{000D0255-0000-0000-C000-000000000046}"

getNewEnumVT :: IVToolbars a
 -> P.IO (Com.IUnknown ())
getNewEnumVT =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVT :: P.Int
 -> IVToolbars a
 -> P.IO (IVToolbar ())
getItemVT lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

addVT :: IVToolbars a
 -> P.IO (IVToolbar ())
addVT =
  A.function1 "Add"
   []
   A.outIDispatch

addAtVT :: P.Int
 -> IVToolbars a
 -> P.IO (IVToolbar ())
addAtVT lIndex =
  A.function1 "AddAt"
   [A.inInt lIndex]
   A.outIDispatch

getCountVT :: IVToolbars a
 -> P.IO (P.Int)
getCountVT =
  A.propertyGet "Count"
   []
   A.outInt

getParentVT :: IVToolbars a
 -> P.IO (IVToolbarSet ())
getParentVT =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbar
-- 
-- --------------------------------------------------
data IVToolbar_ a = IVToolbar__
   
type IVToolbar a = A.IDispatch (IVToolbar_ a)
iidIVToolbar :: Com.IID (IVToolbar ())
iidIVToolbar = Com.mkIID "{000D0252-0000-0000-C000-000000000046}"

deleteVT :: IVToolbar a
 -> P.IO ()
deleteVT =
  A.method0 "Delete"
   []

getDefaultVT :: IVToolbar a
 -> P.IO (P.String)
getDefaultVT =
  A.propertyGet "Default"
   []
   A.outString

setCaptionVT :: P.String
 -> IVToolbar a
 -> P.IO ()
setCaptionVT pCaption =
  A.propertySet "Caption"
   [A.inString pCaption]

getCaptionVT :: IVToolbar a
 -> P.IO (P.String)
getCaptionVT =
  A.propertyGet "Caption"
   []
   A.outString

getIndexVT :: IVToolbar a
 -> P.IO (P.Int)
getIndexVT =
  A.propertyGet "Index"
   []
   A.outInt

getToolbarItemsVT :: IVToolbar a
 -> P.IO (IVToolbarItems ())
getToolbarItemsVT =
  A.propertyGet "ToolbarItems"
   []
   A.outIDispatch

parentVT :: IVToolbar a
 -> P.IO (IVToolbars ())
parentVT =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbarItems
-- 
-- --------------------------------------------------
data IVToolbarItems_ a = IVToolbarItems__
   
type IVToolbarItems a = A.IDispatch (IVToolbarItems_ a)
iidIVToolbarItems :: Com.IID (IVToolbarItems ())
iidIVToolbarItems =
  Com.mkIID "{000D0245-0000-0000-C000-000000000046}"

getNewEnumVTI :: IVToolbarItems a
 -> P.IO (Com.IUnknown ())
getNewEnumVTI =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVTI :: P.Int
 -> IVToolbarItems a
 -> P.IO (IVToolbarItem ())
getItemVTI lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

addVTI :: IVToolbarItems a
 -> P.IO (IVToolbarItem ())
addVTI =
  A.function1 "Add"
   []
   A.outIDispatch

addAtVTI :: P.Int
 -> IVToolbarItems a
 -> P.IO (IVToolbarItem ())
addAtVTI lIndex =
  A.function1 "AddAt"
   [A.inInt lIndex]
   A.outIDispatch

getCountVTI :: IVToolbarItems a
 -> P.IO (P.Int)
getCountVTI =
  A.propertyGet "Count"
   []
   A.outInt

getParentVTI :: IVToolbarItems a
 -> P.IO (IVToolbar ())
getParentVTI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbarItem
-- 
-- --------------------------------------------------
data IVToolbarItem_ a = IVToolbarItem__
   
type IVToolbarItem a = A.IDispatch (IVToolbarItem_ a)
iidIVToolbarItem :: Com.IID (IVToolbarItem ())
iidIVToolbarItem =
  Com.mkIID "{000D0242-0000-0000-C000-000000000046}"

deleteVTI :: IVToolbarItem a
 -> P.IO ()
deleteVTI =
  A.method0 "Delete"
   []

iconFileName :: P.String
 -> IVToolbarItem a
 -> P.IO ()
iconFileName iconFileName =
  A.method0 "IconFileName"
   [A.inString iconFileName]

getDefaultVTI :: IVToolbarItem a
 -> P.IO (P.String)
getDefaultVTI =
  A.propertyGet "Default"
   []
   A.outString

getIndexVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getIndexVTI =
  A.propertyGet "Index"
   []
   A.outInt

parentVTI :: IVToolbarItem a
 -> P.IO (IVToolbarItems ())
parentVTI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

setCmdNumVTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setCmdNumVTI pwCmd =
  A.propertySet "CmdNum"
   [A.inInt pwCmd]

getCmdNumVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getCmdNumVTI =
  A.propertyGet "CmdNum"
   []
   A.outInt

setHelpContextIDVTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setHelpContextIDVTI pHelpContextID =
  A.propertySet "HelpContextID"
   [A.inInt pHelpContextID]

getHelpContextIDVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getHelpContextIDVTI =
  A.propertyGet "HelpContextID"
   []
   A.outInt

setActionTextVTI :: P.String
 -> IVToolbarItem a
 -> P.IO ()
setActionTextVTI pActionText =
  A.propertySet "ActionText"
   [A.inString pActionText]

getActionTextVTI :: IVToolbarItem a
 -> P.IO (P.String)
getActionTextVTI =
  A.propertyGet "ActionText"
   []
   A.outString

setAddOnNameVTI :: P.String
 -> IVToolbarItem a
 -> P.IO ()
setAddOnNameVTI pAddOnName =
  A.propertySet "AddOnName"
   [A.inString pAddOnName]

getAddOnNameVTI :: IVToolbarItem a
 -> P.IO (P.String)
getAddOnNameVTI =
  A.propertyGet "AddOnName"
   []
   A.outString

setAddOnArgsVTI :: P.String
 -> IVToolbarItem a
 -> P.IO ()
setAddOnArgsVTI pAddOnArgs =
  A.propertySet "AddOnArgs"
   [A.inString pAddOnArgs]

getAddOnArgsVTI :: IVToolbarItem a
 -> P.IO (P.String)
getAddOnArgsVTI =
  A.propertyGet "AddOnArgs"
   []
   A.outString

setHelpFileVTI :: P.String
 -> IVToolbarItem a
 -> P.IO ()
setHelpFileVTI pHelpFile =
  A.propertySet "HelpFile"
   [A.inString pHelpFile]

getHelpFileVTI :: IVToolbarItem a
 -> P.IO (P.String)
getHelpFileVTI =
  A.propertyGet "HelpFile"
   []
   A.outString

setCntrlTypeVTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setCntrlTypeVTI pwCntrlType =
  A.propertySet "CntrlType"
   [A.inInt pwCntrlType]

getCntrlTypeVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getCntrlTypeVTI =
  A.propertyGet "CntrlType"
   []
   A.outInt

setCntrlIDVTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setCntrlIDVTI pwCntrlID =
  A.propertySet "CntrlID"
   [A.inInt pwCntrlID]

getCntrlIDVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getCntrlIDVTI =
  A.propertyGet "CntrlID"
   []
   A.outInt

setTypeSpecific1VTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setTypeSpecific1VTI pwTypeSpecific =
  A.propertySet "TypeSpecific1"
   [A.inInt pwTypeSpecific]

getTypeSpecific1VTI :: IVToolbarItem a
 -> P.IO (P.Int)
getTypeSpecific1VTI =
  A.propertyGet "TypeSpecific1"
   []
   A.outInt

setPriorityVTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setPriorityVTI pwPriority =
  A.propertySet "Priority"
   [A.inInt pwPriority]

getPriorityVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getPriorityVTI =
  A.propertyGet "Priority"
   []
   A.outInt

setSpacingVTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setSpacingVTI pwSpacing =
  A.propertySet "Spacing"
   [A.inInt pwSpacing]

getSpacingVTI :: IVToolbarItem a
 -> P.IO (P.Int)
getSpacingVTI =
  A.propertyGet "Spacing"
   []
   A.outInt

setTypeSpecific2VTI :: P.Int
 -> IVToolbarItem a
 -> P.IO ()
setTypeSpecific2VTI pwTypeSpecific =
  A.propertySet "TypeSpecific2"
   [A.inInt pwTypeSpecific]

getTypeSpecific2VTI :: IVToolbarItem a
 -> P.IO (P.Int)
getTypeSpecific2VTI =
  A.propertyGet "TypeSpecific2"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVStatusBars
-- 
-- --------------------------------------------------
data IVStatusBars_ a = IVStatusBars__
   
type IVStatusBars a = A.IDispatch (IVStatusBars_ a)
iidIVStatusBars :: Com.IID (IVStatusBars ())
iidIVStatusBars =
  Com.mkIID "{000D0285-0000-0000-C000-000000000046}"

getNewEnumVSB :: IVStatusBars a
 -> P.IO (Com.IUnknown ())
getNewEnumVSB =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVSB :: P.Int
 -> IVStatusBars a
 -> P.IO (IVStatusBar ())
getItemVSB lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

getItemAtIDVSB :: P.Int
 -> IVStatusBars a
 -> P.IO (IVStatusBar ())
getItemAtIDVSB lID =
  A.propertyGet "ItemAtID"
   [A.inInt lID]
   A.outIDispatch

addVSB :: IVStatusBars a
 -> P.IO (IVStatusBar ())
addVSB =
  A.function1 "Add"
   []
   A.outIDispatch

addAtIDVSB :: P.Int
 -> IVStatusBars a
 -> P.IO (IVStatusBar ())
addAtIDVSB lID =
  A.function1 "AddAtID"
   [A.inInt lID]
   A.outIDispatch

getCountVSB :: IVStatusBars a
 -> P.IO (P.Int)
getCountVSB =
  A.propertyGet "Count"
   []
   A.outInt

getParentVSB :: IVStatusBars a
 -> P.IO (IVUIObject ())
getParentVSB =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVStatusBar
-- 
-- --------------------------------------------------
data IVStatusBar_ a = IVStatusBar__
   
type IVStatusBar a = A.IDispatch (IVStatusBar_ a)
iidIVStatusBar :: Com.IID (IVStatusBar ())
iidIVStatusBar = Com.mkIID "{000D0282-0000-0000-C000-000000000046}"

deleteVSB :: IVStatusBar a
 -> P.IO ()
deleteVSB =
  A.method0 "Delete"
   []

getDefaultVSB :: IVStatusBar a
 -> P.IO (P.String)
getDefaultVSB =
  A.propertyGet "Default"
   []
   A.outString

setCaptionVSB :: P.String
 -> IVStatusBar a
 -> P.IO ()
setCaptionVSB pCaption =
  A.propertySet "Caption"
   [A.inString pCaption]

getCaptionVSB :: IVStatusBar a
 -> P.IO (P.String)
getCaptionVSB =
  A.propertyGet "Caption"
   []
   A.outString

getSetIDVSB :: IVStatusBar a
 -> P.IO (P.Int)
getSetIDVSB =
  A.propertyGet "SetID"
   []
   A.outInt

getStatusBarItemsVSB :: IVStatusBar a
 -> P.IO (IVStatusBarItems ())
getStatusBarItemsVSB =
  A.propertyGet "StatusBarItems"
   []
   A.outIDispatch

parentVSB :: IVStatusBar a
 -> P.IO (IVStatusBars ())
parentVSB =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVStatusBarItems
-- 
-- --------------------------------------------------
data IVStatusBarItems_ a = IVStatusBarItems__
   
type IVStatusBarItems a = A.IDispatch (IVStatusBarItems_ a)
iidIVStatusBarItems :: Com.IID (IVStatusBarItems ())
iidIVStatusBarItems =
  Com.mkIID "{000D0275-0000-0000-C000-000000000046}"

getNewEnumVSBI :: IVStatusBarItems a
 -> P.IO (Com.IUnknown ())
getNewEnumVSBI =
  A.propertyGet "_NewEnum"
   []
   A.outIUnknown

getItemVSBI :: P.Int
 -> IVStatusBarItems a
 -> P.IO (IVStatusBarItem ())
getItemVSBI lIndex =
  A.propertyGet "Item"
   [A.inInt lIndex]
   A.outIDispatch

addVSBI :: IVStatusBarItems a
 -> P.IO (IVStatusBarItem ())
addVSBI =
  A.function1 "Add"
   []
   A.outIDispatch

addAtVSBI :: P.Int
 -> IVStatusBarItems a
 -> P.IO (IVStatusBarItem ())
addAtVSBI lIndex =
  A.function1 "AddAt"
   [A.inInt lIndex]
   A.outIDispatch

getCountVSBI :: IVStatusBarItems a
 -> P.IO (P.Int)
getCountVSBI =
  A.propertyGet "Count"
   []
   A.outInt

getParentVSBI :: IVStatusBarItems a
 -> P.IO (IVStatusBar ())
getParentVSBI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVStatusBarItem
-- 
-- --------------------------------------------------
data IVStatusBarItem_ a = IVStatusBarItem__
   
type IVStatusBarItem a = A.IDispatch (IVStatusBarItem_ a)
iidIVStatusBarItem :: Com.IID (IVStatusBarItem ())
iidIVStatusBarItem =
  Com.mkIID "{000D0272-0000-0000-C000-000000000046}"

deleteVSBI :: IVStatusBarItem a
 -> P.IO ()
deleteVSBI =
  A.method0 "Delete"
   []

iconFileNameVSBI :: P.String
 -> IVStatusBarItem a
 -> P.IO ()
iconFileNameVSBI iconFileName =
  A.method0 "IconFileName"
   [A.inString iconFileName]

getDefaultVSBI :: IVStatusBarItem a
 -> P.IO (P.String)
getDefaultVSBI =
  A.propertyGet "Default"
   []
   A.outString

getIndexVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getIndexVSBI =
  A.propertyGet "Index"
   []
   A.outInt

parentVSBI :: IVStatusBarItem a
 -> P.IO (IVStatusBarItems ())
parentVSBI =
  A.propertyGet "Parent"
   []
   A.outIDispatch

setCmdNumVSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setCmdNumVSBI pwCmd =
  A.propertySet "CmdNum"
   [A.inInt pwCmd]

getCmdNumVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getCmdNumVSBI =
  A.propertyGet "CmdNum"
   []
   A.outInt

setHelpContextIDVSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setHelpContextIDVSBI pHelpContextID =
  A.propertySet "HelpContextID"
   [A.inInt pHelpContextID]

getHelpContextIDVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getHelpContextIDVSBI =
  A.propertyGet "HelpContextID"
   []
   A.outInt

setActionTextVSBI :: P.String
 -> IVStatusBarItem a
 -> P.IO ()
setActionTextVSBI pActionText =
  A.propertySet "ActionText"
   [A.inString pActionText]

getActionTextVSBI :: IVStatusBarItem a
 -> P.IO (P.String)
getActionTextVSBI =
  A.propertyGet "ActionText"
   []
   A.outString

setAddOnNameVSBI :: P.String
 -> IVStatusBarItem a
 -> P.IO ()
setAddOnNameVSBI pAddOnName =
  A.propertySet "AddOnName"
   [A.inString pAddOnName]

getAddOnNameVSBI :: IVStatusBarItem a
 -> P.IO (P.String)
getAddOnNameVSBI =
  A.propertyGet "AddOnName"
   []
   A.outString

setAddOnArgsVSBI :: P.String
 -> IVStatusBarItem a
 -> P.IO ()
setAddOnArgsVSBI pAddOnArgs =
  A.propertySet "AddOnArgs"
   [A.inString pAddOnArgs]

getAddOnArgsVSBI :: IVStatusBarItem a
 -> P.IO (P.String)
getAddOnArgsVSBI =
  A.propertyGet "AddOnArgs"
   []
   A.outString

setHelpFileVSBI :: P.String
 -> IVStatusBarItem a
 -> P.IO ()
setHelpFileVSBI pHelpFile =
  A.propertySet "HelpFile"
   [A.inString pHelpFile]

getHelpFileVSBI :: IVStatusBarItem a
 -> P.IO (P.String)
getHelpFileVSBI =
  A.propertyGet "HelpFile"
   []
   A.outString

setCntrlTypeVSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setCntrlTypeVSBI pwCntrlType =
  A.propertySet "CntrlType"
   [A.inInt pwCntrlType]

getCntrlTypeVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getCntrlTypeVSBI =
  A.propertyGet "CntrlType"
   []
   A.outInt

setCntrlIDVSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setCntrlIDVSBI pwCntrlID =
  A.propertySet "CntrlID"
   [A.inInt pwCntrlID]

getCntrlIDVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getCntrlIDVSBI =
  A.propertyGet "CntrlID"
   []
   A.outInt

setTypeSpecific1VSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setTypeSpecific1VSBI pwTypeSpecific =
  A.propertySet "TypeSpecific1"
   [A.inInt pwTypeSpecific]

getTypeSpecific1VSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getTypeSpecific1VSBI =
  A.propertyGet "TypeSpecific1"
   []
   A.outInt

setPriorityVSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setPriorityVSBI pwPriority =
  A.propertySet "Priority"
   [A.inInt pwPriority]

getPriorityVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getPriorityVSBI =
  A.propertyGet "Priority"
   []
   A.outInt

setSpacingVSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setSpacingVSBI pwSpacing =
  A.propertySet "Spacing"
   [A.inInt pwSpacing]

getSpacingVSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getSpacingVSBI =
  A.propertyGet "Spacing"
   []
   A.outInt

setTypeSpecific2VSBI :: P.Int
 -> IVStatusBarItem a
 -> P.IO ()
setTypeSpecific2VSBI pwTypeSpecific =
  A.propertySet "TypeSpecific2"
   [A.inInt pwTypeSpecific]

getTypeSpecific2VSBI :: IVStatusBarItem a
 -> P.IO (P.Int)
getTypeSpecific2VSBI =
  A.propertyGet "TypeSpecific2"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVDocument
-- 
-- --------------------------------------------------
data IVDocument_ a = IVDocument__
   
type IVDocument a = A.IDispatch (IVDocument_ a)
iidIVDocument :: Com.IID (IVDocument ())
iidIVDocument = Com.mkIID "{000D0705-0000-0000-C000-000000000046}"

getApplicationVD :: IVDocument a
 -> P.IO (IVApplication ())
getApplicationVD =
  A.propertyGet "Application"
   []
   A.outIDispatch

getStatVD :: IVDocument a
 -> P.IO (P.Int)
getStatVD =
  A.propertyGet "Stat"
   []
   A.outInt

getObjectTypeVD :: IVDocument a
 -> P.IO (P.Int)
getObjectTypeVD =
  A.propertyGet "ObjectType"
   []
   A.outInt

getInPlaceVD :: IVDocument a
 -> P.IO (P.Int)
getInPlaceVD =
  A.propertyGet "InPlace"
   []
   A.outInt

getMastersVD :: IVDocument a
 -> P.IO (IVMasters ())
getMastersVD =
  A.propertyGet "Masters"
   []
   A.outIDispatch

getPagesVD :: IVDocument a
 -> P.IO (IVPages ())
getPagesVD =
  A.propertyGet "Pages"
   []
   A.outIDispatch

getStylesVD :: IVDocument a
 -> P.IO (IVStyles ())
getStylesVD =
  A.propertyGet "Styles"
   []
   A.outIDispatch

getNameVD :: IVDocument a
 -> P.IO (P.String)
getNameVD =
  A.propertyGet "Name"
   []
   A.outString

getPathVD :: IVDocument a
 -> P.IO (P.String)
getPathVD =
  A.propertyGet "Path"
   []
   A.outString

getFullNameVD :: IVDocument a
 -> P.IO (P.String)
getFullNameVD =
  A.propertyGet "FullName"
   []
   A.outString

drop :: Com.IUnknown a0
 -> P.Int
 -> P.Int
 -> IVDocument a
 -> P.IO (IVMaster ())
drop objectToDrop xPos yPos =
  A.function1 "Drop"
   [ A.inIUnknown objectToDrop
   , A.inInt xPos
   , A.inInt yPos
   ]
   A.outIDispatch

getIndexVD :: IVDocument a
 -> P.IO (P.Int)
getIndexVD =
  A.propertyGet "Index"
   []
   A.outInt

getSavedVD :: IVDocument a
 -> P.IO (P.Int)
getSavedVD =
  A.propertyGet "Saved"
   []
   A.outInt

setSavedVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setSavedVD lpi2Ret =
  A.propertySet "Saved"
   [A.inInt lpi2Ret]

getReadOnlyVD :: IVDocument a
 -> P.IO (P.Int)
getReadOnlyVD =
  A.propertyGet "ReadOnly"
   []
   A.outInt

save :: IVDocument a
 -> P.IO (P.Int)
save =
  A.function1 "Save"
   []
   A.outInt

saveAs :: P.String
 -> IVDocument a
 -> P.IO (P.Int)
saveAs fileName =
  A.function1 "SaveAs"
   [A.inString fileName]
   A.outInt

getVersionVD :: IVDocument a
 -> P.IO (P.Int)
getVersionVD =
  A.propertyGet "Version"
   []
   A.outInt

setVersionVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setVersionVD lpi4Ret =
  A.propertySet "Version"
   [A.inInt lpi4Ret]

getTitleVD :: IVDocument a
 -> P.IO (P.String)
getTitleVD =
  A.propertyGet "Title"
   []
   A.outString

setTitleVD :: P.String
 -> IVDocument a
 -> P.IO ()
setTitleVD lpbstrRet =
  A.propertySet "Title"
   [A.inString lpbstrRet]

getSubjectVD :: IVDocument a
 -> P.IO (P.String)
getSubjectVD =
  A.propertyGet "Subject"
   []
   A.outString

setSubjectVD :: P.String
 -> IVDocument a
 -> P.IO ()
setSubjectVD lpbstrRet =
  A.propertySet "Subject"
   [A.inString lpbstrRet]

getCreatorVD :: IVDocument a
 -> P.IO (P.String)
getCreatorVD =
  A.propertyGet "Creator"
   []
   A.outString

setCreatorVD :: P.String
 -> IVDocument a
 -> P.IO ()
setCreatorVD lpbstrRet =
  A.propertySet "Creator"
   [A.inString lpbstrRet]

getKeywordsVD :: IVDocument a
 -> P.IO (P.String)
getKeywordsVD =
  A.propertyGet "Keywords"
   []
   A.outString

setKeywordsVD :: P.String
 -> IVDocument a
 -> P.IO ()
setKeywordsVD lpbstrRet =
  A.propertySet "Keywords"
   [A.inString lpbstrRet]

getDescriptionVD :: IVDocument a
 -> P.IO (P.String)
getDescriptionVD =
  A.propertyGet "Description"
   []
   A.outString

setDescriptionVD :: P.String
 -> IVDocument a
 -> P.IO ()
setDescriptionVD lpbstrRet =
  A.propertySet "Description"
   [A.inString lpbstrRet]

print :: IVDocument a
 -> P.IO ()
print =
  A.method0 "Print"
   []

close :: IVDocument a
 -> P.IO ()
close =
  A.method0 "Close"
   []

getCustomMenusVD :: IVDocument a
 -> P.IO (IVUIObject ())
getCustomMenusVD =
  A.propertyGet "CustomMenus"
   []
   A.outIDispatch

setCustomMenus :: IVUIObject a0
 -> IVDocument a
 -> P.IO ()
setCustomMenus menusObject =
  A.method0 "SetCustomMenus"
   [A.inIDispatch menusObject]

getCustomMenusFileVD :: IVDocument a
 -> P.IO (P.String)
getCustomMenusFileVD =
  A.propertyGet "CustomMenusFile"
   []
   A.outString

setCustomMenusFileVD :: P.String
 -> IVDocument a
 -> P.IO ()
setCustomMenusFileVD lpbstrRet =
  A.propertySet "CustomMenusFile"
   [A.inString lpbstrRet]

clearCustomMenus :: IVDocument a
 -> P.IO ()
clearCustomMenus =
  A.method0 "ClearCustomMenus"
   []

getCustomToolbarsVD :: IVDocument a
 -> P.IO (IVUIObject ())
getCustomToolbarsVD =
  A.propertyGet "CustomToolbars"
   []
   A.outIDispatch

setCustomToolbars :: IVUIObject a0
 -> IVDocument a
 -> P.IO ()
setCustomToolbars toolbarsObject =
  A.method0 "SetCustomToolbars"
   [A.inIDispatch toolbarsObject]

getCustomToolbarsFileVD :: IVDocument a
 -> P.IO (P.String)
getCustomToolbarsFileVD =
  A.propertyGet "CustomToolbarsFile"
   []
   A.outString

setCustomToolbarsFileVD :: P.String
 -> IVDocument a
 -> P.IO ()
setCustomToolbarsFileVD lpbstrRet =
  A.propertySet "CustomToolbarsFile"
   [A.inString lpbstrRet]

clearCustomToolbars :: IVDocument a
 -> P.IO ()
clearCustomToolbars =
  A.method0 "ClearCustomToolbars"
   []

getFontsVD :: IVDocument a
 -> P.IO (IVFonts ())
getFontsVD =
  A.propertyGet "Fonts"
   []
   A.outIDispatch

getColorsVD :: IVDocument a
 -> P.IO (IVColors ())
getColorsVD =
  A.propertyGet "Colors"
   []
   A.outIDispatch

getEventListVD :: IVDocument a
 -> P.IO (IVEventList ())
getEventListVD =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getTemplateVD :: IVDocument a
 -> P.IO (P.String)
getTemplateVD =
  A.propertyGet "Template"
   []
   A.outString

saveAsEx :: P.String
 -> P.Int
 -> IVDocument a
 -> P.IO ()
saveAsEx fileName saveFlags =
  A.method0 "SaveAsEx"
   [ A.inString fileName
   , A.inInt saveFlags
   ]

getSavePreviewModeVD :: IVDocument a
 -> P.IO (P.Int)
getSavePreviewModeVD =
  A.propertyGet "SavePreviewMode"
   []
   A.outInt

setSavePreviewModeVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setSavePreviewModeVD lpi2Ret =
  A.propertySet "SavePreviewMode"
   [A.inInt lpi2Ret]

getIcon :: P.Int
 -> P.String
 -> IVDocument a
 -> P.IO ()
getIcon iD fileName =
  A.method0 "GetIcon"
   [ A.inInt iD
   , A.inString fileName
   ]

setIcon :: P.Int
 -> P.Int
 -> P.String
 -> IVDocument a
 -> P.IO ()
setIcon iD index fileName =
  A.method0 "SetIcon"
   [ A.inInt iD
   , A.inInt index
   , A.inString fileName
   ]

getLeftMarginVD :: (A.Variant a0)
   => a0
 -> IVDocument a
 -> P.IO (P.Double)
getLeftMarginVD unitsNameOrCode =
  A.propertyGet "LeftMargin"
   [A.inVariant unitsNameOrCode]
   A.outDouble

setLeftMarginVD :: (A.Variant a0)
   => a0
 -> P.Double
 -> IVDocument a
 -> P.IO ()
setLeftMarginVD unitsNameOrCode lpr8Ret =
  A.propertySet "LeftMargin"
   [ A.inVariant unitsNameOrCode
   , A.inDouble lpr8Ret
   ]

getRightMarginVD :: (A.Variant a0)
   => a0
 -> IVDocument a
 -> P.IO (P.Double)
getRightMarginVD unitsNameOrCode =
  A.propertyGet "RightMargin"
   [A.inVariant unitsNameOrCode]
   A.outDouble

setRightMarginVD :: (A.Variant a0)
   => a0
 -> P.Double
 -> IVDocument a
 -> P.IO ()
setRightMarginVD unitsNameOrCode lpr8Ret =
  A.propertySet "RightMargin"
   [ A.inVariant unitsNameOrCode
   , A.inDouble lpr8Ret
   ]

getTopMarginVD :: (A.Variant a0)
   => a0
 -> IVDocument a
 -> P.IO (P.Double)
getTopMarginVD unitsNameOrCode =
  A.propertyGet "TopMargin"
   [A.inVariant unitsNameOrCode]
   A.outDouble

setTopMarginVD :: (A.Variant a0)
   => a0
 -> P.Double
 -> IVDocument a
 -> P.IO ()
setTopMarginVD unitsNameOrCode lpr8Ret =
  A.propertySet "TopMargin"
   [ A.inVariant unitsNameOrCode
   , A.inDouble lpr8Ret
   ]

getBottomMarginVD :: (A.Variant a0)
   => a0
 -> IVDocument a
 -> P.IO (P.Double)
getBottomMarginVD unitsNameOrCode =
  A.propertyGet "BottomMargin"
   [A.inVariant unitsNameOrCode]
   A.outDouble

setBottomMarginVD :: (A.Variant a0)
   => a0
 -> P.Double
 -> IVDocument a
 -> P.IO ()
setBottomMarginVD unitsNameOrCode lpr8Ret =
  A.propertySet "BottomMargin"
   [ A.inVariant unitsNameOrCode
   , A.inDouble lpr8Ret
   ]

getPrintLandscapeVD :: IVDocument a
 -> P.IO (P.Int)
getPrintLandscapeVD =
  A.propertyGet "PrintLandscape"
   []
   A.outInt

setPrintLandscapeVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPrintLandscapeVD lpi2Ret =
  A.propertySet "PrintLandscape"
   [A.inInt lpi2Ret]

getPrintCenteredHVD :: IVDocument a
 -> P.IO (P.Int)
getPrintCenteredHVD =
  A.propertyGet "PrintCenteredH"
   []
   A.outInt

setPrintCenteredHVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPrintCenteredHVD lpi2Ret =
  A.propertySet "PrintCenteredH"
   [A.inInt lpi2Ret]

getPrintCenteredVVD :: IVDocument a
 -> P.IO (P.Int)
getPrintCenteredVVD =
  A.propertyGet "PrintCenteredV"
   []
   A.outInt

setPrintCenteredVVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPrintCenteredVVD lpi2Ret =
  A.propertySet "PrintCenteredV"
   [A.inInt lpi2Ret]

getPrintScaleVD :: IVDocument a
 -> P.IO (P.Double)
getPrintScaleVD =
  A.propertyGet "PrintScale"
   []
   A.outDouble

setPrintScaleVD :: P.Double
 -> IVDocument a
 -> P.IO ()
setPrintScaleVD lpr8Ret =
  A.propertySet "PrintScale"
   [A.inDouble lpr8Ret]

getPrintFitOnPagesVD :: IVDocument a
 -> P.IO (P.Int)
getPrintFitOnPagesVD =
  A.propertyGet "PrintFitOnPages"
   []
   A.outInt

setPrintFitOnPagesVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPrintFitOnPagesVD lpi2Ret =
  A.propertySet "PrintFitOnPages"
   [A.inInt lpi2Ret]

getPrintPagesAcrossVD :: IVDocument a
 -> P.IO (P.Int)
getPrintPagesAcrossVD =
  A.propertyGet "PrintPagesAcross"
   []
   A.outInt

setPrintPagesAcrossVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPrintPagesAcrossVD lpi2Ret =
  A.propertySet "PrintPagesAcross"
   [A.inInt lpi2Ret]

getPrintPagesDownVD :: IVDocument a
 -> P.IO (P.Int)
getPrintPagesDownVD =
  A.propertyGet "PrintPagesDown"
   []
   A.outInt

setPrintPagesDownVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPrintPagesDownVD lpi2Ret =
  A.propertySet "PrintPagesDown"
   [A.inInt lpi2Ret]

getDefaultStyleVD :: IVDocument a
 -> P.IO (P.String)
getDefaultStyleVD =
  A.propertyGet "DefaultStyle"
   []
   A.outString

setDefaultStyleVD :: P.String
 -> IVDocument a
 -> P.IO ()
setDefaultStyleVD lpbstrRet =
  A.propertySet "DefaultStyle"
   [A.inString lpbstrRet]

getDefaultLineStyleVD :: IVDocument a
 -> P.IO (P.String)
getDefaultLineStyleVD =
  A.propertyGet "DefaultLineStyle"
   []
   A.outString

setDefaultLineStyleVD :: P.String
 -> IVDocument a
 -> P.IO ()
setDefaultLineStyleVD lpbstrRet =
  A.propertySet "DefaultLineStyle"
   [A.inString lpbstrRet]

getDefaultFillStyleVD :: IVDocument a
 -> P.IO (P.String)
getDefaultFillStyleVD =
  A.propertyGet "DefaultFillStyle"
   []
   A.outString

setDefaultFillStyleVD :: P.String
 -> IVDocument a
 -> P.IO ()
setDefaultFillStyleVD lpbstrRet =
  A.propertySet "DefaultFillStyle"
   [A.inString lpbstrRet]

getDefaultTextStyleVD :: IVDocument a
 -> P.IO (P.String)
getDefaultTextStyleVD =
  A.propertyGet "DefaultTextStyle"
   []
   A.outString

setDefaultTextStyleVD :: P.String
 -> IVDocument a
 -> P.IO ()
setDefaultTextStyleVD lpbstrRet =
  A.propertySet "DefaultTextStyle"
   [A.inString lpbstrRet]

getPersistsEventsVD :: IVDocument a
 -> P.IO (P.Int)
getPersistsEventsVD =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

openStencilWindow :: IVDocument a
 -> P.IO (IVWindow ())
openStencilWindow =
  A.function1 "OpenStencilWindow"
   []
   A.outIDispatch

parseLine :: P.String
 -> IVDocument a
 -> P.IO ()
parseLine line =
  A.method0 "ParseLine"
   [A.inString line]

executeLine :: P.String
 -> IVDocument a
 -> P.IO ()
executeLine line =
  A.method0 "ExecuteLine"
   [A.inString line]

getVBProjectVD :: IVDocument a
 -> P.IO (A.IDispatch ())
getVBProjectVD =
  A.propertyGet "VBProject"
   []
   A.outIDispatch

getPaperWidthVD :: (A.Variant a0)
   => a0
 -> IVDocument a
 -> P.IO (P.Double)
getPaperWidthVD unitsNameOrCode =
  A.propertyGet "PaperWidth"
   [A.inVariant unitsNameOrCode]
   A.outDouble

getPaperHeightVD :: (A.Variant a0)
   => a0
 -> IVDocument a
 -> P.IO (P.Double)
getPaperHeightVD unitsNameOrCode =
  A.propertyGet "PaperHeight"
   [A.inVariant unitsNameOrCode]
   A.outDouble

getPaperSizeVD :: IVDocument a
 -> P.IO (P.Int)
getPaperSizeVD =
  A.propertyGet "PaperSize"
   []
   A.outInt

setPaperSizeVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setPaperSizeVD lpi2Ret =
  A.propertySet "PaperSize"
   [A.inInt lpi2Ret]

followHyperlink45 :: P.String
 -> P.String
 -> IVDocument a
 -> P.IO ()
followHyperlink45 target location =
  A.method0 "FollowHyperlink45"
   [ A.inString target
   , A.inString location
   ]

getCodeNameVD :: IVDocument a
 -> P.IO (P.String)
getCodeNameVD =
  A.propertyGet "CodeName"
   []
   A.outString

getModeVD :: IVDocument a
 -> P.IO (P.Int)
getModeVD =
  A.propertyGet "Mode"
   []
   A.outInt

setModeVD :: P.Int
 -> IVDocument a
 -> P.IO ()
setModeVD lpi2Ret =
  A.propertySet "Mode"
   [A.inInt lpi2Ret]

getOLEObjectsVD :: IVDocument a
 -> P.IO (IVOLEObjects ())
getOLEObjectsVD =
  A.propertyGet "OLEObjects"
   []
   A.outIDispatch

getManagerVD :: IVDocument a
 -> P.IO (P.String)
getManagerVD =
  A.propertyGet "Manager"
   []
   A.outString

setManagerVD :: P.String
 -> IVDocument a
 -> P.IO ()
setManagerVD lpbstrRet =
  A.propertySet "Manager"
   [A.inString lpbstrRet]

getCompanyVD :: IVDocument a
 -> P.IO (P.String)
getCompanyVD =
  A.propertyGet "Company"
   []
   A.outString

setCompanyVD :: P.String
 -> IVDocument a
 -> P.IO ()
setCompanyVD lpbstrRet =
  A.propertySet "Company"
   [A.inString lpbstrRet]

getCategoryVD :: IVDocument a
 -> P.IO (P.String)
getCategoryVD =
  A.propertyGet "Category"
   []
   A.outString

setCategoryVD :: P.String
 -> IVDocument a
 -> P.IO ()
setCategoryVD lpbstrRet =
  A.propertySet "Category"
   [A.inString lpbstrRet]

getHyperlinkBaseVD :: IVDocument a
 -> P.IO (P.String)
getHyperlinkBaseVD =
  A.propertyGet "HyperlinkBase"
   []
   A.outString

setHyperlinkBaseVD :: P.String
 -> IVDocument a
 -> P.IO ()
setHyperlinkBaseVD lpbstrRet =
  A.propertySet "HyperlinkBase"
   [A.inString lpbstrRet]

-- --------------------------------------------------
-- 
-- interface IVApplication
-- 
-- --------------------------------------------------
data IVApplication_ a = IVApplication__
   
type IVApplication a = A.IDispatch (IVApplication_ a)
iidIVApplication :: Com.IID (IVApplication ())
iidIVApplication =
  Com.mkIID "{000D0700-0000-0000-C000-000000000046}"

getActiveDocumentVA :: IVApplication a
 -> P.IO (IVDocument ())
getActiveDocumentVA =
  A.propertyGet "ActiveDocument"
   []
   A.outIDispatch

getActivePageVA :: IVApplication a
 -> P.IO (IVPage ())
getActivePageVA =
  A.propertyGet "ActivePage"
   []
   A.outIDispatch

getActiveWindowVA :: IVApplication a
 -> P.IO (IVWindow ())
getActiveWindowVA =
  A.propertyGet "ActiveWindow"
   []
   A.outIDispatch

getApplicationVA :: IVApplication a
 -> P.IO (IVApplication ())
getApplicationVA =
  A.propertyGet "Application"
   []
   A.outIDispatch

getDocumentsVA :: IVApplication a
 -> P.IO (IVDocuments ())
getDocumentsVA =
  A.propertyGet "Documents"
   []
   A.outIDispatch

getObjectTypeVA :: IVApplication a
 -> P.IO (P.Int)
getObjectTypeVA =
  A.propertyGet "ObjectType"
   []
   A.outInt

getOnDataChangeDelayVA :: IVApplication a
 -> P.IO (P.Int)
getOnDataChangeDelayVA =
  A.propertyGet "OnDataChangeDelay"
   []
   A.outInt

setOnDataChangeDelayVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setOnDataChangeDelayVA lpi4Ret =
  A.propertySet "OnDataChangeDelay"
   [A.inInt lpi4Ret]

getProcessIDVA :: IVApplication a
 -> P.IO (P.Int)
getProcessIDVA =
  A.propertyGet "ProcessID"
   []
   A.outInt

quit :: IVApplication a
 -> P.IO ()
quit =
  A.method0 "Quit"
   []

redo :: IVApplication a
 -> P.IO ()
redo =
  A.method0 "Redo"
   []

getScreenUpdatingVA :: IVApplication a
 -> P.IO (P.Int)
getScreenUpdatingVA =
  A.propertyGet "ScreenUpdating"
   []
   A.outInt

setScreenUpdatingVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setScreenUpdatingVA lpi2Ret =
  A.propertySet "ScreenUpdating"
   [A.inInt lpi2Ret]

getStatVA :: IVApplication a
 -> P.IO (P.Int)
getStatVA =
  A.propertyGet "Stat"
   []
   A.outInt

undo :: IVApplication a
 -> P.IO ()
undo =
  A.method0 "Undo"
   []

getVersionVA :: IVApplication a
 -> P.IO (P.String)
getVersionVA =
  A.propertyGet "Version"
   []
   A.outString

getWindowHandleVA :: IVApplication a
 -> P.IO (P.Int)
getWindowHandleVA =
  A.propertyGet "WindowHandle"
   []
   A.outInt

getWindowsVA :: IVApplication a
 -> P.IO (IVWindows ())
getWindowsVA =
  A.propertyGet "Windows"
   []
   A.outIDispatch

getLanguageVA :: IVApplication a
 -> P.IO (P.Int)
getLanguageVA =
  A.propertyGet "Language"
   []
   A.outInt

getIsVisio16VA :: IVApplication a
 -> P.IO (P.Int)
getIsVisio16VA =
  A.propertyGet "IsVisio16"
   []
   A.outInt

getIsVisio32VA :: IVApplication a
 -> P.IO (P.Int)
getIsVisio32VA =
  A.propertyGet "IsVisio32"
   []
   A.outInt

getWindowHandle32VA :: IVApplication a
 -> P.IO (P.Int)
getWindowHandle32VA =
  A.propertyGet "WindowHandle32"
   []
   A.outInt

getInstanceHandleVA :: IVApplication a
 -> P.IO (P.Int)
getInstanceHandleVA =
  A.propertyGet "InstanceHandle"
   []
   A.outInt

getInstanceHandle32VA :: IVApplication a
 -> P.IO (P.Int)
getInstanceHandle32VA =
  A.propertyGet "InstanceHandle32"
   []
   A.outInt

getBuiltInMenusVA :: IVApplication a
 -> P.IO (IVUIObject ())
getBuiltInMenusVA =
  A.propertyGet "BuiltInMenus"
   []
   A.outIDispatch

getBuiltInToolbarsVA :: P.Int
 -> IVApplication a
 -> P.IO (IVUIObject ())
getBuiltInToolbarsVA fIgnored =
  A.propertyGet "BuiltInToolbars"
   [A.inInt fIgnored]
   A.outIDispatch

getCustomMenusVA :: IVApplication a
 -> P.IO (IVUIObject ())
getCustomMenusVA =
  A.propertyGet "CustomMenus"
   []
   A.outIDispatch

setCustomMenusVA :: IVUIObject a0
 -> IVApplication a
 -> P.IO ()
setCustomMenusVA menusObject =
  A.method0 "SetCustomMenus"
   [A.inIDispatch menusObject]

getCustomMenusFileVA :: IVApplication a
 -> P.IO (P.String)
getCustomMenusFileVA =
  A.propertyGet "CustomMenusFile"
   []
   A.outString

setCustomMenusFileVA :: P.String
 -> IVApplication a
 -> P.IO ()
setCustomMenusFileVA lpbstrRet =
  A.propertySet "CustomMenusFile"
   [A.inString lpbstrRet]

clearCustomMenusVA :: IVApplication a
 -> P.IO ()
clearCustomMenusVA =
  A.method0 "ClearCustomMenus"
   []

getCustomToolbarsVA :: IVApplication a
 -> P.IO (IVUIObject ())
getCustomToolbarsVA =
  A.propertyGet "CustomToolbars"
   []
   A.outIDispatch

setCustomToolbarsVA :: IVUIObject a0
 -> IVApplication a
 -> P.IO ()
setCustomToolbarsVA toolbarsObject =
  A.method0 "SetCustomToolbars"
   [A.inIDispatch toolbarsObject]

getCustomToolbarsFileVA :: IVApplication a
 -> P.IO (P.String)
getCustomToolbarsFileVA =
  A.propertyGet "CustomToolbarsFile"
   []
   A.outString

setCustomToolbarsFileVA :: P.String
 -> IVApplication a
 -> P.IO ()
setCustomToolbarsFileVA lpbstrRet =
  A.propertySet "CustomToolbarsFile"
   [A.inString lpbstrRet]

clearCustomToolbarsVA :: IVApplication a
 -> P.IO ()
clearCustomToolbarsVA =
  A.method0 "ClearCustomToolbars"
   []

getAddonPathsVA :: IVApplication a
 -> P.IO (P.String)
getAddonPathsVA =
  A.propertyGet "AddonPaths"
   []
   A.outString

setAddonPathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setAddonPathsVA lpbstrRet =
  A.propertySet "AddonPaths"
   [A.inString lpbstrRet]

getDrawingPathsVA :: IVApplication a
 -> P.IO (P.String)
getDrawingPathsVA =
  A.propertyGet "DrawingPaths"
   []
   A.outString

setDrawingPathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setDrawingPathsVA lpbstrRet =
  A.propertySet "DrawingPaths"
   [A.inString lpbstrRet]

getFilterPathsVA :: IVApplication a
 -> P.IO (P.String)
getFilterPathsVA =
  A.propertyGet "FilterPaths"
   []
   A.outString

setFilterPathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setFilterPathsVA lpbstrRet =
  A.propertySet "FilterPaths"
   [A.inString lpbstrRet]

getHelpPathsVA :: IVApplication a
 -> P.IO (P.String)
getHelpPathsVA =
  A.propertyGet "HelpPaths"
   []
   A.outString

setHelpPathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setHelpPathsVA lpbstrRet =
  A.propertySet "HelpPaths"
   [A.inString lpbstrRet]

getStartupPathsVA :: IVApplication a
 -> P.IO (P.String)
getStartupPathsVA =
  A.propertyGet "StartupPaths"
   []
   A.outString

setStartupPathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setStartupPathsVA lpbstrRet =
  A.propertySet "StartupPaths"
   [A.inString lpbstrRet]

getStencilPathsVA :: IVApplication a
 -> P.IO (P.String)
getStencilPathsVA =
  A.propertyGet "StencilPaths"
   []
   A.outString

setStencilPathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setStencilPathsVA lpbstrRet =
  A.propertySet "StencilPaths"
   [A.inString lpbstrRet]

getTemplatePathsVA :: IVApplication a
 -> P.IO (P.String)
getTemplatePathsVA =
  A.propertyGet "TemplatePaths"
   []
   A.outString

setTemplatePathsVA :: P.String
 -> IVApplication a
 -> P.IO ()
setTemplatePathsVA lpbstrRet =
  A.propertySet "TemplatePaths"
   [A.inString lpbstrRet]

getUserNameVA :: IVApplication a
 -> P.IO (P.String)
getUserNameVA =
  A.propertyGet "UserName"
   []
   A.outString

setUserNameVA :: P.String
 -> IVApplication a
 -> P.IO ()
setUserNameVA lpbstrRet =
  A.propertySet "UserName"
   [A.inString lpbstrRet]

getPromptForSummaryVA :: IVApplication a
 -> P.IO (P.Int)
getPromptForSummaryVA =
  A.propertyGet "PromptForSummary"
   []
   A.outInt

setPromptForSummaryVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setPromptForSummaryVA lpi2Ret =
  A.propertySet "PromptForSummary"
   [A.inInt lpi2Ret]

getAddonsVA :: IVApplication a
 -> P.IO (IVAddons ())
getAddonsVA =
  A.propertyGet "Addons"
   []
   A.outIDispatch

saveWorkspaceAs :: P.String
 -> IVApplication a
 -> P.IO ()
saveWorkspaceAs fileName =
  A.method0 "SaveWorkspaceAs"
   [A.inString fileName]

doCmd :: P.Int
 -> IVApplication a
 -> P.IO ()
doCmd commandID =
  A.method0 "DoCmd"
   [A.inInt commandID]

getProfileNameVA :: IVApplication a
 -> P.IO (P.String)
getProfileNameVA =
  A.propertyGet "ProfileName"
   []
   A.outString

getEventInfoVA :: P.Int
 -> IVApplication a
 -> P.IO (P.String)
getEventInfoVA reservedPass0 =
  A.propertyGet "EventInfo"
   [A.inInt reservedPass0]
   A.outString

getEventListVA :: IVApplication a
 -> P.IO (IVEventList ())
getEventListVA =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVA :: IVApplication a
 -> P.IO (P.Int)
getPersistsEventsVA =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getActiveVA :: IVApplication a
 -> P.IO (P.Int)
getActiveVA =
  A.propertyGet "Active"
   []
   A.outInt

getDeferRecalcVA :: IVApplication a
 -> P.IO (P.Int)
getDeferRecalcVA =
  A.propertyGet "DeferRecalc"
   []
   A.outInt

setDeferRecalcVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setDeferRecalcVA lpi2Ret =
  A.propertySet "DeferRecalc"
   [A.inInt lpi2Ret]

getAlertResponseVA :: IVApplication a
 -> P.IO (P.Int)
getAlertResponseVA =
  A.propertyGet "AlertResponse"
   []
   A.outInt

setAlertResponseVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setAlertResponseVA lpi2Ret =
  A.propertySet "AlertResponse"
   [A.inInt lpi2Ret]

getShowProgressVA :: IVApplication a
 -> P.IO (P.Int)
getShowProgressVA =
  A.propertyGet "ShowProgress"
   []
   A.outInt

setShowProgressVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setShowProgressVA lpi2Ret =
  A.propertySet "ShowProgress"
   [A.inInt lpi2Ret]

getVbeVA :: IVApplication a
 -> P.IO (A.IDispatch ())
getVbeVA =
  A.propertyGet "Vbe"
   []
   A.outIDispatch

getShowMenusVA :: IVApplication a
 -> P.IO (P.Int)
getShowMenusVA =
  A.propertyGet "ShowMenus"
   []
   A.outInt

setShowMenusVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setShowMenusVA lpi2Ret =
  A.propertySet "ShowMenus"
   [A.inInt lpi2Ret]

getToolbarStyleVA :: IVApplication a
 -> P.IO (P.Int)
getToolbarStyleVA =
  A.propertyGet "ToolbarStyle"
   []
   A.outInt

setToolbarStyleVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setToolbarStyleVA lpi2Ret =
  A.propertySet "ToolbarStyle"
   [A.inInt lpi2Ret]

getShowStatusBarVA :: IVApplication a
 -> P.IO (P.Int)
getShowStatusBarVA =
  A.propertyGet "ShowStatusBar"
   []
   A.outInt

setShowStatusBarVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setShowStatusBarVA lpi2Ret =
  A.propertySet "ShowStatusBar"
   [A.inInt lpi2Ret]

getEventsEnabledVA :: IVApplication a
 -> P.IO (P.Int)
getEventsEnabledVA =
  A.propertyGet "EventsEnabled"
   []
   A.outInt

setEventsEnabledVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setEventsEnabledVA lpi2Ret =
  A.propertySet "EventsEnabled"
   [A.inInt lpi2Ret]

formatResult :: (A.Variant a0, A.Variant a1, A.Variant a2)
   => a0
 -> a1
 -> a2
 -> P.String
 -> IVApplication a
 -> P.IO (P.String)
formatResult stringOrNumber unitsIn unitsOut format =
  A.function1 "FormatResult"
   [ A.inVariant stringOrNumber
   , A.inVariant unitsIn
   , A.inVariant unitsOut
   , A.inString format
   ]
   A.outString

convertResult :: (A.Variant a0, A.Variant a1, A.Variant a2)
   => a0
 -> a1
 -> a2
 -> IVApplication a
 -> P.IO (P.Double)
convertResult stringOrNumber unitsIn unitsOut =
  A.function1 "ConvertResult"
   [ A.inVariant stringOrNumber
   , A.inVariant unitsIn
   , A.inVariant unitsOut
   ]
   A.outDouble

getPathVA :: IVApplication a
 -> P.IO (P.String)
getPathVA =
  A.propertyGet "Path"
   []
   A.outString

enumDirectories :: P.String
 -> IVApplication a
 -> P.IO (SafeArray P.String)
enumDirectories pathsString =
  A.method1 "EnumDirectories"
   [A.inString pathsString]
   outSafeArray

getTraceFlagsVA :: IVApplication a
 -> P.IO (P.Int)
getTraceFlagsVA =
  A.propertyGet "TraceFlags"
   []
   A.outInt

setTraceFlagsVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setTraceFlagsVA lpi4Ret =
  A.propertySet "TraceFlags"
   [A.inInt lpi4Ret]

purgeUndo :: IVApplication a
 -> P.IO ()
purgeUndo =
  A.method0 "PurgeUndo"
   []

queueMarkerEvent :: P.String
 -> IVApplication a
 -> P.IO (P.Int)
queueMarkerEvent contextString =
  A.function1 "QueueMarkerEvent"
   [A.inString contextString]
   A.outInt

getShowToolbarVA :: IVApplication a
 -> P.IO (P.Int)
getShowToolbarVA =
  A.propertyGet "ShowToolbar"
   []
   A.outInt

setShowToolbarVA :: P.Int
 -> IVApplication a
 -> P.IO ()
setShowToolbarVA lpi2Ret =
  A.propertySet "ShowToolbar"
   [A.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVPage
-- 
-- --------------------------------------------------
data IVPage_ a = IVPage__
   
type IVPage a = A.IDispatch (IVPage_ a)
iidIVPage :: Com.IID (IVPage ())
iidIVPage = Com.mkIID "{000D0709-0000-0000-C000-000000000046}"

getDocumentVP :: IVPage a
 -> P.IO (IVDocument ())
getDocumentVP =
  A.propertyGet "Document"
   []
   A.outIDispatch

getApplicationVP :: IVPage a
 -> P.IO (IVApplication ())
getApplicationVP =
  A.propertyGet "Application"
   []
   A.outIDispatch

getStatVP :: IVPage a
 -> P.IO (P.Int)
getStatVP =
  A.propertyGet "Stat"
   []
   A.outInt

getBackgroundVP :: IVPage a
 -> P.IO (P.Int)
getBackgroundVP =
  A.propertyGet "Background"
   []
   A.outInt

setBackgroundVP :: P.Int
 -> IVPage a
 -> P.IO ()
setBackgroundVP lpi2Ret =
  A.propertySet "Background"
   [A.inInt lpi2Ret]

paste :: IVPage a
 -> P.IO ()
paste =
  A.method0 "Paste"
   []

pasteSpecial :: P.Int
 -> IVPage a
 -> P.IO ()
pasteSpecial format =
  A.method0 "PasteSpecial"
   [A.inInt format]

getObjectTypeVP :: IVPage a
 -> P.IO (P.Int)
getObjectTypeVP =
  A.propertyGet "ObjectType"
   []
   A.outInt

drawLine :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVPage a
 -> P.IO (IVShape ())
drawLine xLeft yTop xRight yBottom =
  A.function1 "DrawLine"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawRectangle :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVPage a
 -> P.IO (IVShape ())
drawRectangle xLeft yTop xRight yBottom =
  A.function1 "DrawRectangle"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawOval :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVPage a
 -> P.IO (IVShape ())
drawOval xLeft yTop xRight yBottom =
  A.function1 "DrawOval"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

getIndexVP :: IVPage a
 -> P.IO (P.Int)
getIndexVP =
  A.propertyGet "Index"
   []
   A.outInt

getNameVP :: IVPage a
 -> P.IO (P.String)
getNameVP =
  A.propertyGet "Name"
   []
   A.outString

setNameVP :: P.String
 -> IVPage a
 -> P.IO ()
setNameVP lpbstrRet =
  A.propertySet "Name"
   [A.inString lpbstrRet]

getShapesVP :: IVPage a
 -> P.IO (IVShapes ())
getShapesVP =
  A.propertyGet "Shapes"
   []
   A.outIDispatch

dropVP :: Com.IUnknown a0
 -> P.Double
 -> P.Double
 -> IVPage a
 -> P.IO (IVShape ())
dropVP objectToDrop xPos yPos =
  A.function1 "Drop"
   [ A.inIUnknown objectToDrop
   , A.inDouble xPos
   , A.inDouble yPos
   ]
   A.outIDispatch

addGuide :: P.Int
 -> P.Double
 -> P.Double
 -> IVPage a
 -> P.IO (IVShape ())
addGuide type0 xPos yPos =
  A.function1 "AddGuide"
   [ A.inInt type0
   , A.inDouble xPos
   , A.inDouble yPos
   ]
   A.outIDispatch

getBackPageAsObjVP :: IVPage a
 -> P.IO (IVPage ())
getBackPageAsObjVP =
  A.propertyGet "BackPageAsObj"
   []
   A.outIDispatch

setBackPageFromNameVP :: P.String
 -> IVPage a
 -> P.IO ()
setBackPageFromNameVP x0 =
  A.propertySet "BackPageFromName"
   [A.inString x0]

printVP :: IVPage a
 -> P.IO ()
printVP =
  A.method0 "Print"
   []

importVP :: P.String
 -> IVPage a
 -> P.IO (IVShape ())
importVP fileName =
  A.function1 "Import"
   [A.inString fileName]
   A.outIDispatch

export :: P.String
 -> IVPage a
 -> P.IO ()
export fileName =
  A.method0 "Export"
   [A.inString fileName]

getLayersVP :: IVPage a
 -> P.IO (IVLayers ())
getLayersVP =
  A.propertyGet "Layers"
   []
   A.outIDispatch

getPageSheetVP :: IVPage a
 -> P.IO (IVShape ())
getPageSheetVP =
  A.propertyGet "PageSheet"
   []
   A.outIDispatch

deleteVP :: P.Int
 -> IVPage a
 -> P.IO ()
deleteVP fRenumberPages =
  A.method0 "Delete"
   [A.inInt fRenumberPages]

centerDrawing :: IVPage a
 -> P.IO ()
centerDrawing =
  A.method0 "CenterDrawing"
   []

getEventListVP :: IVPage a
 -> P.IO (IVEventList ())
getEventListVP =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVP :: IVPage a
 -> P.IO (P.Int)
getPersistsEventsVP =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

drawSpline :: SafeArray P.Double
 -> P.Double
 -> P.Int
 -> IVPage a
 -> P.IO (IVShape ())
drawSpline xyArray tolerance flags =
  A.function1 "DrawSpline"
   [ inSafeArray xyArray
   , A.inDouble tolerance
   , A.inInt flags
   ]
   A.outIDispatch

drawBezier :: SafeArray P.Double
 -> P.Int
 -> P.Int
 -> IVPage a
 -> P.IO (IVShape ())
drawBezier xyArray degree flags =
  A.function1 "DrawBezier"
   [ inSafeArray xyArray
   , A.inInt degree
   , A.inInt flags
   ]
   A.outIDispatch

drawPolyline :: SafeArray P.Double
 -> P.Int
 -> IVPage a
 -> P.IO (IVShape ())
drawPolyline xyArray flags =
  A.function1 "DrawPolyline"
   [ inSafeArray xyArray
   , A.inInt flags
   ]
   A.outIDispatch

insertFromFile :: P.String
 -> P.Int
 -> IVPage a
 -> P.IO (IVShape ())
insertFromFile fileName flags =
  A.function1 "InsertFromFile"
   [ A.inString fileName
   , A.inInt flags
   ]
   A.outIDispatch

insertObject :: P.String
 -> P.Int
 -> IVPage a
 -> P.IO (IVShape ())
insertObject classOrProgID flags =
  A.function1 "InsertObject"
   [ A.inString classOrProgID
   , A.inInt flags
   ]
   A.outIDispatch

openDrawWindow :: IVPage a
 -> P.IO (IVWindow ())
openDrawWindow =
  A.function1 "OpenDrawWindow"
   []
   A.outIDispatch

dropMany :: SafeArray ()
 -> SafeArray P.Double
 -> IVPage a
 -> P.IO (SafeArray P.Int, P.Int)
dropMany objectsToInstance xyArray =
  A.function2 "DropMany"
   [ inSafeArray objectsToInstance
   , inSafeArray xyArray
   ]
   outSafeArray
   A.outInt

getFormulas :: SafeArray P.Int
 -> IVPage a
 -> P.IO (SafeArray ())
getFormulas sID_SRCStream =
  A.method1 "GetFormulas"
   [inSafeArray sID_SRCStream]
   outSafeArray

getResults :: SafeArray P.Int
 -> P.Int
 -> SafeArray ()
 -> IVPage a
 -> P.IO (SafeArray ())
getResults sID_SRCStream flags unitsNamesOrCodes =
  A.method1 "GetResults"
   [ inSafeArray sID_SRCStream
   , A.inInt flags
   , inSafeArray unitsNamesOrCodes
   ]
   outSafeArray

setFormulas :: SafeArray P.Int
 -> SafeArray ()
 -> P.Int
 -> IVPage a
 -> P.IO (P.Int)
setFormulas sID_SRCStream formulaArray flags =
  A.function1 "SetFormulas"
   [ inSafeArray sID_SRCStream
   , inSafeArray formulaArray
   , A.inInt flags
   ]
   A.outInt

setResults :: SafeArray P.Int
 -> SafeArray ()
 -> SafeArray ()
 -> P.Int
 -> IVPage a
 -> P.IO (P.Int)
setResults sID_SRCStream unitsNamesOrCodes resultArray flags =
  A.function1 "SetResults"
   [ inSafeArray sID_SRCStream
   , inSafeArray unitsNamesOrCodes
   , inSafeArray resultArray
   , A.inInt flags
   ]
   A.outInt

getConnectsVP :: IVPage a
 -> P.IO (IVConnects ())
getConnectsVP =
  A.propertyGet "Connects"
   []
   A.outIDispatch

getBackPageVP :: (A.Variant a0)
   => IVPage a
 -> P.IO (a0)
getBackPageVP =
  A.propertyGet "BackPage"
   []
   A.outVariant

setBackPageVP :: (A.Variant a0)
   => a0
 -> IVPage a
 -> P.IO ()
setBackPageVP lpobjRet =
  A.propertySet "BackPage"
   [A.inVariant lpobjRet]

layout :: IVPage a
 -> P.IO ()
layout =
  A.method0 "Layout"
   []

boundingBox :: P.Int
 -> IVPage a
 -> P.IO (P.Double, P.Double, P.Double, P.Double)
boundingBox flags =
  A.method4 "BoundingBox"
   [A.inInt flags]
   A.outDouble
   A.outDouble
   A.outDouble
   A.outDouble

getIDVP :: IVPage a
 -> P.IO (P.Int)
getIDVP =
  A.propertyGet "ID"
   []
   A.outInt

getOLEObjectsVP :: IVPage a
 -> P.IO (IVOLEObjects ())
getOLEObjectsVP =
  A.propertyGet "OLEObjects"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVShape
-- 
-- --------------------------------------------------
data IVShape_ a = IVShape__
   
type IVShape a = A.IDispatch (IVShape_ a)
iidIVShape :: Com.IID (IVShape ())
iidIVShape = Com.mkIID "{000D070C-0000-0000-C000-000000000046}"

group :: IVShape a
 -> P.IO ()
group =
  A.method0 "Group"
   []

bringForward :: IVShape a
 -> P.IO ()
bringForward =
  A.method0 "BringForward"
   []

bringToFront :: IVShape a
 -> P.IO ()
bringToFront =
  A.method0 "BringToFront"
   []

convertToGroup :: IVShape a
 -> P.IO ()
convertToGroup =
  A.method0 "ConvertToGroup"
   []

flipHorizontal :: IVShape a
 -> P.IO ()
flipHorizontal =
  A.method0 "FlipHorizontal"
   []

flipVertical :: IVShape a
 -> P.IO ()
flipVertical =
  A.method0 "FlipVertical"
   []

reverseEnds :: IVShape a
 -> P.IO ()
reverseEnds =
  A.method0 "ReverseEnds"
   []

sendBackward :: IVShape a
 -> P.IO ()
sendBackward =
  A.method0 "SendBackward"
   []

sendToBack :: IVShape a
 -> P.IO ()
sendToBack =
  A.method0 "SendToBack"
   []

rotate90 :: IVShape a
 -> P.IO ()
rotate90 =
  A.method0 "Rotate90"
   []

ungroup :: IVShape a
 -> P.IO ()
ungroup =
  A.method0 "Ungroup"
   []

getDocumentVS :: IVShape a
 -> P.IO (IVDocument ())
getDocumentVS =
  A.propertyGet "Document"
   []
   A.outIDispatch

getParentVS :: IVShape a
 -> P.IO (A.IDispatch ())
getParentVS =
  A.propertyGet "Parent"
   []
   A.outIDispatch

getApplicationVS :: IVShape a
 -> P.IO (IVApplication ())
getApplicationVS =
  A.propertyGet "Application"
   []
   A.outIDispatch

getStatVS :: IVShape a
 -> P.IO (P.Int)
getStatVS =
  A.propertyGet "Stat"
   []
   A.outInt

getMasterVS :: IVShape a
 -> P.IO (IVMaster ())
getMasterVS =
  A.propertyGet "Master"
   []
   A.outIDispatch

getTypeVS :: IVShape a
 -> P.IO (P.Int)
getTypeVS =
  A.propertyGet "Type"
   []
   A.outInt

getObjectTypeVS :: IVShape a
 -> P.IO (P.Int)
getObjectTypeVS =
  A.propertyGet "ObjectType"
   []
   A.outInt

getCellsVS :: P.String
 -> IVShape a
 -> P.IO (IVCell ())
getCellsVS cellName =
  A.propertyGet "Cells"
   [A.inString cellName]
   A.outIDispatch

getCellsSRCVS :: P.Int
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (IVCell ())
getCellsSRCVS section row column =
  A.propertyGet "CellsSRC"
   [ A.inInt section
   , A.inInt row
   , A.inInt column
   ]
   A.outIDispatch

getShapesVS :: IVShape a
 -> P.IO (IVShapes ())
getShapesVS =
  A.propertyGet "Shapes"
   []
   A.outIDispatch

getData1VS :: IVShape a
 -> P.IO (P.String)
getData1VS =
  A.propertyGet "Data1"
   []
   A.outString

setData1VS :: P.String
 -> IVShape a
 -> P.IO ()
setData1VS lpbstrRet =
  A.propertySet "Data1"
   [A.inString lpbstrRet]

getData2VS :: IVShape a
 -> P.IO (P.String)
getData2VS =
  A.propertyGet "Data2"
   []
   A.outString

setData2VS :: P.String
 -> IVShape a
 -> P.IO ()
setData2VS lpbstrRet =
  A.propertySet "Data2"
   [A.inString lpbstrRet]

getData3VS :: IVShape a
 -> P.IO (P.String)
getData3VS =
  A.propertyGet "Data3"
   []
   A.outString

setData3VS :: P.String
 -> IVShape a
 -> P.IO ()
setData3VS lpbstrRet =
  A.propertySet "Data3"
   [A.inString lpbstrRet]

getHelpVS :: IVShape a
 -> P.IO (P.String)
getHelpVS =
  A.propertyGet "Help"
   []
   A.outString

setHelpVS :: P.String
 -> IVShape a
 -> P.IO ()
setHelpVS lpbstrRet =
  A.propertySet "Help"
   [A.inString lpbstrRet]

getNameIDVS :: IVShape a
 -> P.IO (P.String)
getNameIDVS =
  A.propertyGet "NameID"
   []
   A.outString

getNameVS :: IVShape a
 -> P.IO (P.String)
getNameVS =
  A.propertyGet "Name"
   []
   A.outString

setNameVS :: P.String
 -> IVShape a
 -> P.IO ()
setNameVS lpbstrRet =
  A.propertySet "Name"
   [A.inString lpbstrRet]

getTextVS :: IVShape a
 -> P.IO (P.String)
getTextVS =
  A.propertyGet "Text"
   []
   A.outString

setTextVS :: P.String
 -> IVShape a
 -> P.IO ()
setTextVS lpbstrRet =
  A.propertySet "Text"
   [A.inString lpbstrRet]

getCharCountVS :: IVShape a
 -> P.IO (P.Int)
getCharCountVS =
  A.propertyGet "CharCount"
   []
   A.outInt

getCharactersVS :: IVShape a
 -> P.IO (IVCharacters ())
getCharactersVS =
  A.propertyGet "Characters"
   []
   A.outIDispatch

copy :: IVShape a
 -> P.IO ()
copy =
  A.method0 "Copy"
   []

cut :: IVShape a
 -> P.IO ()
cut =
  A.method0 "Cut"
   []

deleteVS :: IVShape a
 -> P.IO ()
deleteVS =
  A.method0 "Delete"
   []

duplicate :: IVShape a
 -> P.IO ()
duplicate =
  A.method0 "Duplicate"
   []

dropVS :: Com.IUnknown a0
 -> P.Double
 -> P.Double
 -> IVShape a
 -> P.IO (IVShape ())
dropVS objectToDrop xPos yPos =
  A.function1 "Drop"
   [ A.inIUnknown objectToDrop
   , A.inDouble xPos
   , A.inDouble yPos
   ]
   A.outIDispatch

getOneDVS :: IVShape a
 -> P.IO (P.Int)
getOneDVS =
  A.propertyGet "OneD"
   []
   A.outInt

setOneDVS :: P.Int
 -> IVShape a
 -> P.IO ()
setOneDVS lpi2Ret =
  A.propertySet "OneD"
   [A.inInt lpi2Ret]

getGeometryCountVS :: IVShape a
 -> P.IO (P.Int)
getGeometryCountVS =
  A.propertyGet "GeometryCount"
   []
   A.outInt

getRowCountVS :: P.Int
 -> IVShape a
 -> P.IO (P.Int)
getRowCountVS section =
  A.propertyGet "RowCount"
   [A.inInt section]
   A.outInt

addSection :: P.Int
 -> IVShape a
 -> P.IO (P.Int)
addSection section =
  A.function1 "AddSection"
   [A.inInt section]
   A.outInt

deleteSection :: P.Int
 -> IVShape a
 -> P.IO ()
deleteSection section =
  A.method0 "DeleteSection"
   [A.inInt section]

addRow :: P.Int
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
addRow section row rowTag =
  A.function1 "AddRow"
   [ A.inInt section
   , A.inInt row
   , A.inInt rowTag
   ]
   A.outInt

deleteRow :: P.Int
 -> P.Int
 -> IVShape a
 -> P.IO ()
deleteRow section row =
  A.method0 "DeleteRow"
   [ A.inInt section
   , A.inInt row
   ]

getRowsCellCountVS :: P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
getRowsCellCountVS section row =
  A.propertyGet "RowsCellCount"
   [ A.inInt section
   , A.inInt row
   ]
   A.outInt

getRowTypeVS :: P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
getRowTypeVS section row =
  A.propertyGet "RowType"
   [ A.inInt section
   , A.inInt row
   ]
   A.outInt

setRowTypeVS :: P.Int
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO ()
setRowTypeVS section row lpi2Ret =
  A.propertySet "RowType"
   [ A.inInt section
   , A.inInt row
   , A.inInt lpi2Ret
   ]

setCenter :: P.Double
 -> P.Double
 -> IVShape a
 -> P.IO ()
setCenter xPos yPos =
  A.method0 "SetCenter"
   [ A.inDouble xPos
   , A.inDouble yPos
   ]

setBegin :: P.Double
 -> P.Double
 -> IVShape a
 -> P.IO ()
setBegin xPos yPos =
  A.method0 "SetBegin"
   [ A.inDouble xPos
   , A.inDouble yPos
   ]

setEnd :: P.Double
 -> P.Double
 -> IVShape a
 -> P.IO ()
setEnd xPos yPos =
  A.method0 "SetEnd"
   [ A.inDouble xPos
   , A.inDouble yPos
   ]

getConnectsVS :: IVShape a
 -> P.IO (IVConnects ())
getConnectsVS =
  A.propertyGet "Connects"
   []
   A.outIDispatch

getIndexVS :: IVShape a
 -> P.IO (P.Int)
getIndexVS =
  A.propertyGet "Index"
   []
   A.outInt

getStyleVS :: IVShape a
 -> P.IO (P.String)
getStyleVS =
  A.propertyGet "Style"
   []
   A.outString

setStyleVS :: P.String
 -> IVShape a
 -> P.IO ()
setStyleVS lpbstrRet =
  A.propertySet "Style"
   [A.inString lpbstrRet]

setStyleKeepFmtVS :: P.String
 -> IVShape a
 -> P.IO ()
setStyleKeepFmtVS x0 =
  A.propertySet "StyleKeepFmt"
   [A.inString x0]

getLineStyleVS :: IVShape a
 -> P.IO (P.String)
getLineStyleVS =
  A.propertyGet "LineStyle"
   []
   A.outString

setLineStyleVS :: P.String
 -> IVShape a
 -> P.IO ()
setLineStyleVS lpbstrRet =
  A.propertySet "LineStyle"
   [A.inString lpbstrRet]

setLineStyleKeepFmtVS :: P.String
 -> IVShape a
 -> P.IO ()
setLineStyleKeepFmtVS x0 =
  A.propertySet "LineStyleKeepFmt"
   [A.inString x0]

getFillStyleVS :: IVShape a
 -> P.IO (P.String)
getFillStyleVS =
  A.propertyGet "FillStyle"
   []
   A.outString

setFillStyleVS :: P.String
 -> IVShape a
 -> P.IO ()
setFillStyleVS lpbstrRet =
  A.propertySet "FillStyle"
   [A.inString lpbstrRet]

setFillStyleKeepFmtVS :: P.String
 -> IVShape a
 -> P.IO ()
setFillStyleKeepFmtVS x0 =
  A.propertySet "FillStyleKeepFmt"
   [A.inString x0]

getTextStyleVS :: IVShape a
 -> P.IO (P.String)
getTextStyleVS =
  A.propertyGet "TextStyle"
   []
   A.outString

setTextStyleVS :: P.String
 -> IVShape a
 -> P.IO ()
setTextStyleVS lpbstrRet =
  A.propertySet "TextStyle"
   [A.inString lpbstrRet]

setTextStyleKeepFmtVS :: P.String
 -> IVShape a
 -> P.IO ()
setTextStyleKeepFmtVS x0 =
  A.propertySet "TextStyleKeepFmt"
   [A.inString x0]

exportVS :: P.String
 -> IVShape a
 -> P.IO ()
exportVS fileName =
  A.method0 "Export"
   [A.inString fileName]

getAreaIUVS :: IVShape a
 -> P.IO (P.Double)
getAreaIUVS =
  A.propertyGet "AreaIU"
   []
   A.outDouble

getLengthIUVS :: IVShape a
 -> P.IO (P.Double)
getLengthIUVS =
  A.propertyGet "LengthIU"
   []
   A.outDouble

getGeomExIfVS :: P.Int
 -> P.Double
 -> IVShape a
 -> P.IO (Com.IUnknown ())
getGeomExIfVS fFill lineRes =
  A.propertyGet "GeomExIf"
   [ A.inInt fFill
   , A.inDouble lineRes
   ]
   A.outIUnknown

getUniqueIDVS :: P.Int
 -> IVShape a
 -> P.IO (P.String)
getUniqueIDVS fUniqueID =
  A.propertyGet "UniqueID"
   [A.inInt fUniqueID]
   A.outString

getContainingPageVS :: IVShape a
 -> P.IO (IVPage ())
getContainingPageVS =
  A.propertyGet "ContainingPage"
   []
   A.outIDispatch

getContainingMasterVS :: IVShape a
 -> P.IO (IVMaster ())
getContainingMasterVS =
  A.propertyGet "ContainingMaster"
   []
   A.outIDispatch

getContainingShapeVS :: IVShape a
 -> P.IO (IVShape ())
getContainingShapeVS =
  A.propertyGet "ContainingShape"
   []
   A.outIDispatch

getSectionExistsVS :: P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
getSectionExistsVS section fLocalExists =
  A.propertyGet "SectionExists"
   [ A.inInt section
   , A.inInt fLocalExists
   ]
   A.outInt

getRowExistsVS :: P.Int
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
getRowExistsVS section row fLocalExists =
  A.propertyGet "RowExists"
   [ A.inInt section
   , A.inInt row
   , A.inInt fLocalExists
   ]
   A.outInt

getCellExistsVS :: P.String
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
getCellExistsVS cellName fLocalExists =
  A.propertyGet "CellExists"
   [ A.inString cellName
   , A.inInt fLocalExists
   ]
   A.outInt

getCellsSRCExistsVS :: P.Int
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
getCellsSRCExistsVS section row column fLocalExists =
  A.propertyGet "CellsSRCExists"
   [ A.inInt section
   , A.inInt row
   , A.inInt column
   , A.inInt fLocalExists
   ]
   A.outInt

getLayerCountVS :: IVShape a
 -> P.IO (P.Int)
getLayerCountVS =
  A.propertyGet "LayerCount"
   []
   A.outInt

getLayerVS :: P.Int
 -> IVShape a
 -> P.IO (IVLayer ())
getLayerVS index =
  A.propertyGet "Layer"
   [A.inInt index]
   A.outIDispatch

addNamedRow :: P.Int
 -> P.String
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
addNamedRow section rowName rowTag =
  A.function1 "AddNamedRow"
   [ A.inInt section
   , A.inString rowName
   , A.inInt rowTag
   ]
   A.outInt

addRows :: P.Int
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
addRows section row rowTag rowCount =
  A.function1 "AddRows"
   [ A.inInt section
   , A.inInt row
   , A.inInt rowTag
   , A.inInt rowCount
   ]
   A.outInt

getEventListVS :: IVShape a
 -> P.IO (IVEventList ())
getEventListVS =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVS :: IVShape a
 -> P.IO (P.Int)
getPersistsEventsVS =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

drawLineVS :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVShape a
 -> P.IO (IVShape ())
drawLineVS xLeft yTop xRight yBottom =
  A.function1 "DrawLine"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawRectangleVS :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVShape a
 -> P.IO (IVShape ())
drawRectangleVS xLeft yTop xRight yBottom =
  A.function1 "DrawRectangle"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawOvalVS :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVShape a
 -> P.IO (IVShape ())
drawOvalVS xLeft yTop xRight yBottom =
  A.function1 "DrawOval"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawSplineVS :: SafeArray P.Double
 -> P.Double
 -> P.Int
 -> IVShape a
 -> P.IO (IVShape ())
drawSplineVS xyArray tolerance flags =
  A.function1 "DrawSpline"
   [ inSafeArray xyArray
   , A.inDouble tolerance
   , A.inInt flags
   ]
   A.outIDispatch

drawBezierVS :: SafeArray P.Double
 -> P.Int
 -> P.Int
 -> IVShape a
 -> P.IO (IVShape ())
drawBezierVS xyArray degree flags =
  A.function1 "DrawBezier"
   [ inSafeArray xyArray
   , A.inInt degree
   , A.inInt flags
   ]
   A.outIDispatch

drawPolylineVS :: SafeArray P.Double
 -> P.Int
 -> IVShape a
 -> P.IO (IVShape ())
drawPolylineVS xyArray flags =
  A.function1 "DrawPolyline"
   [ inSafeArray xyArray
   , A.inInt flags
   ]
   A.outIDispatch

fitCurve :: P.Double
 -> P.Int
 -> IVShape a
 -> P.IO ()
fitCurve tolerance flags =
  A.method0 "FitCurve"
   [ A.inDouble tolerance
   , A.inInt flags
   ]

importVS :: P.String
 -> IVShape a
 -> P.IO (IVShape ())
importVS fileName =
  A.function1 "Import"
   [A.inString fileName]
   A.outIDispatch

centerDrawingVS :: IVShape a
 -> P.IO ()
centerDrawingVS =
  A.method0 "CenterDrawing"
   []

insertFromFileVS :: P.String
 -> P.Int
 -> IVShape a
 -> P.IO (IVShape ())
insertFromFileVS fileName flags =
  A.function1 "InsertFromFile"
   [ A.inString fileName
   , A.inInt flags
   ]
   A.outIDispatch

insertObjectVS :: P.String
 -> P.Int
 -> IVShape a
 -> P.IO (IVShape ())
insertObjectVS classOrProgID flags =
  A.function1 "InsertObject"
   [ A.inString classOrProgID
   , A.inInt flags
   ]
   A.outIDispatch

getClassIDVS :: IVShape a
 -> P.IO (P.String)
getClassIDVS =
  A.propertyGet "ClassID"
   []
   A.outString

getForeignTypeVS :: IVShape a
 -> P.IO (P.Int)
getForeignTypeVS =
  A.propertyGet "ForeignType"
   []
   A.outInt

getObjectVS :: IVShape a
 -> P.IO (A.IDispatch ())
getObjectVS =
  A.propertyGet "Object"
   []
   A.outIDispatch

openDrawWindowVS :: IVShape a
 -> P.IO (IVWindow ())
openDrawWindowVS =
  A.function1 "OpenDrawWindow"
   []
   A.outIDispatch

openSheetWindow :: IVShape a
 -> P.IO (IVWindow ())
openSheetWindow =
  A.function1 "OpenSheetWindow"
   []
   A.outIDispatch

getIDVS :: IVShape a
 -> P.IO (P.Int)
getIDVS =
  A.propertyGet "ID"
   []
   A.outInt

dropManyVS :: SafeArray ()
 -> SafeArray P.Double
 -> IVShape a
 -> P.IO (SafeArray P.Int, P.Int)
dropManyVS objectsToInstance xyArray =
  A.function2 "DropMany"
   [ inSafeArray objectsToInstance
   , inSafeArray xyArray
   ]
   outSafeArray
   A.outInt

getFormulasVS :: SafeArray P.Int
 -> IVShape a
 -> P.IO (SafeArray ())
getFormulasVS sRCStream =
  A.method1 "GetFormulas"
   [inSafeArray sRCStream]
   outSafeArray

getResultsVS :: SafeArray P.Int
 -> P.Int
 -> SafeArray ()
 -> IVShape a
 -> P.IO (SafeArray ())
getResultsVS sRCStream flags unitsNamesOrCodes =
  A.method1 "GetResults"
   [ inSafeArray sRCStream
   , A.inInt flags
   , inSafeArray unitsNamesOrCodes
   ]
   outSafeArray

setFormulasVS :: SafeArray P.Int
 -> SafeArray ()
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
setFormulasVS sRCStream formulaArray flags =
  A.function1 "SetFormulas"
   [ inSafeArray sRCStream
   , inSafeArray formulaArray
   , A.inInt flags
   ]
   A.outInt

setResultsVS :: SafeArray P.Int
 -> SafeArray ()
 -> SafeArray ()
 -> P.Int
 -> IVShape a
 -> P.IO (P.Int)
setResultsVS sRCStream unitsNamesOrCodes resultArray flags =
  A.function1 "SetResults"
   [ inSafeArray sRCStream
   , inSafeArray unitsNamesOrCodes
   , inSafeArray resultArray
   , A.inInt flags
   ]
   A.outInt

getFromConnectsVS :: IVShape a
 -> P.IO (IVConnects ())
getFromConnectsVS =
  A.propertyGet "FromConnects"
   []
   A.outIDispatch

layoutVS :: IVShape a
 -> P.IO ()
layoutVS =
  A.method0 "Layout"
   []

boundingBoxVS :: P.Int
 -> IVShape a
 -> P.IO (P.Double, P.Double, P.Double, P.Double)
boundingBoxVS flags =
  A.method4 "BoundingBox"
   [A.inInt flags]
   A.outDouble
   A.outDouble
   A.outDouble
   A.outDouble

hitTest :: P.Double
 -> P.Double
 -> P.Double
 -> IVShape a
 -> P.IO (P.Int)
hitTest xPos yPos tolerance =
  A.function1 "HitTest"
   [ A.inDouble xPos
   , A.inDouble yPos
   , A.inDouble tolerance
   ]
   A.outInt

getHyperlinkVS :: IVShape a
 -> P.IO (IVHyperlink ())
getHyperlinkVS =
  A.propertyGet "Hyperlink"
   []
   A.outIDispatch

getProgIDVS :: IVShape a
 -> P.IO (P.String)
getProgIDVS =
  A.propertyGet "ProgID"
   []
   A.outString

getObjectIsInheritedVS :: IVShape a
 -> P.IO (P.Int)
getObjectIsInheritedVS =
  A.propertyGet "ObjectIsInherited"
   []
   A.outInt

getPathsVS :: IVShape a
 -> P.IO (IVPaths ())
getPathsVS =
  A.propertyGet "Paths"
   []
   A.outIDispatch

getPathsLocalVS :: IVShape a
 -> P.IO (IVPaths ())
getPathsLocalVS =
  A.propertyGet "PathsLocal"
   []
   A.outIDispatch

addHyperlink :: IVShape a
 -> P.IO (IVHyperlink ())
addHyperlink =
  A.function1 "AddHyperlink"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMaster
-- 
-- --------------------------------------------------
data IVMaster_ a = IVMaster__
   
type IVMaster a = A.IDispatch (IVMaster_ a)
iidIVMaster :: Com.IID (IVMaster ())
iidIVMaster = Com.mkIID "{000D0707-0000-0000-C000-000000000046}"

getDocumentVM :: IVMaster a
 -> P.IO (IVDocument ())
getDocumentVM =
  A.propertyGet "Document"
   []
   A.outIDispatch

getPromptVM :: IVMaster a
 -> P.IO (P.String)
getPromptVM =
  A.propertyGet "Prompt"
   []
   A.outString

setPromptVM :: P.String
 -> IVMaster a
 -> P.IO ()
setPromptVM lpbstrRet =
  A.propertySet "Prompt"
   [A.inString lpbstrRet]

getAlignNameVM :: IVMaster a
 -> P.IO (P.Int)
getAlignNameVM =
  A.propertyGet "AlignName"
   []
   A.outInt

setAlignNameVM :: P.Int
 -> IVMaster a
 -> P.IO ()
setAlignNameVM lpi2Ret =
  A.propertySet "AlignName"
   [A.inInt lpi2Ret]

getIconSizeVM :: IVMaster a
 -> P.IO (P.Int)
getIconSizeVM =
  A.propertyGet "IconSize"
   []
   A.outInt

setIconSizeVM :: P.Int
 -> IVMaster a
 -> P.IO ()
setIconSizeVM lpi2Ret =
  A.propertySet "IconSize"
   [A.inInt lpi2Ret]

getIconUpdateVM :: IVMaster a
 -> P.IO (P.Int)
getIconUpdateVM =
  A.propertyGet "IconUpdate"
   []
   A.outInt

setIconUpdateVM :: P.Int
 -> IVMaster a
 -> P.IO ()
setIconUpdateVM lpi2Ret =
  A.propertySet "IconUpdate"
   [A.inInt lpi2Ret]

getApplicationVM :: IVMaster a
 -> P.IO (IVApplication ())
getApplicationVM =
  A.propertyGet "Application"
   []
   A.outIDispatch

getStatVM :: IVMaster a
 -> P.IO (P.Int)
getStatVM =
  A.propertyGet "Stat"
   []
   A.outInt

getObjectTypeVM :: IVMaster a
 -> P.IO (P.Int)
getObjectTypeVM =
  A.propertyGet "ObjectType"
   []
   A.outInt

getNameVM :: IVMaster a
 -> P.IO (P.String)
getNameVM =
  A.propertyGet "Name"
   []
   A.outString

setNameVM :: P.String
 -> IVMaster a
 -> P.IO ()
setNameVM lpbstrRet =
  A.propertySet "Name"
   [A.inString lpbstrRet]

getShapesVM :: IVMaster a
 -> P.IO (IVShapes ())
getShapesVM =
  A.propertyGet "Shapes"
   []
   A.outIDispatch

indexVM :: IVMaster a
 -> P.IO (P.Int)
indexVM =
  A.propertyGet "Index"
   []
   A.outInt

getOneDVM :: IVMaster a
 -> P.IO (P.Int)
getOneDVM =
  A.propertyGet "OneD"
   []
   A.outInt

deleteVM0 :: IVMaster a
 -> P.IO ()
deleteVM0 =
  A.method0 "Delete"
   []

getUniqueIDVM :: IVMaster a
 -> P.IO (P.String)
getUniqueIDVM =
  A.propertyGet "UniqueID"
   []
   A.outString

getLayersVM :: IVMaster a
 -> P.IO (IVLayers ())
getLayersVM =
  A.propertyGet "Layers"
   []
   A.outIDispatch

getPageSheetVM :: IVMaster a
 -> P.IO (IVShape ())
getPageSheetVM =
  A.propertyGet "PageSheet"
   []
   A.outIDispatch

dropVM :: Com.IUnknown a0
 -> P.Double
 -> P.Double
 -> IVMaster a
 -> P.IO (IVShape ())
dropVM objectToDrop xPos yPos =
  A.function1 "Drop"
   [ A.inIUnknown objectToDrop
   , A.inDouble xPos
   , A.inDouble yPos
   ]
   A.outIDispatch

centerDrawingVM :: IVMaster a
 -> P.IO ()
centerDrawingVM =
  A.method0 "CenterDrawing"
   []

getEventListVM :: IVMaster a
 -> P.IO (IVEventList ())
getEventListVM =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVM :: IVMaster a
 -> P.IO (P.Int)
getPersistsEventsVM =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

drawLineVM :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVMaster a
 -> P.IO (IVShape ())
drawLineVM xLeft yTop xRight yBottom =
  A.function1 "DrawLine"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawRectangleVM :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVMaster a
 -> P.IO (IVShape ())
drawRectangleVM xLeft yTop xRight yBottom =
  A.function1 "DrawRectangle"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawOvalVM :: P.Double
 -> P.Double
 -> P.Double
 -> P.Double
 -> IVMaster a
 -> P.IO (IVShape ())
drawOvalVM xLeft yTop xRight yBottom =
  A.function1 "DrawOval"
   [ A.inDouble xLeft
   , A.inDouble yTop
   , A.inDouble xRight
   , A.inDouble yBottom
   ]
   A.outIDispatch

drawSplineVM :: SafeArray P.Double
 -> P.Double
 -> P.Int
 -> IVMaster a
 -> P.IO (IVShape ())
drawSplineVM xyArray tolerance flags =
  A.function1 "DrawSpline"
   [ inSafeArray xyArray
   , A.inDouble tolerance
   , A.inInt flags
   ]
   A.outIDispatch

drawBezierVM :: SafeArray P.Double
 -> P.Int
 -> P.Int
 -> IVMaster a
 -> P.IO (IVShape ())
drawBezierVM xyArray degree flags =
  A.function1 "DrawBezier"
   [ inSafeArray xyArray
   , A.inInt degree
   , A.inInt flags
   ]
   A.outIDispatch

drawPolylineVM :: SafeArray P.Double
 -> P.Int
 -> IVMaster a
 -> P.IO (IVShape ())
drawPolylineVM xyArray flags =
  A.function1 "DrawPolyline"
   [ inSafeArray xyArray
   , A.inInt flags
   ]
   A.outIDispatch

importVM :: P.String
 -> IVMaster a
 -> P.IO (IVShape ())
importVM fileName =
  A.function1 "Import"
   [A.inString fileName]
   A.outIDispatch

exportVM :: P.String
 -> IVMaster a
 -> P.IO ()
exportVM fileName =
  A.method0 "Export"
   [A.inString fileName]

insertFromFileVM :: P.String
 -> P.Int
 -> IVMaster a
 -> P.IO (IVShape ())
insertFromFileVM fileName flags =
  A.function1 "InsertFromFile"
   [ A.inString fileName
   , A.inInt flags
   ]
   A.outIDispatch

insertObjectVM :: P.String
 -> P.Int
 -> IVMaster a
 -> P.IO (IVShape ())
insertObjectVM classOrProgID flags =
  A.function1 "InsertObject"
   [ A.inString classOrProgID
   , A.inInt flags
   ]
   A.outIDispatch

openDrawWindowVM :: IVMaster a
 -> P.IO (IVWindow ())
openDrawWindowVM =
  A.function1 "OpenDrawWindow"
   []
   A.outIDispatch

openIconWindow :: IVMaster a
 -> P.IO (IVWindow ())
openIconWindow =
  A.function1 "OpenIconWindow"
   []
   A.outIDispatch

open :: IVMaster a
 -> P.IO (IVMaster ())
open =
  A.function1 "Open"
   []
   A.outIDispatch

closeVM :: IVMaster a
 -> P.IO ()
closeVM =
  A.method0 "Close"
   []

dropManyVM :: SafeArray ()
 -> SafeArray P.Double
 -> IVMaster a
 -> P.IO (SafeArray P.Int, P.Int)
dropManyVM objectsToInstance xyArray =
  A.function2 "DropMany"
   [ inSafeArray objectsToInstance
   , inSafeArray xyArray
   ]
   outSafeArray
   A.outInt

getFormulasVM :: SafeArray P.Int
 -> IVMaster a
 -> P.IO (SafeArray ())
getFormulasVM sID_SRCStream =
  A.method1 "GetFormulas"
   [inSafeArray sID_SRCStream]
   outSafeArray

getResultsVM :: SafeArray P.Int
 -> P.Int
 -> SafeArray ()
 -> IVMaster a
 -> P.IO (SafeArray ())
getResultsVM sID_SRCStream flags unitsNamesOrCodes =
  A.method1 "GetResults"
   [ inSafeArray sID_SRCStream
   , A.inInt flags
   , inSafeArray unitsNamesOrCodes
   ]
   outSafeArray

setFormulasVM :: SafeArray P.Int
 -> SafeArray ()
 -> P.Int
 -> IVMaster a
 -> P.IO (P.Int)
setFormulasVM sID_SRCStream formulaArray flags =
  A.function1 "SetFormulas"
   [ inSafeArray sID_SRCStream
   , inSafeArray formulaArray
   , A.inInt flags
   ]
   A.outInt

setResultsVM :: SafeArray P.Int
 -> SafeArray ()
 -> SafeArray ()
 -> P.Int
 -> IVMaster a
 -> P.IO (P.Int)
setResultsVM sID_SRCStream unitsNamesOrCodes resultArray flags =
  A.function1 "SetResults"
   [ inSafeArray sID_SRCStream
   , inSafeArray unitsNamesOrCodes
   , inSafeArray resultArray
   , A.inInt flags
   ]
   A.outInt

getConnectsVM :: IVMaster a
 -> P.IO (IVConnects ())
getConnectsVM =
  A.propertyGet "Connects"
   []
   A.outIDispatch

importIcon :: P.String
 -> IVMaster a
 -> P.IO ()
importIcon fileName =
  A.method0 "ImportIcon"
   [A.inString fileName]

exportIcon :: P.String
 -> P.Int
 -> IVMaster a
 -> P.IO ()
exportIcon fileName flags =
  A.method0 "ExportIcon"
   [ A.inString fileName
   , A.inInt flags
   ]

layoutVM :: IVMaster a
 -> P.IO ()
layoutVM =
  A.method0 "Layout"
   []

boundingBoxVM :: P.Int
 -> IVMaster a
 -> P.IO (P.Double, P.Double, P.Double, P.Double)
boundingBoxVM flags =
  A.method4 "BoundingBox"
   [A.inInt flags]
   A.outDouble
   A.outDouble
   A.outDouble
   A.outDouble

getIDVM :: IVMaster a
 -> P.IO (P.Int)
getIDVM =
  A.propertyGet "ID"
   []
   A.outInt

getOLEObjectsVM :: IVMaster a
 -> P.IO (IVOLEObjects ())
getOLEObjectsVM =
  A.propertyGet "OLEObjects"
   []
   A.outIDispatch

getPatternFlagsVM :: IVMaster a
 -> P.IO (P.Int)
getPatternFlagsVM =
  A.propertyGet "PatternFlags"
   []
   A.outInt

setPatternFlagsVM :: P.Int
 -> IVMaster a
 -> P.IO ()
setPatternFlagsVM lpi2Ret =
  A.propertySet "PatternFlags"
   [A.inInt lpi2Ret]

getMatchByNameVM :: IVMaster a
 -> P.IO (P.Int)
getMatchByNameVM =
  A.propertyGet "MatchByName"
   []
   A.outInt

setMatchByNameVM :: P.Int
 -> IVMaster a
 -> P.IO ()
setMatchByNameVM lpi2Ret =
  A.propertySet "MatchByName"
   [A.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVShapes
-- 
-- --------------------------------------------------
data IVShapes_ a = IVShapes__
   
type IVShapes a = A.IDispatch (IVShapes_ a)
iidIVShapes :: Com.IID (IVShapes ())
iidIVShapes = Com.mkIID "{000D070D-0000-0000-C000-000000000046}"

applicationVS :: IVShapes a
 -> P.IO (IVApplication ())
applicationVS =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVS :: IVShapes a
 -> P.IO (P.Int)
objectTypeVS =
  A.propertyGet "ObjectType"
   []
   A.outInt

getItemVS :: (A.Variant a0)
   => a0
 -> IVShapes a
 -> P.IO (IVShape ())
getItemVS nameUIDOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameUIDOrIndex]
   A.outIDispatch

getCountVS :: IVShapes a
 -> P.IO (P.Int)
getCountVS =
  A.propertyGet "Count"
   []
   A.outInt

documentVS :: IVShapes a
 -> P.IO (IVDocument ())
documentVS =
  A.propertyGet "Document"
   []
   A.outIDispatch

containingPageVS :: IVShapes a
 -> P.IO (IVPage ())
containingPageVS =
  A.propertyGet "ContainingPage"
   []
   A.outIDispatch

containingMasterVS :: IVShapes a
 -> P.IO (IVMaster ())
containingMasterVS =
  A.propertyGet "ContainingMaster"
   []
   A.outIDispatch

containingShapeVS :: IVShapes a
 -> P.IO (IVShape ())
containingShapeVS =
  A.propertyGet "ContainingShape"
   []
   A.outIDispatch

centerDrawingVS0 :: IVShapes a
 -> P.IO ()
centerDrawingVS0 =
  A.method0 "CenterDrawing"
   []

statVS :: IVShapes a
 -> P.IO (P.Int)
statVS =
  A.propertyGet "Stat"
   []
   A.outInt

eventListVS :: IVShapes a
 -> P.IO (IVEventList ())
eventListVS =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVS :: IVShapes a
 -> P.IO (P.Int)
persistsEventsVS =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getItemFromIDVS :: P.Int
 -> IVShapes a
 -> P.IO (IVShape ())
getItemFromIDVS objectID =
  A.propertyGet "ItemFromID"
   [A.inInt objectID]
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVEventList
-- 
-- --------------------------------------------------
data IVEventList_ a = IVEventList__
   
type IVEventList a = A.IDispatch (IVEventList_ a)
iidIVEventList :: Com.IID (IVEventList ())
iidIVEventList = Com.mkIID "{000D071B-0000-0000-C000-000000000046}"

getApplicationVEL :: IVEventList a
 -> P.IO (IVApplication ())
getApplicationVEL =
  A.propertyGet "Application"
   []
   A.outIDispatch

getObjectTypeVEL :: IVEventList a
 -> P.IO (P.Int)
getObjectTypeVEL =
  A.propertyGet "ObjectType"
   []
   A.outInt

getItemVEL :: P.Int
 -> IVEventList a
 -> P.IO (IVEvent ())
getItemVEL index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

getCountVEL :: IVEventList a
 -> P.IO (P.Int)
getCountVEL =
  A.propertyGet "Count"
   []
   A.outInt

addVEL :: P.Int
 -> P.Int
 -> P.String
 -> P.String
 -> IVEventList a
 -> P.IO (IVEvent ())
addVEL eventCode action target targetArgs =
  A.function1 "Add"
   [ A.inInt eventCode
   , A.inInt action
   , A.inString target
   , A.inString targetArgs
   ]
   A.outIDispatch

addAdvise :: (A.Variant a0)
   => P.Int
 -> a0
 -> P.String
 -> P.String
 -> IVEventList a
 -> P.IO (IVEvent ())
addAdvise eventCode sinkIUnkOrIDisp iIDSink targetArgs =
  A.function1 "AddAdvise"
   [ A.inInt eventCode
   , A.inVariant sinkIUnkOrIDisp
   , A.inString iIDSink
   , A.inString targetArgs
   ]
   A.outIDispatch

getItemFromIDVEL :: P.Int
 -> IVEventList a
 -> P.IO (IVEvent ())
getItemFromIDVEL objectID =
  A.propertyGet "ItemFromID"
   [A.inInt objectID]
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVEvent
-- 
-- --------------------------------------------------
data IVEvent_ a = IVEvent__
   
type IVEvent a = A.IDispatch (IVEvent_ a)
iidIVEvent :: Com.IID (IVEvent ())
iidIVEvent = Com.mkIID "{000D071A-0000-0000-C000-000000000046}"

getApplicationVE :: IVEvent a
 -> P.IO (IVApplication ())
getApplicationVE =
  A.propertyGet "Application"
   []
   A.outIDispatch

getEventListVE :: IVEvent a
 -> P.IO (IVEventList ())
getEventListVE =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getIndexVE :: IVEvent a
 -> P.IO (P.Int)
getIndexVE =
  A.propertyGet "Index"
   []
   A.outInt

getEventVE :: IVEvent a
 -> P.IO (P.Int)
getEventVE =
  A.propertyGet "Event"
   []
   A.outInt

setEventVE :: P.Int
 -> IVEvent a
 -> P.IO ()
setEventVE lpi2Ret =
  A.propertySet "Event"
   [A.inInt lpi2Ret]

getActionVE :: IVEvent a
 -> P.IO (P.Int)
getActionVE =
  A.propertyGet "Action"
   []
   A.outInt

setActionVE :: P.Int
 -> IVEvent a
 -> P.IO ()
setActionVE lpi2Ret =
  A.propertySet "Action"
   [A.inInt lpi2Ret]

getTargetVE :: IVEvent a
 -> P.IO (P.String)
getTargetVE =
  A.propertyGet "Target"
   []
   A.outString

setTargetVE :: P.String
 -> IVEvent a
 -> P.IO ()
setTargetVE lpbstrRet =
  A.propertySet "Target"
   [A.inString lpbstrRet]

getTargetArgsVE :: IVEvent a
 -> P.IO (P.String)
getTargetArgsVE =
  A.propertyGet "TargetArgs"
   []
   A.outString

setTargetArgsVE :: P.String
 -> IVEvent a
 -> P.IO ()
setTargetArgsVE lpbstrRet =
  A.propertySet "TargetArgs"
   [A.inString lpbstrRet]

trigger :: P.String
 -> IVEvent a
 -> P.IO ()
trigger contextString =
  A.method0 "Trigger"
   [A.inString contextString]

deleteVE :: IVEvent a
 -> P.IO ()
deleteVE =
  A.method0 "Delete"
   []

getObjectTypeVE :: IVEvent a
 -> P.IO (P.Int)
getObjectTypeVE =
  A.propertyGet "ObjectType"
   []
   A.outInt

getIDVE :: IVEvent a
 -> P.IO (P.Int)
getIDVE =
  A.propertyGet "ID"
   []
   A.outInt

getEnabledVE :: IVEvent a
 -> P.IO (P.Int)
getEnabledVE =
  A.propertyGet "Enabled"
   []
   A.outInt

setEnabledVE :: P.Int
 -> IVEvent a
 -> P.IO ()
setEnabledVE lpi2Ret =
  A.propertySet "Enabled"
   [A.inInt lpi2Ret]

getPersistableVE :: IVEvent a
 -> P.IO (P.Int)
getPersistableVE =
  A.propertyGet "Persistable"
   []
   A.outInt

getPersistentVE :: IVEvent a
 -> P.IO (P.Int)
getPersistentVE =
  A.propertyGet "Persistent"
   []
   A.outInt

setPersistentVE :: P.Int
 -> IVEvent a
 -> P.IO ()
setPersistentVE lpi2Ret =
  A.propertySet "Persistent"
   [A.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVLayers
-- 
-- --------------------------------------------------
data IVLayers_ a = IVLayers__
   
type IVLayers a = A.IDispatch (IVLayers_ a)
iidIVLayers :: Com.IID (IVLayers ())
iidIVLayers = Com.mkIID "{000D0713-0000-0000-C000-000000000046}"

getApplicationVL :: IVLayers a
 -> P.IO (IVApplication ())
getApplicationVL =
  A.propertyGet "Application"
   []
   A.outIDispatch

getDocumentVL :: IVLayers a
 -> P.IO (IVDocument ())
getDocumentVL =
  A.propertyGet "Document"
   []
   A.outIDispatch

getPageVL :: IVLayers a
 -> P.IO (IVPage ())
getPageVL =
  A.propertyGet "Page"
   []
   A.outIDispatch

getMasterVL :: IVLayers a
 -> P.IO (IVMaster ())
getMasterVL =
  A.propertyGet "Master"
   []
   A.outIDispatch

getCountVL :: IVLayers a
 -> P.IO (P.Int)
getCountVL =
  A.propertyGet "Count"
   []
   A.outInt

getItemVL :: (A.Variant a0)
   => a0
 -> IVLayers a
 -> P.IO (IVLayer ())
getItemVL nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

addVL :: P.String
 -> IVLayers a
 -> P.IO (IVLayer ())
addVL layerName =
  A.function1 "Add"
   [A.inString layerName]
   A.outIDispatch

getObjectTypeVL :: IVLayers a
 -> P.IO (P.Int)
getObjectTypeVL =
  A.propertyGet "ObjectType"
   []
   A.outInt

getStatVL :: IVLayers a
 -> P.IO (P.Int)
getStatVL =
  A.propertyGet "Stat"
   []
   A.outInt

getEventListVL :: IVLayers a
 -> P.IO (IVEventList ())
getEventListVL =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVL :: IVLayers a
 -> P.IO (P.Int)
getPersistsEventsVL =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVLayer
-- 
-- --------------------------------------------------
data IVLayer_ a = IVLayer__
   
type IVLayer a = A.IDispatch (IVLayer_ a)
iidIVLayer :: Com.IID (IVLayer ())
iidIVLayer = Com.mkIID "{000D0712-0000-0000-C000-000000000046}"

applicationVL :: IVLayer a
 -> P.IO (IVApplication ())
applicationVL =
  A.propertyGet "Application"
   []
   A.outIDispatch

documentVL :: IVLayer a
 -> P.IO (IVDocument ())
documentVL =
  A.propertyGet "Document"
   []
   A.outIDispatch

pageVL :: IVLayer a
 -> P.IO (IVPage ())
pageVL =
  A.propertyGet "Page"
   []
   A.outIDispatch

masterVL :: IVLayer a
 -> P.IO (IVMaster ())
masterVL =
  A.propertyGet "Master"
   []
   A.outIDispatch

getIndexVL :: IVLayer a
 -> P.IO (P.Int)
getIndexVL =
  A.propertyGet "Index"
   []
   A.outInt

getRowVL :: IVLayer a
 -> P.IO (P.Int)
getRowVL =
  A.propertyGet "Row"
   []
   A.outInt

addVL0 :: IVShape a0
 -> P.Int
 -> IVLayer a
 -> P.IO ()
addVL0 sheetObject fPresMems =
  A.method0 "Add"
   [ A.inIDispatch sheetObject
   , A.inInt fPresMems
   ]

remove :: IVShape a0
 -> P.Int
 -> IVLayer a
 -> P.IO ()
remove sheetObject fPresMems =
  A.method0 "Remove"
   [ A.inIDispatch sheetObject
   , A.inInt fPresMems
   ]

deleteVL :: P.Int
 -> IVLayer a
 -> P.IO ()
deleteVL fDeleteShapes =
  A.method0 "Delete"
   [A.inInt fDeleteShapes]

getNameVL :: IVLayer a
 -> P.IO (P.String)
getNameVL =
  A.propertyGet "Name"
   []
   A.outString

setNameVL :: P.String
 -> IVLayer a
 -> P.IO ()
setNameVL lpbstrRet =
  A.propertySet "Name"
   [A.inString lpbstrRet]

getCellsCVL :: P.Int
 -> IVLayer a
 -> P.IO (IVCell ())
getCellsCVL column =
  A.propertyGet "CellsC"
   [A.inInt column]
   A.outIDispatch

objectTypeVL :: IVLayer a
 -> P.IO (P.Int)
objectTypeVL =
  A.propertyGet "ObjectType"
   []
   A.outInt

statVL :: IVLayer a
 -> P.IO (P.Int)
statVL =
  A.propertyGet "Stat"
   []
   A.outInt

eventListVL :: IVLayer a
 -> P.IO (IVEventList ())
eventListVL =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVL :: IVLayer a
 -> P.IO (P.Int)
persistsEventsVL =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVCell
-- 
-- --------------------------------------------------
data IVCell_ a = IVCell__
   
type IVCell a = A.IDispatch (IVCell_ a)
iidIVCell :: Com.IID (IVCell ())
iidIVCell = Com.mkIID "{000D0701-0000-0000-C000-000000000046}"

getApplicationVC :: IVCell a
 -> P.IO (IVApplication ())
getApplicationVC =
  A.propertyGet "Application"
   []
   A.outIDispatch

getObjectTypeVC :: IVCell a
 -> P.IO (P.Int)
getObjectTypeVC =
  A.propertyGet "ObjectType"
   []
   A.outInt

getErrorVC :: IVCell a
 -> P.IO (P.Int)
getErrorVC =
  A.propertyGet "Error"
   []
   A.outInt

getFormulaVC :: IVCell a
 -> P.IO (P.String)
getFormulaVC =
  A.propertyGet "Formula"
   []
   A.outString

setFormulaVC :: P.String
 -> IVCell a
 -> P.IO ()
setFormulaVC lpbstrRet =
  A.propertySet "Formula"
   [A.inString lpbstrRet]

setFormulaForceVC :: P.String
 -> IVCell a
 -> P.IO ()
setFormulaForceVC x0 =
  A.propertySet "FormulaForce"
   [A.inString x0]

glueTo :: IVCell a0
 -> IVCell a
 -> P.IO ()
glueTo cellObject =
  A.method0 "GlueTo"
   [A.inIDispatch cellObject]

glueToPos :: IVShape a0
 -> P.Double
 -> P.Double
 -> IVCell a
 -> P.IO ()
glueToPos sheetObject xPercent yPercent =
  A.method0 "GlueToPos"
   [ A.inIDispatch sheetObject
   , A.inDouble xPercent
   , A.inDouble yPercent
   ]

getResultVC :: (A.Variant a0)
   => a0
 -> IVCell a
 -> P.IO (P.Double)
getResultVC unitsNameOrCode =
  A.propertyGet "Result"
   [A.inVariant unitsNameOrCode]
   A.outDouble

setResultVC :: (A.Variant a0)
   => a0
 -> P.Double
 -> IVCell a
 -> P.IO ()
setResultVC unitsNameOrCode lpr8Ret =
  A.propertySet "Result"
   [ A.inVariant unitsNameOrCode
   , A.inDouble lpr8Ret
   ]

setResultForceVC :: (A.Variant a0)
   => a0
 -> P.Double
 -> IVCell a
 -> P.IO ()
setResultForceVC unitsNameOrCode x0 =
  A.propertySet "ResultForce"
   [ A.inVariant unitsNameOrCode
   , A.inDouble x0
   ]

getResultIUVC :: IVCell a
 -> P.IO (P.Double)
getResultIUVC =
  A.propertyGet "ResultIU"
   []
   A.outDouble

setResultIUVC :: P.Double
 -> IVCell a
 -> P.IO ()
setResultIUVC lpr8Ret =
  A.propertySet "ResultIU"
   [A.inDouble lpr8Ret]

setResultIUForceVC :: P.Double
 -> IVCell a
 -> P.IO ()
setResultIUForceVC x0 =
  A.propertySet "ResultIUForce"
   [A.inDouble x0]

getStatVC :: IVCell a
 -> P.IO (P.Int)
getStatVC =
  A.propertyGet "Stat"
   []
   A.outInt

getUnitsVC :: IVCell a
 -> P.IO (P.Int)
getUnitsVC =
  A.propertyGet "Units"
   []
   A.outInt

getNameVC :: IVCell a
 -> P.IO (P.String)
getNameVC =
  A.propertyGet "Name"
   []
   A.outString

getLocalNameVC :: IVCell a
 -> P.IO (P.String)
getLocalNameVC =
  A.propertyGet "LocalName"
   []
   A.outString

setRowNameVC :: P.String
 -> IVCell a
 -> P.IO ()
setRowNameVC lpbstrRet =
  A.propertySet "RowName"
   [A.inString lpbstrRet]

getDocumentVC :: IVCell a
 -> P.IO (IVDocument ())
getDocumentVC =
  A.propertyGet "Document"
   []
   A.outIDispatch

getShapeVC :: IVCell a
 -> P.IO (IVShape ())
getShapeVC =
  A.propertyGet "Shape"
   []
   A.outIDispatch

getStyleVC :: IVCell a
 -> P.IO (IVStyle ())
getStyleVC =
  A.propertyGet "Style"
   []
   A.outIDispatch

getSectionVC :: IVCell a
 -> P.IO (P.Int)
getSectionVC =
  A.propertyGet "Section"
   []
   A.outInt

getRowVC :: IVCell a
 -> P.IO (P.Int)
getRowVC =
  A.propertyGet "Row"
   []
   A.outInt

getColumnVC :: IVCell a
 -> P.IO (P.Int)
getColumnVC =
  A.propertyGet "Column"
   []
   A.outInt

getIsConstantVC :: IVCell a
 -> P.IO (P.Int)
getIsConstantVC =
  A.propertyGet "IsConstant"
   []
   A.outInt

getIsInheritedVC :: IVCell a
 -> P.IO (P.Int)
getIsInheritedVC =
  A.propertyGet "IsInherited"
   []
   A.outInt

getResultIntVC :: (A.Variant a0)
   => a0
 -> P.Int
 -> IVCell a
 -> P.IO (P.Int)
getResultIntVC unitsNameOrCode fRound =
  A.propertyGet "ResultInt"
   [ A.inVariant unitsNameOrCode
   , A.inInt fRound
   ]
   A.outInt

setResultFromIntVC :: (A.Variant a0)
   => a0
 -> P.Int
 -> IVCell a
 -> P.IO ()
setResultFromIntVC unitsNameOrCode x0 =
  A.propertySet "ResultFromInt"
   [ A.inVariant unitsNameOrCode
   , A.inInt x0
   ]

setResultFromIntForceVC :: (A.Variant a0)
   => a0
 -> P.Int
 -> IVCell a
 -> P.IO ()
setResultFromIntForceVC unitsNameOrCode x0 =
  A.propertySet "ResultFromIntForce"
   [ A.inVariant unitsNameOrCode
   , A.inInt x0
   ]

getResultStrVC :: (A.Variant a0)
   => a0
 -> IVCell a
 -> P.IO (P.String)
getResultStrVC unitsNameOrCode =
  A.propertyGet "ResultStr"
   [A.inVariant unitsNameOrCode]
   A.outString

triggerVC :: IVCell a
 -> P.IO ()
triggerVC =
  A.method0 "Trigger"
   []

getRowNameVC :: IVCell a
 -> P.IO (P.String)
getRowNameVC =
  A.propertyGet "RowName"
   []
   A.outString

getEventListVC :: IVCell a
 -> P.IO (IVEventList ())
getEventListVC =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVC :: IVCell a
 -> P.IO (P.Int)
getPersistsEventsVC =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVStyle
-- 
-- --------------------------------------------------
data IVStyle_ a = IVStyle__
   
type IVStyle a = A.IDispatch (IVStyle_ a)
iidIVStyle :: Com.IID (IVStyle ())
iidIVStyle = Com.mkIID "{000D070E-0000-0000-C000-000000000046}"

applicationVS0 :: IVStyle a
 -> P.IO (IVApplication ())
applicationVS0 =
  A.propertyGet "Application"
   []
   A.outIDispatch

statVS0 :: IVStyle a
 -> P.IO (P.Int)
statVS0 =
  A.propertyGet "Stat"
   []
   A.outInt

objectTypeVS0 :: IVStyle a
 -> P.IO (P.Int)
objectTypeVS0 =
  A.propertyGet "ObjectType"
   []
   A.outInt

nameVS :: IVStyle a
 -> P.IO (P.String)
nameVS =
  A.propertyGet "Name"
   []
   A.outString

nameVS0 :: P.String
 -> IVStyle a
 -> P.IO ()
nameVS0 lpbstrRet =
  A.propertySet "Name"
   [A.inString lpbstrRet]

indexVS :: IVStyle a
 -> P.IO (P.Int)
indexVS =
  A.propertyGet "Index"
   []
   A.outInt

documentVS0 :: IVStyle a
 -> P.IO (IVDocument ())
documentVS0 =
  A.propertyGet "Document"
   []
   A.outIDispatch

getBasedOnVS :: IVStyle a
 -> P.IO (P.String)
getBasedOnVS =
  A.propertyGet "BasedOn"
   []
   A.outString

setBasedOnVS :: P.String
 -> IVStyle a
 -> P.IO ()
setBasedOnVS lpbstrRet =
  A.propertySet "BasedOn"
   [A.inString lpbstrRet]

getTextBasedOnVS :: IVStyle a
 -> P.IO (P.String)
getTextBasedOnVS =
  A.propertyGet "TextBasedOn"
   []
   A.outString

setTextBasedOnVS :: P.String
 -> IVStyle a
 -> P.IO ()
setTextBasedOnVS lpbstrRet =
  A.propertySet "TextBasedOn"
   [A.inString lpbstrRet]

getLineBasedOnVS :: IVStyle a
 -> P.IO (P.String)
getLineBasedOnVS =
  A.propertyGet "LineBasedOn"
   []
   A.outString

setLineBasedOnVS :: P.String
 -> IVStyle a
 -> P.IO ()
setLineBasedOnVS lpbstrRet =
  A.propertySet "LineBasedOn"
   [A.inString lpbstrRet]

getFillBasedOnVS :: IVStyle a
 -> P.IO (P.String)
getFillBasedOnVS =
  A.propertyGet "FillBasedOn"
   []
   A.outString

setFillBasedOnVS :: P.String
 -> IVStyle a
 -> P.IO ()
setFillBasedOnVS lpbstrRet =
  A.propertySet "FillBasedOn"
   [A.inString lpbstrRet]

getIncludesTextVS :: IVStyle a
 -> P.IO (P.Int)
getIncludesTextVS =
  A.propertyGet "IncludesText"
   []
   A.outInt

setIncludesTextVS :: P.Int
 -> IVStyle a
 -> P.IO ()
setIncludesTextVS lpi2Ret =
  A.propertySet "IncludesText"
   [A.inInt lpi2Ret]

getIncludesLineVS :: IVStyle a
 -> P.IO (P.Int)
getIncludesLineVS =
  A.propertyGet "IncludesLine"
   []
   A.outInt

setIncludesLineVS :: P.Int
 -> IVStyle a
 -> P.IO ()
setIncludesLineVS lpi2Ret =
  A.propertySet "IncludesLine"
   [A.inInt lpi2Ret]

getIncludesFillVS :: IVStyle a
 -> P.IO (P.Int)
getIncludesFillVS =
  A.propertyGet "IncludesFill"
   []
   A.outInt

setIncludesFillVS :: P.Int
 -> IVStyle a
 -> P.IO ()
setIncludesFillVS lpi2Ret =
  A.propertySet "IncludesFill"
   [A.inInt lpi2Ret]

cellsVS :: P.String
 -> IVStyle a
 -> P.IO (IVCell ())
cellsVS cellName =
  A.propertyGet "Cells"
   [A.inString cellName]
   A.outIDispatch

deleteVS0 :: IVStyle a
 -> P.IO ()
deleteVS0 =
  A.method0 "Delete"
   []

eventListVS0 :: IVStyle a
 -> P.IO (IVEventList ())
eventListVS0 =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVS0 :: IVStyle a
 -> P.IO (P.Int)
persistsEventsVS0 =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

iDVS :: IVStyle a
 -> P.IO (P.Int)
iDVS =
  A.propertyGet "ID"
   []
   A.outInt

getFormulasVS0 :: SafeArray P.Int
 -> IVStyle a
 -> P.IO (SafeArray ())
getFormulasVS0 sRCStream =
  A.method1 "GetFormulas"
   [inSafeArray sRCStream]
   outSafeArray

getResultsVS0 :: SafeArray P.Int
 -> P.Int
 -> SafeArray ()
 -> IVStyle a
 -> P.IO (SafeArray ())
getResultsVS0 sRCStream flags unitsNamesOrCodes =
  A.method1 "GetResults"
   [ inSafeArray sRCStream
   , A.inInt flags
   , inSafeArray unitsNamesOrCodes
   ]
   outSafeArray

setFormulasVS0 :: SafeArray P.Int
 -> SafeArray ()
 -> P.Int
 -> IVStyle a
 -> P.IO (P.Int)
setFormulasVS0 sRCStream formulaArray flags =
  A.function1 "SetFormulas"
   [ inSafeArray sRCStream
   , inSafeArray formulaArray
   , A.inInt flags
   ]
   A.outInt

setResultsVS0 :: SafeArray P.Int
 -> SafeArray ()
 -> SafeArray ()
 -> P.Int
 -> IVStyle a
 -> P.IO (P.Int)
setResultsVS0 sRCStream unitsNamesOrCodes resultArray flags =
  A.function1 "SetResults"
   [ inSafeArray sRCStream
   , inSafeArray unitsNamesOrCodes
   , inSafeArray resultArray
   , A.inInt flags
   ]
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVWindow
-- 
-- --------------------------------------------------
data IVWindow_ a = IVWindow__
   
type IVWindow a = A.IDispatch (IVWindow_ a)
iidIVWindow :: Com.IID (IVWindow ())
iidIVWindow = Com.mkIID "{000D0710-0000-0000-C000-000000000046}"

getApplicationVW :: IVWindow a
 -> P.IO (IVApplication ())
getApplicationVW =
  A.propertyGet "Application"
   []
   A.outIDispatch

getStatVW :: IVWindow a
 -> P.IO (P.Int)
getStatVW =
  A.propertyGet "Stat"
   []
   A.outInt

getObjectTypeVW :: IVWindow a
 -> P.IO (P.Int)
getObjectTypeVW =
  A.propertyGet "ObjectType"
   []
   A.outInt

activate :: IVWindow a
 -> P.IO ()
activate =
  A.method0 "Activate"
   []

getTypeVW :: IVWindow a
 -> P.IO (P.Int)
getTypeVW =
  A.propertyGet "Type"
   []
   A.outInt

getDocumentVW :: IVWindow a
 -> P.IO (IVDocument ())
getDocumentVW =
  A.propertyGet "Document"
   []
   A.outIDispatch

getPageAsObjVW :: IVWindow a
 -> P.IO (IVPage ())
getPageAsObjVW =
  A.propertyGet "PageAsObj"
   []
   A.outIDispatch

setPageFromNameVW :: P.String
 -> IVWindow a
 -> P.IO ()
setPageFromNameVW x0 =
  A.propertySet "PageFromName"
   [A.inString x0]

getZoomVW :: IVWindow a
 -> P.IO (P.Double)
getZoomVW =
  A.propertyGet "Zoom"
   []
   A.outDouble

setZoomVW :: P.Double
 -> IVWindow a
 -> P.IO ()
setZoomVW lpr8Ret =
  A.propertySet "Zoom"
   [A.inDouble lpr8Ret]

closeVW :: IVWindow a
 -> P.IO ()
closeVW =
  A.method0 "Close"
   []

selectAll :: IVWindow a
 -> P.IO ()
selectAll =
  A.method0 "SelectAll"
   []

deselectAll :: IVWindow a
 -> P.IO ()
deselectAll =
  A.method0 "DeselectAll"
   []

getSelectionVW :: IVWindow a
 -> P.IO (IVSelection ())
getSelectionVW =
  A.propertyGet "Selection"
   []
   A.outIDispatch

select :: IVShape a0
 -> P.Int
 -> IVWindow a
 -> P.IO ()
select sheetObject selectAction =
  A.method0 "Select"
   [ A.inIDispatch sheetObject
   , A.inInt selectAction
   ]

getIndexVW :: IVWindow a
 -> P.IO (P.Int)
getIndexVW =
  A.propertyGet "Index"
   []
   A.outInt

cutVW :: IVWindow a
 -> P.IO ()
cutVW =
  A.method0 "Cut"
   []

copyVW :: IVWindow a
 -> P.IO ()
copyVW =
  A.method0 "Copy"
   []

pasteVW :: IVWindow a
 -> P.IO ()
pasteVW =
  A.method0 "Paste"
   []

deleteVW :: IVWindow a
 -> P.IO ()
deleteVW =
  A.method0 "Delete"
   []

duplicateVW :: IVWindow a
 -> P.IO ()
duplicateVW =
  A.method0 "Duplicate"
   []

groupVW :: IVWindow a
 -> P.IO ()
groupVW =
  A.method0 "Group"
   []

union :: IVWindow a
 -> P.IO ()
union =
  A.method0 "Union"
   []

combine :: IVWindow a
 -> P.IO ()
combine =
  A.method0 "Combine"
   []

fragment :: IVWindow a
 -> P.IO ()
fragment =
  A.method0 "Fragment"
   []

addToGroup :: IVWindow a
 -> P.IO ()
addToGroup =
  A.method0 "AddToGroup"
   []

removeFromGroup :: IVWindow a
 -> P.IO ()
removeFromGroup =
  A.method0 "RemoveFromGroup"
   []

getSubTypeVW :: IVWindow a
 -> P.IO (P.Int)
getSubTypeVW =
  A.propertyGet "SubType"
   []
   A.outInt

intersect :: IVWindow a
 -> P.IO ()
intersect =
  A.method0 "Intersect"
   []

subtract :: IVWindow a
 -> P.IO ()
subtract =
  A.method0 "Subtract"
   []

getEventListVW :: IVWindow a
 -> P.IO (IVEventList ())
getEventListVW =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVW :: IVWindow a
 -> P.IO (P.Int)
getPersistsEventsVW =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getWindowHandleVW :: IVWindow a
 -> P.IO (P.Int)
getWindowHandleVW =
  A.propertyGet "WindowHandle"
   []
   A.outInt

getWindowHandle32VW :: IVWindow a
 -> P.IO (P.Int)
getWindowHandle32VW =
  A.propertyGet "WindowHandle32"
   []
   A.outInt

trim :: IVWindow a
 -> P.IO ()
trim =
  A.method0 "Trim"
   []

join :: IVWindow a
 -> P.IO ()
join =
  A.method0 "Join"
   []

getShowRulersVW :: IVWindow a
 -> P.IO (P.Int)
getShowRulersVW =
  A.propertyGet "ShowRulers"
   []
   A.outInt

setShowRulersVW :: P.Int
 -> IVWindow a
 -> P.IO ()
setShowRulersVW lpi2Ret =
  A.propertySet "ShowRulers"
   [A.inInt lpi2Ret]

getShowGridVW :: IVWindow a
 -> P.IO (P.Int)
getShowGridVW =
  A.propertyGet "ShowGrid"
   []
   A.outInt

setShowGridVW :: P.Int
 -> IVWindow a
 -> P.IO ()
setShowGridVW lpi2Ret =
  A.propertySet "ShowGrid"
   [A.inInt lpi2Ret]

getShowGuidesVW :: IVWindow a
 -> P.IO (P.Int)
getShowGuidesVW =
  A.propertyGet "ShowGuides"
   []
   A.outInt

setShowGuidesVW :: P.Int
 -> IVWindow a
 -> P.IO ()
setShowGuidesVW lpi2Ret =
  A.propertySet "ShowGuides"
   [A.inInt lpi2Ret]

getShowConnectPointsVW :: IVWindow a
 -> P.IO (P.Int)
getShowConnectPointsVW =
  A.propertyGet "ShowConnectPoints"
   []
   A.outInt

setShowConnectPointsVW :: P.Int
 -> IVWindow a
 -> P.IO ()
setShowConnectPointsVW lpi2Ret =
  A.propertySet "ShowConnectPoints"
   [A.inInt lpi2Ret]

getShowPageBreaksVW :: IVWindow a
 -> P.IO (P.Int)
getShowPageBreaksVW =
  A.propertyGet "ShowPageBreaks"
   []
   A.outInt

setShowPageBreaksVW :: P.Int
 -> IVWindow a
 -> P.IO ()
setShowPageBreaksVW lpi2Ret =
  A.propertySet "ShowPageBreaks"
   [A.inInt lpi2Ret]

getPageVW :: (A.Variant a0)
   => IVWindow a
 -> P.IO (a0)
getPageVW =
  A.propertyGet "Page"
   []
   A.outVariant

setPageVW :: (A.Variant a0)
   => a0
 -> IVWindow a
 -> P.IO ()
setPageVW lpobjRet =
  A.propertySet "Page"
   [A.inVariant lpobjRet]

dockedStencils :: IVWindow a
 -> P.IO (SafeArray P.String)
dockedStencils =
  A.method1 "DockedStencils"
   []
   outSafeArray

getMasterVW :: (A.Variant a0)
   => IVWindow a
 -> P.IO (a0)
getMasterVW =
  A.propertyGet "Master"
   []
   A.outVariant

getShowScrollBarsVW :: IVWindow a
 -> P.IO (P.Int)
getShowScrollBarsVW =
  A.propertyGet "ShowScrollBars"
   []
   A.outInt

setShowScrollBarsVW :: P.Int
 -> IVWindow a
 -> P.IO ()
setShowScrollBarsVW lpi2Ret =
  A.propertySet "ShowScrollBars"
   [A.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVSelection
-- 
-- --------------------------------------------------
data IVSelection_ a = IVSelection__
   
type IVSelection a = A.IDispatch (IVSelection_ a)
iidIVSelection :: Com.IID (IVSelection ())
iidIVSelection = Com.mkIID "{000D070B-0000-0000-C000-000000000046}"

applicationVS1 :: IVSelection a
 -> P.IO (IVApplication ())
applicationVS1 =
  A.propertyGet "Application"
   []
   A.outIDispatch

statVS1 :: IVSelection a
 -> P.IO (P.Int)
statVS1 =
  A.propertyGet "Stat"
   []
   A.outInt

objectTypeVS1 :: IVSelection a
 -> P.IO (P.Int)
objectTypeVS1 =
  A.propertyGet "ObjectType"
   []
   A.outInt

itemVS :: P.Int
 -> IVSelection a
 -> P.IO (IVShape ())
itemVS index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

countVS :: IVSelection a
 -> P.IO (P.Int)
countVS =
  A.propertyGet "Count"
   []
   A.outInt

exportVS0 :: P.String
 -> IVSelection a
 -> P.IO ()
exportVS0 fileName =
  A.method0 "Export"
   [A.inString fileName]

documentVS1 :: IVSelection a
 -> P.IO (IVDocument ())
documentVS1 =
  A.propertyGet "Document"
   []
   A.outIDispatch

containingPageVS0 :: IVSelection a
 -> P.IO (IVPage ())
containingPageVS0 =
  A.propertyGet "ContainingPage"
   []
   A.outIDispatch

containingMasterVS0 :: IVSelection a
 -> P.IO (IVMaster ())
containingMasterVS0 =
  A.propertyGet "ContainingMaster"
   []
   A.outIDispatch

containingShapeVS0 :: IVSelection a
 -> P.IO (IVShape ())
containingShapeVS0 =
  A.propertyGet "ContainingShape"
   []
   A.outIDispatch

bringForwardVS :: IVSelection a
 -> P.IO ()
bringForwardVS =
  A.method0 "BringForward"
   []

bringToFrontVS :: IVSelection a
 -> P.IO ()
bringToFrontVS =
  A.method0 "BringToFront"
   []

sendBackwardVS :: IVSelection a
 -> P.IO ()
sendBackwardVS =
  A.method0 "SendBackward"
   []

sendToBackVS :: IVSelection a
 -> P.IO ()
sendToBackVS =
  A.method0 "SendToBack"
   []

styleVS :: IVSelection a
 -> P.IO (P.String)
styleVS =
  A.propertyGet "Style"
   []
   A.outString

styleVS0 :: P.String
 -> IVSelection a
 -> P.IO ()
styleVS0 lpbstrRet =
  A.propertySet "Style"
   [A.inString lpbstrRet]

styleKeepFmtVS :: P.String
 -> IVSelection a
 -> P.IO ()
styleKeepFmtVS x0 =
  A.propertySet "StyleKeepFmt"
   [A.inString x0]

lineStyleVS :: IVSelection a
 -> P.IO (P.String)
lineStyleVS =
  A.propertyGet "LineStyle"
   []
   A.outString

lineStyleVS0 :: P.String
 -> IVSelection a
 -> P.IO ()
lineStyleVS0 lpbstrRet =
  A.propertySet "LineStyle"
   [A.inString lpbstrRet]

lineStyleKeepFmtVS :: P.String
 -> IVSelection a
 -> P.IO ()
lineStyleKeepFmtVS x0 =
  A.propertySet "LineStyleKeepFmt"
   [A.inString x0]

fillStyleVS :: IVSelection a
 -> P.IO (P.String)
fillStyleVS =
  A.propertyGet "FillStyle"
   []
   A.outString

fillStyleVS0 :: P.String
 -> IVSelection a
 -> P.IO ()
fillStyleVS0 lpbstrRet =
  A.propertySet "FillStyle"
   [A.inString lpbstrRet]

fillStyleKeepFmtVS :: P.String
 -> IVSelection a
 -> P.IO ()
fillStyleKeepFmtVS x0 =
  A.propertySet "FillStyleKeepFmt"
   [A.inString x0]

textStyleVS :: IVSelection a
 -> P.IO (P.String)
textStyleVS =
  A.propertyGet "TextStyle"
   []
   A.outString

textStyleVS0 :: P.String
 -> IVSelection a
 -> P.IO ()
textStyleVS0 lpbstrRet =
  A.propertySet "TextStyle"
   [A.inString lpbstrRet]

textStyleKeepFmtVS :: P.String
 -> IVSelection a
 -> P.IO ()
textStyleKeepFmtVS x0 =
  A.propertySet "TextStyleKeepFmt"
   [A.inString x0]

combineVS :: IVSelection a
 -> P.IO ()
combineVS =
  A.method0 "Combine"
   []

fragmentVS :: IVSelection a
 -> P.IO ()
fragmentVS =
  A.method0 "Fragment"
   []

intersectVS :: IVSelection a
 -> P.IO ()
intersectVS =
  A.method0 "Intersect"
   []

subtractVS :: IVSelection a
 -> P.IO ()
subtractVS =
  A.method0 "Subtract"
   []

unionVS :: IVSelection a
 -> P.IO ()
unionVS =
  A.method0 "Union"
   []

flipHorizontalVS :: IVSelection a
 -> P.IO ()
flipHorizontalVS =
  A.method0 "FlipHorizontal"
   []

flipVerticalVS :: IVSelection a
 -> P.IO ()
flipVerticalVS =
  A.method0 "FlipVertical"
   []

reverseEndsVS :: IVSelection a
 -> P.IO ()
reverseEndsVS =
  A.method0 "ReverseEnds"
   []

rotate90VS :: IVSelection a
 -> P.IO ()
rotate90VS =
  A.method0 "Rotate90"
   []

copyVS :: IVSelection a
 -> P.IO ()
copyVS =
  A.method0 "Copy"
   []

cutVS :: IVSelection a
 -> P.IO ()
cutVS =
  A.method0 "Cut"
   []

deleteVS1 :: IVSelection a
 -> P.IO ()
deleteVS1 =
  A.method0 "Delete"
   []

duplicateVS :: IVSelection a
 -> P.IO ()
duplicateVS =
  A.method0 "Duplicate"
   []

groupVS :: IVSelection a
 -> P.IO ()
groupVS =
  A.method0 "Group"
   []

convertToGroupVS :: IVSelection a
 -> P.IO ()
convertToGroupVS =
  A.method0 "ConvertToGroup"
   []

ungroupVS :: IVSelection a
 -> P.IO ()
ungroupVS =
  A.method0 "Ungroup"
   []

selectAllVS :: IVSelection a
 -> P.IO ()
selectAllVS =
  A.method0 "SelectAll"
   []

deselectAllVS :: IVSelection a
 -> P.IO ()
deselectAllVS =
  A.method0 "DeselectAll"
   []

selectVS :: IVShape a0
 -> P.Int
 -> IVSelection a
 -> P.IO ()
selectVS sheetObject selectAction =
  A.method0 "Select"
   [ A.inIDispatch sheetObject
   , A.inInt selectAction
   ]

eventListVS1 :: IVSelection a
 -> P.IO (IVEventList ())
eventListVS1 =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVS1 :: IVSelection a
 -> P.IO (P.Int)
persistsEventsVS1 =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

trimVS :: IVSelection a
 -> P.IO ()
trimVS =
  A.method0 "Trim"
   []

joinVS :: IVSelection a
 -> P.IO ()
joinVS =
  A.method0 "Join"
   []

fitCurveVS :: P.Double
 -> P.Int
 -> IVSelection a
 -> P.IO ()
fitCurveVS tolerance flags =
  A.method0 "FitCurve"
   [ A.inDouble tolerance
   , A.inInt flags
   ]

layoutVS0 :: IVSelection a
 -> P.IO ()
layoutVS0 =
  A.method0 "Layout"
   []

boundingBoxVS0 :: P.Int
 -> IVSelection a
 -> P.IO (P.Double, P.Double, P.Double, P.Double)
boundingBoxVS0 flags =
  A.method4 "BoundingBox"
   [A.inInt flags]
   A.outDouble
   A.outDouble
   A.outDouble
   A.outDouble

-- --------------------------------------------------
-- 
-- interface IVConnects
-- 
-- --------------------------------------------------
data IVConnects_ a = IVConnects__
   
type IVConnects a = A.IDispatch (IVConnects_ a)
iidIVConnects :: Com.IID (IVConnects ())
iidIVConnects = Com.mkIID "{000D0704-0000-0000-C000-000000000046}"

applicationVC :: IVConnects a
 -> P.IO (IVApplication ())
applicationVC =
  A.propertyGet "Application"
   []
   A.outIDispatch

getItemVC :: P.Int
 -> IVConnects a
 -> P.IO (IVConnect ())
getItemVC index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

getCountVC :: IVConnects a
 -> P.IO (P.Int)
getCountVC =
  A.propertyGet "Count"
   []
   A.outInt

getFromSheetVC :: IVConnects a
 -> P.IO (IVShape ())
getFromSheetVC =
  A.propertyGet "FromSheet"
   []
   A.outIDispatch

objectTypeVC :: IVConnects a
 -> P.IO (P.Int)
objectTypeVC =
  A.propertyGet "ObjectType"
   []
   A.outInt

documentVC :: IVConnects a
 -> P.IO (IVDocument ())
documentVC =
  A.propertyGet "Document"
   []
   A.outIDispatch

statVC :: IVConnects a
 -> P.IO (P.Int)
statVC =
  A.propertyGet "Stat"
   []
   A.outInt

getToSheetVC :: IVConnects a
 -> P.IO (IVShape ())
getToSheetVC =
  A.propertyGet "ToSheet"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVConnect
-- 
-- --------------------------------------------------
data IVConnect_ a = IVConnect__
   
type IVConnect a = A.IDispatch (IVConnect_ a)
iidIVConnect :: Com.IID (IVConnect ())
iidIVConnect = Com.mkIID "{000D0703-0000-0000-C000-000000000046}"

applicationVC0 :: IVConnect a
 -> P.IO (IVApplication ())
applicationVC0 =
  A.propertyGet "Application"
   []
   A.outIDispatch

statVC0 :: IVConnect a
 -> P.IO (P.Int)
statVC0 =
  A.propertyGet "Stat"
   []
   A.outInt

fromSheetVC :: IVConnect a
 -> P.IO (IVShape ())
fromSheetVC =
  A.propertyGet "FromSheet"
   []
   A.outIDispatch

toSheetVC :: IVConnect a
 -> P.IO (IVShape ())
toSheetVC =
  A.propertyGet "ToSheet"
   []
   A.outIDispatch

getFromCellVC :: IVConnect a
 -> P.IO (IVCell ())
getFromCellVC =
  A.propertyGet "FromCell"
   []
   A.outIDispatch

getToCellVC :: IVConnect a
 -> P.IO (IVCell ())
getToCellVC =
  A.propertyGet "ToCell"
   []
   A.outIDispatch

getFromPartVC :: IVConnect a
 -> P.IO (P.Int)
getFromPartVC =
  A.propertyGet "FromPart"
   []
   A.outInt

getToPartVC :: IVConnect a
 -> P.IO (P.Int)
getToPartVC =
  A.propertyGet "ToPart"
   []
   A.outInt

objectTypeVC0 :: IVConnect a
 -> P.IO (P.Int)
objectTypeVC0 =
  A.propertyGet "ObjectType"
   []
   A.outInt

getIndexVC :: IVConnect a
 -> P.IO (P.Int)
getIndexVC =
  A.propertyGet "Index"
   []
   A.outInt

documentVC0 :: IVConnect a
 -> P.IO (IVDocument ())
documentVC0 =
  A.propertyGet "Document"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVOLEObjects
-- 
-- --------------------------------------------------
data IVOLEObjects_ a = IVOLEObjects__
   
type IVOLEObjects a = A.IDispatch (IVOLEObjects_ a)
iidIVOLEObjects :: Com.IID (IVOLEObjects ())
iidIVOLEObjects =
  Com.mkIID "{000D071E-0000-0000-C000-000000000046}"

getApplicationVOLEO :: IVOLEObjects a
 -> P.IO (IVApplication ())
getApplicationVOLEO =
  A.propertyGet "Application"
   []
   A.outIDispatch

getObjectTypeVOLEO :: IVOLEObjects a
 -> P.IO (P.Int)
getObjectTypeVOLEO =
  A.propertyGet "ObjectType"
   []
   A.outInt

getStatVOLEO :: IVOLEObjects a
 -> P.IO (P.Int)
getStatVOLEO =
  A.propertyGet "Stat"
   []
   A.outInt

getItemVOLEO :: (A.Variant a0)
   => a0
 -> IVOLEObjects a
 -> P.IO (IVOLEObject ())
getItemVOLEO nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

getCountVOLEO :: IVOLEObjects a
 -> P.IO (P.Int)
getCountVOLEO =
  A.propertyGet "Count"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVOLEObject
-- 
-- --------------------------------------------------
data IVOLEObject_ a = IVOLEObject__
   
type IVOLEObject a = A.IDispatch (IVOLEObject_ a)
iidIVOLEObject :: Com.IID (IVOLEObject ())
iidIVOLEObject = Com.mkIID "{000D071F-0000-0000-C000-000000000046}"

applicationVOLEO :: IVOLEObject a
 -> P.IO (IVApplication ())
applicationVOLEO =
  A.propertyGet "Application"
   []
   A.outIDispatch

getShapeVOLEO :: IVOLEObject a
 -> P.IO (IVShape ())
getShapeVOLEO =
  A.propertyGet "Shape"
   []
   A.outIDispatch

objectTypeVOLEO :: IVOLEObject a
 -> P.IO (P.Int)
objectTypeVOLEO =
  A.propertyGet "ObjectType"
   []
   A.outInt

statVOLEO :: IVOLEObject a
 -> P.IO (P.Int)
statVOLEO =
  A.propertyGet "Stat"
   []
   A.outInt

getClassIDVOLEO :: IVOLEObject a
 -> P.IO (P.String)
getClassIDVOLEO =
  A.propertyGet "ClassID"
   []
   A.outString

getProgIDVOLEO :: IVOLEObject a
 -> P.IO (P.String)
getProgIDVOLEO =
  A.propertyGet "ProgID"
   []
   A.outString

getForeignTypeVOLEO :: IVOLEObject a
 -> P.IO (P.Int)
getForeignTypeVOLEO =
  A.propertyGet "ForeignType"
   []
   A.outInt

getObjectVOLEO :: IVOLEObject a
 -> P.IO (A.IDispatch ())
getObjectVOLEO =
  A.propertyGet "Object"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVCharacters
-- 
-- --------------------------------------------------
data IVCharacters_ a = IVCharacters__
   
type IVCharacters a = A.IDispatch (IVCharacters_ a)
iidIVCharacters :: Com.IID (IVCharacters ())
iidIVCharacters =
  Com.mkIID "{000D0702-0000-0000-C000-000000000046}"

addCustomField :: P.String
 -> P.Int
 -> IVCharacters a
 -> P.IO ()
addCustomField formula format =
  A.method0 "AddCustomField"
   [ A.inString formula
   , A.inInt format
   ]

addField :: P.Int
 -> P.Int
 -> P.Int
 -> IVCharacters a
 -> P.IO ()
addField category code format =
  A.method0 "AddField"
   [ A.inInt category
   , A.inInt code
   , A.inInt format
   ]

applicationVC1 :: IVCharacters a
 -> P.IO (IVApplication ())
applicationVC1 =
  A.propertyGet "Application"
   []
   A.outIDispatch

getBeginVC :: IVCharacters a
 -> P.IO (P.Int)
getBeginVC =
  A.propertyGet "Begin"
   []
   A.outInt

setBeginVC :: P.Int
 -> IVCharacters a
 -> P.IO ()
setBeginVC lpi4Ret =
  A.propertySet "Begin"
   [A.inInt lpi4Ret]

getCharCountVC :: IVCharacters a
 -> P.IO (P.Int)
getCharCountVC =
  A.propertyGet "CharCount"
   []
   A.outInt

setCharPropsVC :: P.Int
 -> P.Int
 -> IVCharacters a
 -> P.IO ()
setCharPropsVC cellIndex x0 =
  A.propertySet "CharProps"
   [ A.inInt cellIndex
   , A.inInt x0
   ]

getCharPropsRowVC :: P.Int
 -> IVCharacters a
 -> P.IO (P.Int)
getCharPropsRowVC biasLorR =
  A.propertyGet "CharPropsRow"
   [A.inInt biasLorR]
   A.outInt

copyVC :: IVCharacters a
 -> P.IO ()
copyVC =
  A.method0 "Copy"
   []

cutVC :: IVCharacters a
 -> P.IO ()
cutVC =
  A.method0 "Cut"
   []

objectTypeVC1 :: IVCharacters a
 -> P.IO (P.Int)
objectTypeVC1 =
  A.propertyGet "ObjectType"
   []
   A.outInt

getEndVC :: IVCharacters a
 -> P.IO (P.Int)
getEndVC =
  A.propertyGet "End"
   []
   A.outInt

setEndVC :: P.Int
 -> IVCharacters a
 -> P.IO ()
setEndVC lpi4Ret =
  A.propertySet "End"
   [A.inInt lpi4Ret]

getFieldCategoryVC :: IVCharacters a
 -> P.IO (P.Int)
getFieldCategoryVC =
  A.propertyGet "FieldCategory"
   []
   A.outInt

getFieldCodeVC :: IVCharacters a
 -> P.IO (P.Int)
getFieldCodeVC =
  A.propertyGet "FieldCode"
   []
   A.outInt

getFieldFormatVC :: IVCharacters a
 -> P.IO (P.Int)
getFieldFormatVC =
  A.propertyGet "FieldFormat"
   []
   A.outInt

getFieldFormulaVC :: IVCharacters a
 -> P.IO (P.String)
getFieldFormulaVC =
  A.propertyGet "FieldFormula"
   []
   A.outString

getIsFieldVC :: IVCharacters a
 -> P.IO (P.Int)
getIsFieldVC =
  A.propertyGet "IsField"
   []
   A.outInt

setParaPropsVC :: P.Int
 -> P.Int
 -> IVCharacters a
 -> P.IO ()
setParaPropsVC cellIndex x0 =
  A.propertySet "ParaProps"
   [ A.inInt cellIndex
   , A.inInt x0
   ]

getParaPropsRowVC :: P.Int
 -> IVCharacters a
 -> P.IO (P.Int)
getParaPropsRowVC biasLorR =
  A.propertyGet "ParaPropsRow"
   [A.inInt biasLorR]
   A.outInt

pasteVC :: IVCharacters a
 -> P.IO ()
pasteVC =
  A.method0 "Paste"
   []

getTabPropsRowVC :: P.Int
 -> IVCharacters a
 -> P.IO (P.Int)
getTabPropsRowVC biasLorR =
  A.propertyGet "TabPropsRow"
   [A.inInt biasLorR]
   A.outInt

getRunBeginVC :: P.Int
 -> IVCharacters a
 -> P.IO (P.Int)
getRunBeginVC runType =
  A.propertyGet "RunBegin"
   [A.inInt runType]
   A.outInt

getRunEndVC :: P.Int
 -> IVCharacters a
 -> P.IO (P.Int)
getRunEndVC runType =
  A.propertyGet "RunEnd"
   [A.inInt runType]
   A.outInt

shapeVC :: IVCharacters a
 -> P.IO (IVShape ())
shapeVC =
  A.propertyGet "Shape"
   []
   A.outIDispatch

statVC1 :: IVCharacters a
 -> P.IO (P.Int)
statVC1 =
  A.propertyGet "Stat"
   []
   A.outInt

getTextAsStringVC :: IVCharacters a
 -> P.IO (P.String)
getTextAsStringVC =
  A.propertyGet "TextAsString"
   []
   A.outString

setTextVC :: (A.Variant a0)
   => a0
 -> IVCharacters a
 -> P.IO ()
setTextVC lpvarRet =
  A.propertySet "Text"
   [A.inVariant lpvarRet]

documentVC1 :: IVCharacters a
 -> P.IO (IVDocument ())
documentVC1 =
  A.propertyGet "Document"
   []
   A.outIDispatch

eventListVC :: IVCharacters a
 -> P.IO (IVEventList ())
eventListVC =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVC :: IVCharacters a
 -> P.IO (P.Int)
persistsEventsVC =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getTextVC :: (A.Variant a0)
   => IVCharacters a
 -> P.IO (a0)
getTextVC =
  A.propertyGet "Text"
   []
   A.outVariant

-- --------------------------------------------------
-- 
-- interface IVHyperlink
-- 
-- --------------------------------------------------
data IVHyperlink_ a = IVHyperlink__
   
type IVHyperlink a = A.IDispatch (IVHyperlink_ a)
iidIVHyperlink :: Com.IID (IVHyperlink ())
iidIVHyperlink = Com.mkIID "{000D071D-0000-0000-C000-000000000046}"

getDescriptionVH :: IVHyperlink a
 -> P.IO (P.String)
getDescriptionVH =
  A.propertyGet "Description"
   []
   A.outString

setDescriptionVH :: P.String
 -> IVHyperlink a
 -> P.IO ()
setDescriptionVH lpbstrRet =
  A.propertySet "Description"
   [A.inString lpbstrRet]

getApplicationVH :: IVHyperlink a
 -> P.IO (IVApplication ())
getApplicationVH =
  A.propertyGet "Application"
   []
   A.outIDispatch

getShapeVH :: IVHyperlink a
 -> P.IO (IVShape ())
getShapeVH =
  A.propertyGet "Shape"
   []
   A.outIDispatch

getObjectTypeVH :: IVHyperlink a
 -> P.IO (P.Int)
getObjectTypeVH =
  A.propertyGet "ObjectType"
   []
   A.outInt

getStatVH :: IVHyperlink a
 -> P.IO (P.Int)
getStatVH =
  A.propertyGet "Stat"
   []
   A.outInt

getAddressVH :: IVHyperlink a
 -> P.IO (P.String)
getAddressVH =
  A.propertyGet "Address"
   []
   A.outString

setAddressVH :: P.String
 -> IVHyperlink a
 -> P.IO ()
setAddressVH lpbstrRet =
  A.propertySet "Address"
   [A.inString lpbstrRet]

getSubAddressVH :: IVHyperlink a
 -> P.IO (P.String)
getSubAddressVH =
  A.propertyGet "SubAddress"
   []
   A.outString

setSubAddressVH :: P.String
 -> IVHyperlink a
 -> P.IO ()
setSubAddressVH lpbstrRet =
  A.propertySet "SubAddress"
   [A.inString lpbstrRet]

getNewWindowVH :: IVHyperlink a
 -> P.IO (P.Int)
getNewWindowVH =
  A.propertyGet "NewWindow"
   []
   A.outInt

setNewWindowVH :: P.Int
 -> IVHyperlink a
 -> P.IO ()
setNewWindowVH lpi2Ret =
  A.propertySet "NewWindow"
   [A.inInt lpi2Ret]

getExtraInfoVH :: IVHyperlink a
 -> P.IO (P.String)
getExtraInfoVH =
  A.propertyGet "ExtraInfo"
   []
   A.outString

setExtraInfoVH :: P.String
 -> IVHyperlink a
 -> P.IO ()
setExtraInfoVH lpbstrRet =
  A.propertySet "ExtraInfo"
   [A.inString lpbstrRet]

getFrameVH :: IVHyperlink a
 -> P.IO (P.String)
getFrameVH =
  A.propertyGet "Frame"
   []
   A.outString

setFrameVH :: P.String
 -> IVHyperlink a
 -> P.IO ()
setFrameVH lpbstrRet =
  A.propertySet "Frame"
   [A.inString lpbstrRet]

follow :: IVHyperlink a
 -> P.IO ()
follow =
  A.method0 "Follow"
   []

deleteVH :: IVHyperlink a
 -> P.IO ()
deleteVH =
  A.method0 "Delete"
   []

copyVH :: IVHyperlink a
 -> P.IO ()
copyVH =
  A.method0 "Copy"
   []

createURL :: P.Int
 -> IVHyperlink a
 -> P.IO (P.String)
createURL canonicalForm =
  A.function1 "CreateURL"
   [A.inInt canonicalForm]
   A.outString

-- --------------------------------------------------
-- 
-- interface IVPaths
-- 
-- --------------------------------------------------
data IVPaths_ a = IVPaths__
   
type IVPaths a = A.IDispatch (IVPaths_ a)
iidIVPaths :: Com.IID (IVPaths ())
iidIVPaths = Com.mkIID "{000D0720-0000-0000-C000-000000000046}"

applicationVP :: IVPaths a
 -> P.IO (IVApplication ())
applicationVP =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVP :: IVPaths a
 -> P.IO (P.Int)
objectTypeVP =
  A.propertyGet "ObjectType"
   []
   A.outInt

getItemVP :: P.Int
 -> IVPaths a
 -> P.IO (IVPath ())
getItemVP index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

getCountVP :: IVPaths a
 -> P.IO (P.Int)
getCountVP =
  A.propertyGet "Count"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVPath
-- 
-- --------------------------------------------------
data IVPath_ a = IVPath__
   
type IVPath a = A.IDispatch (IVPath_ a)
iidIVPath :: Com.IID (IVPath ())
iidIVPath = Com.mkIID "{000D0721-0000-0000-C000-000000000046}"

applicationVP0 :: IVPath a
 -> P.IO (IVApplication ())
applicationVP0 =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVP0 :: IVPath a
 -> P.IO (P.Int)
objectTypeVP0 =
  A.propertyGet "ObjectType"
   []
   A.outInt

itemVP :: P.Int
 -> IVPath a
 -> P.IO (IVCurve ())
itemVP index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

countVP :: IVPath a
 -> P.IO (P.Int)
countVP =
  A.propertyGet "Count"
   []
   A.outInt

getClosedVP :: IVPath a
 -> P.IO (P.Int)
getClosedVP =
  A.propertyGet "Closed"
   []
   A.outInt

points :: P.Double
 -> IVPath a
 -> P.IO (SafeArray P.Double)
points tolerance =
  A.method1 "Points"
   [A.inDouble tolerance]
   outSafeArray

-- --------------------------------------------------
-- 
-- interface IVCurve
-- 
-- --------------------------------------------------
data IVCurve_ a = IVCurve__
   
type IVCurve a = A.IDispatch (IVCurve_ a)
iidIVCurve :: Com.IID (IVCurve ())
iidIVCurve = Com.mkIID "{000D0722-0000-0000-C000-000000000046}"

applicationVC2 :: IVCurve a
 -> P.IO (IVApplication ())
applicationVC2 =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVC2 :: IVCurve a
 -> P.IO (P.Int)
objectTypeVC2 =
  A.propertyGet "ObjectType"
   []
   A.outInt

getClosedVC :: IVCurve a
 -> P.IO (P.Int)
getClosedVC =
  A.propertyGet "Closed"
   []
   A.outInt

pointsVC :: P.Double
 -> IVCurve a
 -> P.IO (SafeArray P.Double)
pointsVC tolerance =
  A.method1 "Points"
   [A.inDouble tolerance]
   outSafeArray

getStartVC :: IVCurve a
 -> P.IO (P.Double)
getStartVC =
  A.propertyGet "Start"
   []
   A.outDouble

endVC :: IVCurve a
 -> P.IO (P.Double)
endVC =
  A.propertyGet "End"
   []
   A.outDouble

point :: P.Double
 -> IVCurve a
 -> P.IO (P.Double, P.Double)
point t =
  A.method2 "Point"
   [A.inDouble t]
   A.outDouble
   A.outDouble

-- --------------------------------------------------
-- 
-- interface IVDocuments
-- 
-- --------------------------------------------------
data IVDocuments_ a = IVDocuments__
   
type IVDocuments a = A.IDispatch (IVDocuments_ a)
iidIVDocuments :: Com.IID (IVDocuments ())
iidIVDocuments = Com.mkIID "{000D0706-0000-0000-C000-000000000046}"

addVD :: P.String
 -> IVDocuments a
 -> P.IO (IVDocument ())
addVD fileName =
  A.function1 "Add"
   [A.inString fileName]
   A.outIDispatch

openVD :: P.String
 -> IVDocuments a
 -> P.IO (IVDocument ())
openVD fileName =
  A.function1 "Open"
   [A.inString fileName]
   A.outIDispatch

applicationVD :: IVDocuments a
 -> P.IO (IVApplication ())
applicationVD =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVD :: IVDocuments a
 -> P.IO (P.Int)
objectTypeVD =
  A.propertyGet "ObjectType"
   []
   A.outInt

getItemVD :: (A.Variant a0)
   => a0
 -> IVDocuments a
 -> P.IO (IVDocument ())
getItemVD nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

getCountVD :: IVDocuments a
 -> P.IO (P.Int)
getCountVD =
  A.propertyGet "Count"
   []
   A.outInt

openEx :: P.String
 -> P.Int
 -> IVDocuments a
 -> P.IO (IVDocument ())
openEx fileName flags =
  A.function1 "OpenEx"
   [ A.inString fileName
   , A.inInt flags
   ]
   A.outIDispatch

eventListVD :: IVDocuments a
 -> P.IO (IVEventList ())
eventListVD =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVD :: IVDocuments a
 -> P.IO (P.Int)
persistsEventsVD =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getNames :: IVDocuments a
 -> P.IO (SafeArray P.String)
getNames =
  A.method1 "GetNames"
   []
   outSafeArray

-- --------------------------------------------------
-- 
-- interface IVWindows
-- 
-- --------------------------------------------------
data IVWindows_ a = IVWindows__
   
type IVWindows a = A.IDispatch (IVWindows_ a)
iidIVWindows :: Com.IID (IVWindows ())
iidIVWindows = Com.mkIID "{000D0711-0000-0000-C000-000000000046}"

applicationVW :: IVWindows a
 -> P.IO (IVApplication ())
applicationVW =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVW :: IVWindows a
 -> P.IO (P.Int)
objectTypeVW =
  A.propertyGet "ObjectType"
   []
   A.outInt

getItemVW :: P.Int
 -> IVWindows a
 -> P.IO (IVWindow ())
getItemVW index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

getCountVW :: IVWindows a
 -> P.IO (P.Int)
getCountVW =
  A.propertyGet "Count"
   []
   A.outInt

arrange :: IVWindows a
 -> P.IO ()
arrange =
  A.method0 "Arrange"
   []

eventListVW :: IVWindows a
 -> P.IO (IVEventList ())
eventListVW =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVW :: IVWindows a
 -> P.IO (P.Int)
persistsEventsVW =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVAddons
-- 
-- --------------------------------------------------
data IVAddons_ a = IVAddons__
   
type IVAddons a = A.IDispatch (IVAddons_ a)
iidIVAddons :: Com.IID (IVAddons ())
iidIVAddons = Com.mkIID "{000D0719-0000-0000-C000-000000000046}"

applicationVA :: IVAddons a
 -> P.IO (IVApplication ())
applicationVA =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVA :: IVAddons a
 -> P.IO (P.Int)
objectTypeVA =
  A.propertyGet "ObjectType"
   []
   A.outInt

getItemVA :: (A.Variant a0)
   => a0
 -> IVAddons a
 -> P.IO (IVAddon ())
getItemVA nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

getCountVA :: IVAddons a
 -> P.IO (P.Int)
getCountVA =
  A.propertyGet "Count"
   []
   A.outInt

addVA :: P.String
 -> IVAddons a
 -> P.IO (IVAddon ())
addVA fileName =
  A.function1 "Add"
   [A.inString fileName]
   A.outIDispatch

getNamesVA :: IVAddons a
 -> P.IO (SafeArray P.String)
getNamesVA =
  A.method1 "GetNames"
   []
   outSafeArray

-- --------------------------------------------------
-- 
-- interface IVAddon
-- 
-- --------------------------------------------------
data IVAddon_ a = IVAddon__
   
type IVAddon a = A.IDispatch (IVAddon_ a)
iidIVAddon :: Com.IID (IVAddon ())
iidIVAddon = Com.mkIID "{000D0718-0000-0000-C000-000000000046}"

applicationVA0 :: IVAddon a
 -> P.IO (IVApplication ())
applicationVA0 =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVA0 :: IVAddon a
 -> P.IO (P.Int)
objectTypeVA0 =
  A.propertyGet "ObjectType"
   []
   A.outInt

getNameVA :: IVAddon a
 -> P.IO (P.String)
getNameVA =
  A.propertyGet "Name"
   []
   A.outString

getIndexVA :: IVAddon a
 -> P.IO (P.Int)
getIndexVA =
  A.propertyGet "Index"
   []
   A.outInt

getEnabledVA :: IVAddon a
 -> P.IO (P.Int)
getEnabledVA =
  A.propertyGet "Enabled"
   []
   A.outInt

run :: P.String
 -> IVAddon a
 -> P.IO ()
run argString =
  A.method0 "Run"
   [A.inString argString]

-- --------------------------------------------------
-- 
-- interface IVMasters
-- 
-- --------------------------------------------------
data IVMasters_ a = IVMasters__
   
type IVMasters a = A.IDispatch (IVMasters_ a)
iidIVMasters :: Com.IID (IVMasters ())
iidIVMasters = Com.mkIID "{000D0708-0000-0000-C000-000000000046}"

applicationVM :: IVMasters a
 -> P.IO (IVApplication ())
applicationVM =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVM :: IVMasters a
 -> P.IO (P.Int)
objectTypeVM =
  A.propertyGet "ObjectType"
   []
   A.outInt

itemVM :: (A.Variant a0)
   => a0
 -> IVMasters a
 -> P.IO (IVMaster ())
itemVM nameUIDOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameUIDOrIndex]
   A.outIDispatch

countVM :: IVMasters a
 -> P.IO (P.Int)
countVM =
  A.propertyGet "Count"
   []
   A.outInt

documentVM :: IVMasters a
 -> P.IO (IVDocument ())
documentVM =
  A.propertyGet "Document"
   []
   A.outIDispatch

statVM :: IVMasters a
 -> P.IO (P.Int)
statVM =
  A.propertyGet "Stat"
   []
   A.outInt

eventListVM :: IVMasters a
 -> P.IO (IVEventList ())
eventListVM =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVM :: IVMasters a
 -> P.IO (P.Int)
persistsEventsVM =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

addVM0 :: IVMasters a
 -> P.IO (IVMaster ())
addVM0 =
  A.function1 "Add"
   []
   A.outIDispatch

getNamesVM :: IVMasters a
 -> P.IO (SafeArray P.String)
getNamesVM =
  A.method1 "GetNames"
   []
   outSafeArray

-- --------------------------------------------------
-- 
-- interface IVPages
-- 
-- --------------------------------------------------
data IVPages_ a = IVPages__
   
type IVPages a = A.IDispatch (IVPages_ a)
iidIVPages :: Com.IID (IVPages ())
iidIVPages = Com.mkIID "{000D070A-0000-0000-C000-000000000046}"

applicationVP1 :: IVPages a
 -> P.IO (IVApplication ())
applicationVP1 =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVP1 :: IVPages a
 -> P.IO (P.Int)
objectTypeVP1 =
  A.propertyGet "ObjectType"
   []
   A.outInt

itemVP0 :: (A.Variant a0)
   => a0
 -> IVPages a
 -> P.IO (IVPage ())
itemVP0 nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

countVP0 :: IVPages a
 -> P.IO (P.Int)
countVP0 =
  A.propertyGet "Count"
   []
   A.outInt

addVP :: IVPages a
 -> P.IO (IVPage ())
addVP =
  A.function1 "Add"
   []
   A.outIDispatch

documentVP :: IVPages a
 -> P.IO (IVDocument ())
documentVP =
  A.propertyGet "Document"
   []
   A.outIDispatch

statVP :: IVPages a
 -> P.IO (P.Int)
statVP =
  A.propertyGet "Stat"
   []
   A.outInt

eventListVP :: IVPages a
 -> P.IO (IVEventList ())
eventListVP =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVP :: IVPages a
 -> P.IO (P.Int)
persistsEventsVP =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getNamesVP :: IVPages a
 -> P.IO (SafeArray P.String)
getNamesVP =
  A.method1 "GetNames"
   []
   outSafeArray

-- --------------------------------------------------
-- 
-- interface IVStyles
-- 
-- --------------------------------------------------
data IVStyles_ a = IVStyles__
   
type IVStyles a = A.IDispatch (IVStyles_ a)
iidIVStyles :: Com.IID (IVStyles ())
iidIVStyles = Com.mkIID "{000D070F-0000-0000-C000-000000000046}"

applicationVS2 :: IVStyles a
 -> P.IO (IVApplication ())
applicationVS2 =
  A.propertyGet "Application"
   []
   A.outIDispatch

objectTypeVS2 :: IVStyles a
 -> P.IO (P.Int)
objectTypeVS2 =
  A.propertyGet "ObjectType"
   []
   A.outInt

itemVS0 :: (A.Variant a0)
   => a0
 -> IVStyles a
 -> P.IO (IVStyle ())
itemVS0 nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

countVS0 :: IVStyles a
 -> P.IO (P.Int)
countVS0 =
  A.propertyGet "Count"
   []
   A.outInt

documentVS2 :: IVStyles a
 -> P.IO (IVDocument ())
documentVS2 =
  A.propertyGet "Document"
   []
   A.outIDispatch

addVS :: P.String
 -> P.String
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVStyles a
 -> P.IO (IVStyle ())
addVS styleName basedOn fIncludesText fIncludesLine fIncludesFill =
  A.function1 "Add"
   [ A.inString styleName
   , A.inString basedOn
   , A.inInt fIncludesText
   , A.inInt fIncludesLine
   , A.inInt fIncludesFill
   ]
   A.outIDispatch

statVS2 :: IVStyles a
 -> P.IO (P.Int)
statVS2 =
  A.propertyGet "Stat"
   []
   A.outInt

eventListVS2 :: IVStyles a
 -> P.IO (IVEventList ())
eventListVS2 =
  A.propertyGet "EventList"
   []
   A.outIDispatch

persistsEventsVS2 :: IVStyles a
 -> P.IO (P.Int)
persistsEventsVS2 =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

itemFromIDVS :: P.Int
 -> IVStyles a
 -> P.IO (IVStyle ())
itemFromIDVS objectID =
  A.propertyGet "ItemFromID"
   [A.inInt objectID]
   A.outIDispatch

getNamesVS :: IVStyles a
 -> P.IO (SafeArray P.String)
getNamesVS =
  A.method1 "GetNames"
   []
   outSafeArray

-- --------------------------------------------------
-- 
-- interface IVFonts
-- 
-- --------------------------------------------------
data IVFonts_ a = IVFonts__
   
type IVFonts a = A.IDispatch (IVFonts_ a)
iidIVFonts :: Com.IID (IVFonts ())
iidIVFonts = Com.mkIID "{000D0715-0000-0000-C000-000000000046}"

getApplicationVF :: IVFonts a
 -> P.IO (IVApplication ())
getApplicationVF =
  A.propertyGet "Application"
   []
   A.outIDispatch

getDocumentVF :: IVFonts a
 -> P.IO (IVDocument ())
getDocumentVF =
  A.propertyGet "Document"
   []
   A.outIDispatch

getCountVF :: IVFonts a
 -> P.IO (P.Int)
getCountVF =
  A.propertyGet "Count"
   []
   A.outInt

getItemVF :: (A.Variant a0)
   => a0
 -> IVFonts a
 -> P.IO (IVFont ())
getItemVF nameOrIndex =
  A.propertyGet "Item"
   [A.inVariant nameOrIndex]
   A.outIDispatch

getItemFromIDVF :: P.Int
 -> IVFonts a
 -> P.IO (IVFont ())
getItemFromIDVF objectID =
  A.propertyGet "ItemFromID"
   [A.inInt objectID]
   A.outIDispatch

getObjectTypeVF :: IVFonts a
 -> P.IO (P.Int)
getObjectTypeVF =
  A.propertyGet "ObjectType"
   []
   A.outInt

getStatVF :: IVFonts a
 -> P.IO (P.Int)
getStatVF =
  A.propertyGet "Stat"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVFont
-- 
-- --------------------------------------------------
data IVFont_ a = IVFont__
   
type IVFont a = A.IDispatch (IVFont_ a)
iidIVFont :: Com.IID (IVFont ())
iidIVFont = Com.mkIID "{000D0714-0000-0000-C000-000000000046}"

applicationVF :: IVFont a
 -> P.IO (IVApplication ())
applicationVF =
  A.propertyGet "Application"
   []
   A.outIDispatch

documentVF :: IVFont a
 -> P.IO (IVDocument ())
documentVF =
  A.propertyGet "Document"
   []
   A.outIDispatch

getIndexVF :: IVFont a
 -> P.IO (P.Int)
getIndexVF =
  A.propertyGet "Index"
   []
   A.outInt

getNameVF :: IVFont a
 -> P.IO (P.String)
getNameVF =
  A.propertyGet "Name"
   []
   A.outString

getIDVF :: IVFont a
 -> P.IO (P.Int)
getIDVF =
  A.propertyGet "ID"
   []
   A.outInt

getAttributesVF :: IVFont a
 -> P.IO (P.Int)
getAttributesVF =
  A.propertyGet "Attributes"
   []
   A.outInt

getCharSetVF :: IVFont a
 -> P.IO (P.Int)
getCharSetVF =
  A.propertyGet "CharSet"
   []
   A.outInt

getPitchAndFamilyVF :: IVFont a
 -> P.IO (P.Int)
getPitchAndFamilyVF =
  A.propertyGet "PitchAndFamily"
   []
   A.outInt

objectTypeVF :: IVFont a
 -> P.IO (P.Int)
objectTypeVF =
  A.propertyGet "ObjectType"
   []
   A.outInt

statVF :: IVFont a
 -> P.IO (P.Int)
statVF =
  A.propertyGet "Stat"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVColors
-- 
-- --------------------------------------------------
data IVColors_ a = IVColors__
   
type IVColors a = A.IDispatch (IVColors_ a)
iidIVColors :: Com.IID (IVColors ())
iidIVColors = Com.mkIID "{000D0717-0000-0000-C000-000000000046}"

applicationVC3 :: IVColors a
 -> P.IO (IVApplication ())
applicationVC3 =
  A.propertyGet "Application"
   []
   A.outIDispatch

documentVC2 :: IVColors a
 -> P.IO (IVDocument ())
documentVC2 =
  A.propertyGet "Document"
   []
   A.outIDispatch

countVC :: IVColors a
 -> P.IO (P.Int)
countVC =
  A.propertyGet "Count"
   []
   A.outInt

itemVC :: P.Int
 -> IVColors a
 -> P.IO (IVColor ())
itemVC index =
  A.propertyGet "Item"
   [A.inInt index]
   A.outIDispatch

objectTypeVC3 :: IVColors a
 -> P.IO (P.Int)
objectTypeVC3 =
  A.propertyGet "ObjectType"
   []
   A.outInt

statVC2 :: IVColors a
 -> P.IO (P.Int)
statVC2 =
  A.propertyGet "Stat"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVColor
-- 
-- --------------------------------------------------
data IVColor_ a = IVColor__
   
type IVColor a = A.IDispatch (IVColor_ a)
iidIVColor :: Com.IID (IVColor ())
iidIVColor = Com.mkIID "{000D0716-0000-0000-C000-000000000046}"

applicationVC4 :: IVColor a
 -> P.IO (IVApplication ())
applicationVC4 =
  A.propertyGet "Application"
   []
   A.outIDispatch

documentVC3 :: IVColor a
 -> P.IO (IVDocument ())
documentVC3 =
  A.propertyGet "Document"
   []
   A.outIDispatch

indexVC :: IVColor a
 -> P.IO (P.Int)
indexVC =
  A.propertyGet "Index"
   []
   A.outInt

getRedVC :: IVColor a
 -> P.IO (P.Int)
getRedVC =
  A.propertyGet "Red"
   []
   A.outInt

setRedVC :: P.Int
 -> IVColor a
 -> P.IO ()
setRedVC lpi2Ret =
  A.propertySet "Red"
   [A.inInt lpi2Ret]

getGreenVC :: IVColor a
 -> P.IO (P.Int)
getGreenVC =
  A.propertyGet "Green"
   []
   A.outInt

setGreenVC :: P.Int
 -> IVColor a
 -> P.IO ()
setGreenVC lpi2Ret =
  A.propertySet "Green"
   [A.inInt lpi2Ret]

getBlueVC :: IVColor a
 -> P.IO (P.Int)
getBlueVC =
  A.propertyGet "Blue"
   []
   A.outInt

setBlueVC :: P.Int
 -> IVColor a
 -> P.IO ()
setBlueVC lpi2Ret =
  A.propertySet "Blue"
   [A.inInt lpi2Ret]

getFlagsVC :: IVColor a
 -> P.IO (P.Int)
getFlagsVC =
  A.propertyGet "Flags"
   []
   A.outInt

setFlagsVC :: P.Int
 -> IVColor a
 -> P.IO ()
setFlagsVC lpi2Ret =
  A.propertySet "Flags"
   [A.inInt lpi2Ret]

getPaletteEntryVC :: IVColor a
 -> P.IO (P.Int)
getPaletteEntryVC =
  A.propertyGet "PaletteEntry"
   []
   A.outInt

setPaletteEntryVC :: P.Int
 -> IVColor a
 -> P.IO ()
setPaletteEntryVC lpi4Ret =
  A.propertySet "PaletteEntry"
   [A.inInt lpi4Ret]

objectTypeVC4 :: IVColor a
 -> P.IO (P.Int)
objectTypeVC4 =
  A.propertyGet "ObjectType"
   []
   A.outInt

statVC3 :: IVColor a
 -> P.IO (P.Int)
statVC3 =
  A.propertyGet "Stat"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- coclass Path
-- 
-- --------------------------------------------------
clsidPath :: Com.CLSID
clsidPath = Com.mkCLSID "{000D0A1F-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Paths
-- 
-- --------------------------------------------------
clsidPaths :: Com.CLSID
clsidPaths = Com.mkCLSID "{000D0A1E-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass OLEObjects
-- 
-- --------------------------------------------------
clsidOLEObjects :: Com.CLSID
clsidOLEObjects =
  Com.mkCLSID "{000D0A1C-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass OLEObject
-- 
-- --------------------------------------------------
clsidOLEObject :: Com.CLSID
clsidOLEObject =
  Com.mkCLSID "{000D0A1D-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface IVDispExtender
-- 
-- --------------------------------------------------
data IVDispExtender_ a = IVDispExtender__
   
type IVDispExtender a = A.IDispatch (IVDispExtender_ a)
iidIVDispExtender :: Com.IID (IVDispExtender ())
iidIVDispExtender =
  Com.mkIID "{000D0D0F-0000-0000-C000-000000000046}"

getNameVDE :: IVDispExtender a
 -> P.IO (P.String)
getNameVDE =
  A.propertyGet "Name"
   []
   A.outString

setNameVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setNameVDE x0 =
  A.propertySet "Name"
   [A.inString x0]

getObjectVDE :: IVDispExtender a
 -> P.IO (Com.IUnknown ())
getObjectVDE =
  A.propertyGet "Object"
   []
   A.outIUnknown

getParentVDE :: IVDispExtender a
 -> P.IO (Com.IUnknown ())
getParentVDE =
  A.propertyGet "Parent"
   []
   A.outIUnknown

deleteVDE :: IVDispExtender a
 -> P.IO ()
deleteVDE =
  A.method0 "Delete"
   []

index :: IVDispExtender a
 -> P.IO ()
index =
  A.method0 "Index"
   []

getShapeVDE :: IVDispExtender a
 -> P.IO (IVShape ())
getShapeVDE =
  A.propertyGet "Shape"
   []
   A.outIDispatch

groupVDE :: IVDispExtender a
 -> P.IO ()
groupVDE =
  A.method0 "Group"
   []

bringForwardVDE :: IVDispExtender a
 -> P.IO ()
bringForwardVDE =
  A.method0 "BringForward"
   []

bringToFrontVDE :: IVDispExtender a
 -> P.IO ()
bringToFrontVDE =
  A.method0 "BringToFront"
   []

convertToGroupVDE :: IVDispExtender a
 -> P.IO ()
convertToGroupVDE =
  A.method0 "ConvertToGroup"
   []

sendBackwardVDE :: IVDispExtender a
 -> P.IO ()
sendBackwardVDE =
  A.method0 "SendBackward"
   []

sendToBackVDE :: IVDispExtender a
 -> P.IO ()
sendToBackVDE =
  A.method0 "SendToBack"
   []

getDocumentVDE :: IVDispExtender a
 -> P.IO (IVDocument ())
getDocumentVDE =
  A.propertyGet "Document"
   []
   A.outIDispatch

getShapeParentVDE :: IVDispExtender a
 -> P.IO (A.IDispatch ())
getShapeParentVDE =
  A.propertyGet "ShapeParent"
   []
   A.outIDispatch

getApplicationVDE :: IVDispExtender a
 -> P.IO (IVApplication ())
getApplicationVDE =
  A.propertyGet "Application"
   []
   A.outIDispatch

getMasterVDE :: IVDispExtender a
 -> P.IO (IVMaster ())
getMasterVDE =
  A.propertyGet "Master"
   []
   A.outIDispatch

getCellsVDE :: P.String
 -> IVDispExtender a
 -> P.IO (IVCell ())
getCellsVDE cellName =
  A.propertyGet "Cells"
   [A.inString cellName]
   A.outIDispatch

getCellsSRCVDE :: P.Int
 -> P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (IVCell ())
getCellsSRCVDE section row column =
  A.propertyGet "CellsSRC"
   [ A.inInt section
   , A.inInt row
   , A.inInt column
   ]
   A.outIDispatch

getData1VDE :: IVDispExtender a
 -> P.IO (P.String)
getData1VDE =
  A.propertyGet "Data1"
   []
   A.outString

setData1VDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setData1VDE x0 =
  A.propertySet "Data1"
   [A.inString x0]

getData2VDE :: IVDispExtender a
 -> P.IO (P.String)
getData2VDE =
  A.propertyGet "Data2"
   []
   A.outString

setData2VDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setData2VDE x0 =
  A.propertySet "Data2"
   [A.inString x0]

getData3VDE :: IVDispExtender a
 -> P.IO (P.String)
getData3VDE =
  A.propertyGet "Data3"
   []
   A.outString

setData3VDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setData3VDE x0 =
  A.propertySet "Data3"
   [A.inString x0]

getHelpVDE :: IVDispExtender a
 -> P.IO (P.String)
getHelpVDE =
  A.propertyGet "Help"
   []
   A.outString

setHelpVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setHelpVDE x0 =
  A.propertySet "Help"
   [A.inString x0]

getNameIDVDE :: IVDispExtender a
 -> P.IO (P.String)
getNameIDVDE =
  A.propertyGet "NameID"
   []
   A.outString

shapeCopy :: IVDispExtender a
 -> P.IO ()
shapeCopy =
  A.method0 "ShapeCopy"
   []

shapeCut :: IVDispExtender a
 -> P.IO ()
shapeCut =
  A.method0 "ShapeCut"
   []

shapeDelete :: IVDispExtender a
 -> P.IO ()
shapeDelete =
  A.method0 "ShapeDelete"
   []

shapeDuplicate :: IVDispExtender a
 -> P.IO ()
shapeDuplicate =
  A.method0 "ShapeDuplicate"
   []

getRowCountVDE :: P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getRowCountVDE section =
  A.propertyGet "RowCount"
   [A.inInt section]
   A.outInt

addSectionVDE :: P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
addSectionVDE section =
  A.method1 "AddSection"
   [A.inInt section]
   A.outInt

deleteSectionVDE :: P.Int
 -> IVDispExtender a
 -> P.IO ()
deleteSectionVDE section =
  A.method0 "DeleteSection"
   [A.inInt section]

addRowVDE :: P.Int
 -> P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
addRowVDE section row rowTag =
  A.method1 "AddRow"
   [ A.inInt section
   , A.inInt row
   , A.inInt rowTag
   ]
   A.outInt

deleteRowVDE :: P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO ()
deleteRowVDE section row =
  A.method0 "DeleteRow"
   [ A.inInt section
   , A.inInt row
   ]

getRowsCellCountVDE :: P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getRowsCellCountVDE section row =
  A.propertyGet "RowsCellCount"
   [ A.inInt section
   , A.inInt row
   ]
   A.outInt

getRowTypeVDE :: P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getRowTypeVDE section row =
  A.propertyGet "RowType"
   [ A.inInt section
   , A.inInt row
   ]
   A.outInt

setRowTypeVDE :: P.Int
 -> P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO ()
setRowTypeVDE section row x0 =
  A.propertySet "RowType"
   [ A.inInt section
   , A.inInt row
   , A.inInt x0
   ]

setCenterVDE :: P.Double
 -> P.Double
 -> IVDispExtender a
 -> P.IO ()
setCenterVDE xPos yPos =
  A.method0 "SetCenter"
   [ A.inDouble xPos
   , A.inDouble yPos
   ]

getConnectsVDE :: IVDispExtender a
 -> P.IO (IVConnects ())
getConnectsVDE =
  A.propertyGet "Connects"
   []
   A.outIDispatch

getShapeIndexVDE :: IVDispExtender a
 -> P.IO (P.Int)
getShapeIndexVDE =
  A.propertyGet "ShapeIndex"
   []
   A.outInt

getStyleVDE :: IVDispExtender a
 -> P.IO (P.String)
getStyleVDE =
  A.propertyGet "Style"
   []
   A.outString

setStyleVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setStyleVDE x0 =
  A.propertySet "Style"
   [A.inString x0]

setStyleKeepFmtVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setStyleKeepFmtVDE x0 =
  A.propertySet "StyleKeepFmt"
   [A.inString x0]

getLineStyleVDE :: IVDispExtender a
 -> P.IO (P.String)
getLineStyleVDE =
  A.propertyGet "LineStyle"
   []
   A.outString

setLineStyleVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setLineStyleVDE x0 =
  A.propertySet "LineStyle"
   [A.inString x0]

setLineStyleKeepFmtVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setLineStyleKeepFmtVDE x0 =
  A.propertySet "LineStyleKeepFmt"
   [A.inString x0]

getFillStyleVDE :: IVDispExtender a
 -> P.IO (P.String)
getFillStyleVDE =
  A.propertyGet "FillStyle"
   []
   A.outString

setFillStyleVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setFillStyleVDE x0 =
  A.propertySet "FillStyle"
   [A.inString x0]

setFillStyleKeepFmtVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
setFillStyleKeepFmtVDE x0 =
  A.propertySet "FillStyleKeepFmt"
   [A.inString x0]

exportVDE :: P.String
 -> IVDispExtender a
 -> P.IO ()
exportVDE fileName =
  A.method0 "Export"
   [A.inString fileName]

getUniqueIDVDE :: P.Int
 -> IVDispExtender a
 -> P.IO (P.String)
getUniqueIDVDE fUniqueID =
  A.propertyGet "UniqueID"
   [A.inInt fUniqueID]
   A.outString

getContainingPageVDE :: IVDispExtender a
 -> P.IO (IVPage ())
getContainingPageVDE =
  A.propertyGet "ContainingPage"
   []
   A.outIDispatch

getContainingMasterVDE :: IVDispExtender a
 -> P.IO (IVMaster ())
getContainingMasterVDE =
  A.propertyGet "ContainingMaster"
   []
   A.outIDispatch

getContainingShapeVDE :: IVDispExtender a
 -> P.IO (IVShape ())
getContainingShapeVDE =
  A.propertyGet "ContainingShape"
   []
   A.outIDispatch

getSectionExistsVDE :: P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getSectionExistsVDE section fLocalExists =
  A.propertyGet "SectionExists"
   [ A.inInt section
   , A.inInt fLocalExists
   ]
   A.outInt

getRowExistsVDE :: P.Int
 -> P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getRowExistsVDE section row fLocalExists =
  A.propertyGet "RowExists"
   [ A.inInt section
   , A.inInt row
   , A.inInt fLocalExists
   ]
   A.outInt

getCellExistsVDE :: P.String
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getCellExistsVDE cellName fLocalExists =
  A.propertyGet "CellExists"
   [ A.inString cellName
   , A.inInt fLocalExists
   ]
   A.outInt

getCellsSRCExistsVDE :: P.Int
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
getCellsSRCExistsVDE section row column fLocalExists =
  A.propertyGet "CellsSRCExists"
   [ A.inInt section
   , A.inInt row
   , A.inInt column
   , A.inInt fLocalExists
   ]
   A.outInt

getLayerCountVDE :: IVDispExtender a
 -> P.IO (P.Int)
getLayerCountVDE =
  A.propertyGet "LayerCount"
   []
   A.outInt

getLayerVDE :: P.Int
 -> IVDispExtender a
 -> P.IO (IVLayer ())
getLayerVDE index =
  A.propertyGet "Layer"
   [A.inInt index]
   A.outIDispatch

addNamedRowVDE :: P.Int
 -> P.String
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
addNamedRowVDE section rowName rowTag =
  A.method1 "AddNamedRow"
   [ A.inInt section
   , A.inString rowName
   , A.inInt rowTag
   ]
   A.outInt

addRowsVDE :: P.Int
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
addRowsVDE section row rowTag rowCount =
  A.method1 "AddRows"
   [ A.inInt section
   , A.inInt row
   , A.inInt rowTag
   , A.inInt rowCount
   ]
   A.outInt

getEventListVDE :: IVDispExtender a
 -> P.IO (IVEventList ())
getEventListVDE =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVDE :: IVDispExtender a
 -> P.IO (P.Int)
getPersistsEventsVDE =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getClassIDVDE :: IVDispExtender a
 -> P.IO (P.String)
getClassIDVDE =
  A.propertyGet "ClassID"
   []
   A.outString

getShapeObjectVDE :: IVDispExtender a
 -> P.IO (A.IDispatch ())
getShapeObjectVDE =
  A.propertyGet "ShapeObject"
   []
   A.outIDispatch

openSheetWindowVDE :: IVDispExtender a
 -> P.IO (IVWindow ())
openSheetWindowVDE =
  A.method1 "OpenSheetWindow"
   []
   A.outIDispatch

getShapeIDVDE :: IVDispExtender a
 -> P.IO (P.Int)
getShapeIDVDE =
  A.propertyGet "ShapeID"
   []
   A.outInt

getFormulasVDE :: SafeArray P.Int
 -> IVDispExtender a
 -> P.IO (SafeArray ())
getFormulasVDE sRCStream =
  A.method1 "GetFormulas"
   [inSafeArray sRCStream]
   outSafeArray

getResultsVDE :: SafeArray P.Int
 -> P.Int
 -> SafeArray ()
 -> IVDispExtender a
 -> P.IO (SafeArray ())
getResultsVDE sRCStream flags unitsNamesOrCodes =
  A.method1 "GetResults"
   [ inSafeArray sRCStream
   , A.inInt flags
   , inSafeArray unitsNamesOrCodes
   ]
   outSafeArray

setFormulasVDE :: SafeArray P.Int
 -> SafeArray ()
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
setFormulasVDE sRCStream formulaArray flags =
  A.method1 "SetFormulas"
   [ inSafeArray sRCStream
   , inSafeArray formulaArray
   , A.inInt flags
   ]
   A.outInt

setResultsVDE :: SafeArray P.Int
 -> SafeArray ()
 -> SafeArray ()
 -> P.Int
 -> IVDispExtender a
 -> P.IO (P.Int)
setResultsVDE sRCStream unitsNamesOrCodes resultArray flags =
  A.method1 "SetResults"
   [ inSafeArray sRCStream
   , inSafeArray unitsNamesOrCodes
   , inSafeArray resultArray
   , A.inInt flags
   ]
   A.outInt

getFromConnectsVDE :: IVDispExtender a
 -> P.IO (IVConnects ())
getFromConnectsVDE =
  A.propertyGet "FromConnects"
   []
   A.outIDispatch

boundingBoxVDE :: P.Int
 -> IVDispExtender a
 -> P.IO (P.Double, P.Double, P.Double, P.Double)
boundingBoxVDE flags =
  A.method4 "BoundingBox"
   [A.inInt flags]
   A.outDouble
   A.outDouble
   A.outDouble
   A.outDouble

hitTestVDE :: P.Double
 -> P.Double
 -> P.Double
 -> IVDispExtender a
 -> P.IO (P.Int)
hitTestVDE xPos yPos tolerance =
  A.method1 "HitTest"
   [ A.inDouble xPos
   , A.inDouble yPos
   , A.inDouble tolerance
   ]
   A.outInt

getHyperlinkVDE :: IVDispExtender a
 -> P.IO (IVHyperlink ())
getHyperlinkVDE =
  A.propertyGet "Hyperlink"
   []
   A.outIDispatch

getProgIDVDE :: IVDispExtender a
 -> P.IO (P.String)
getProgIDVDE =
  A.propertyGet "ProgID"
   []
   A.outString

getObjectIsInheritedVDE :: IVDispExtender a
 -> P.IO (P.Int)
getObjectIsInheritedVDE =
  A.propertyGet "ObjectIsInherited"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- interface IVExtender
-- 
-- --------------------------------------------------
data IVExtender_ a = IVExtender__
   
type IVExtender a = A.IDispatch (IVExtender_ a)
iidIVExtender :: Com.IID (IVExtender ())
iidIVExtender = Com.mkIID "{000D0D0E-0000-0000-C000-000000000046}"

getNameVE :: IVExtender a
 -> P.IO (P.String)
getNameVE =
  A.propertyGet "Name"
   []
   A.outString

setNameVE :: P.String
 -> IVExtender a
 -> P.IO ()
setNameVE pbstr =
  A.propertySet "Name"
   [A.inString pbstr]

getObjectVE :: IVExtender a
 -> P.IO (Com.IUnknown ())
getObjectVE =
  A.propertyGet "Object"
   []
   A.outIUnknown

getParentVE :: IVExtender a
 -> P.IO (Com.IUnknown ())
getParentVE =
  A.propertyGet "Parent"
   []
   A.outIUnknown

deleteVE0 :: IVExtender a
 -> P.IO ()
deleteVE0 =
  A.method0 "Delete"
   []

indexVE :: IVExtender a
 -> P.IO ()
indexVE =
  A.method0 "Index"
   []

getShapeVE :: IVExtender a
 -> P.IO (IVShape ())
getShapeVE =
  A.propertyGet "Shape"
   []
   A.outIDispatch

groupVE :: IVExtender a
 -> P.IO ()
groupVE =
  A.method0 "Group"
   []

bringForwardVE :: IVExtender a
 -> P.IO ()
bringForwardVE =
  A.method0 "BringForward"
   []

bringToFrontVE :: IVExtender a
 -> P.IO ()
bringToFrontVE =
  A.method0 "BringToFront"
   []

convertToGroupVE :: IVExtender a
 -> P.IO ()
convertToGroupVE =
  A.method0 "ConvertToGroup"
   []

sendBackwardVE :: IVExtender a
 -> P.IO ()
sendBackwardVE =
  A.method0 "SendBackward"
   []

sendToBackVE :: IVExtender a
 -> P.IO ()
sendToBackVE =
  A.method0 "SendToBack"
   []

getDocumentVE :: IVExtender a
 -> P.IO (IVDocument ())
getDocumentVE =
  A.propertyGet "Document"
   []
   A.outIDispatch

getShapeParentVE :: IVExtender a
 -> P.IO (A.IDispatch ())
getShapeParentVE =
  A.propertyGet "ShapeParent"
   []
   A.outIDispatch

applicationVE :: IVExtender a
 -> P.IO (IVApplication ())
applicationVE =
  A.propertyGet "Application"
   []
   A.outIDispatch

getMasterVE :: IVExtender a
 -> P.IO (IVMaster ())
getMasterVE =
  A.propertyGet "Master"
   []
   A.outIDispatch

getCellsVE :: P.String
 -> IVExtender a
 -> P.IO (IVCell ())
getCellsVE cellName =
  A.propertyGet "Cells"
   [A.inString cellName]
   A.outIDispatch

getCellsSRCVE :: P.Int
 -> P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (IVCell ())
getCellsSRCVE section row column =
  A.propertyGet "CellsSRC"
   [ A.inInt section
   , A.inInt row
   , A.inInt column
   ]
   A.outIDispatch

getData1VE :: IVExtender a
 -> P.IO (P.String)
getData1VE =
  A.propertyGet "Data1"
   []
   A.outString

setData1VE :: P.String
 -> IVExtender a
 -> P.IO ()
setData1VE lpbstrRet =
  A.propertySet "Data1"
   [A.inString lpbstrRet]

getData2VE :: IVExtender a
 -> P.IO (P.String)
getData2VE =
  A.propertyGet "Data2"
   []
   A.outString

setData2VE :: P.String
 -> IVExtender a
 -> P.IO ()
setData2VE lpbstrRet =
  A.propertySet "Data2"
   [A.inString lpbstrRet]

getData3VE :: IVExtender a
 -> P.IO (P.String)
getData3VE =
  A.propertyGet "Data3"
   []
   A.outString

setData3VE :: P.String
 -> IVExtender a
 -> P.IO ()
setData3VE lpbstrRet =
  A.propertySet "Data3"
   [A.inString lpbstrRet]

getHelpVE :: IVExtender a
 -> P.IO (P.String)
getHelpVE =
  A.propertyGet "Help"
   []
   A.outString

setHelpVE :: P.String
 -> IVExtender a
 -> P.IO ()
setHelpVE lpbstrRet =
  A.propertySet "Help"
   [A.inString lpbstrRet]

getNameIDVE :: IVExtender a
 -> P.IO (P.String)
getNameIDVE =
  A.propertyGet "NameID"
   []
   A.outString

shapeCopyVE :: IVExtender a
 -> P.IO ()
shapeCopyVE =
  A.method0 "ShapeCopy"
   []

shapeCutVE :: IVExtender a
 -> P.IO ()
shapeCutVE =
  A.method0 "ShapeCut"
   []

shapeDeleteVE :: IVExtender a
 -> P.IO ()
shapeDeleteVE =
  A.method0 "ShapeDelete"
   []

shapeDuplicateVE :: IVExtender a
 -> P.IO ()
shapeDuplicateVE =
  A.method0 "ShapeDuplicate"
   []

getRowCountVE :: P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getRowCountVE section =
  A.propertyGet "RowCount"
   [A.inInt section]
   A.outInt

addSectionVE :: P.Int
 -> IVExtender a
 -> P.IO (P.Int)
addSectionVE section =
  A.function1 "AddSection"
   [A.inInt section]
   A.outInt

deleteSectionVE :: P.Int
 -> IVExtender a
 -> P.IO ()
deleteSectionVE section =
  A.method0 "DeleteSection"
   [A.inInt section]

addRowVE :: P.Int
 -> P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
addRowVE section row rowTag =
  A.function1 "AddRow"
   [ A.inInt section
   , A.inInt row
   , A.inInt rowTag
   ]
   A.outInt

deleteRowVE :: P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO ()
deleteRowVE section row =
  A.method0 "DeleteRow"
   [ A.inInt section
   , A.inInt row
   ]

getRowsCellCountVE :: P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getRowsCellCountVE section row =
  A.propertyGet "RowsCellCount"
   [ A.inInt section
   , A.inInt row
   ]
   A.outInt

getRowTypeVE :: P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getRowTypeVE section row =
  A.propertyGet "RowType"
   [ A.inInt section
   , A.inInt row
   ]
   A.outInt

setRowTypeVE :: P.Int
 -> P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO ()
setRowTypeVE section row lpi2Ret =
  A.propertySet "RowType"
   [ A.inInt section
   , A.inInt row
   , A.inInt lpi2Ret
   ]

setCenterVE :: P.Double
 -> P.Double
 -> IVExtender a
 -> P.IO ()
setCenterVE xPos yPos =
  A.method0 "SetCenter"
   [ A.inDouble xPos
   , A.inDouble yPos
   ]

getConnectsVE :: IVExtender a
 -> P.IO (IVConnects ())
getConnectsVE =
  A.propertyGet "Connects"
   []
   A.outIDispatch

getShapeIndexVE :: IVExtender a
 -> P.IO (P.Int)
getShapeIndexVE =
  A.propertyGet "ShapeIndex"
   []
   A.outInt

getStyleVE :: IVExtender a
 -> P.IO (P.String)
getStyleVE =
  A.propertyGet "Style"
   []
   A.outString

setStyleVE :: P.String
 -> IVExtender a
 -> P.IO ()
setStyleVE lpbstrRet =
  A.propertySet "Style"
   [A.inString lpbstrRet]

setStyleKeepFmtVE :: P.String
 -> IVExtender a
 -> P.IO ()
setStyleKeepFmtVE x0 =
  A.propertySet "StyleKeepFmt"
   [A.inString x0]

getLineStyleVE :: IVExtender a
 -> P.IO (P.String)
getLineStyleVE =
  A.propertyGet "LineStyle"
   []
   A.outString

setLineStyleVE :: P.String
 -> IVExtender a
 -> P.IO ()
setLineStyleVE lpbstrRet =
  A.propertySet "LineStyle"
   [A.inString lpbstrRet]

setLineStyleKeepFmtVE :: P.String
 -> IVExtender a
 -> P.IO ()
setLineStyleKeepFmtVE x0 =
  A.propertySet "LineStyleKeepFmt"
   [A.inString x0]

getFillStyleVE :: IVExtender a
 -> P.IO (P.String)
getFillStyleVE =
  A.propertyGet "FillStyle"
   []
   A.outString

setFillStyleVE :: P.String
 -> IVExtender a
 -> P.IO ()
setFillStyleVE lpbstrRet =
  A.propertySet "FillStyle"
   [A.inString lpbstrRet]

setFillStyleKeepFmtVE :: P.String
 -> IVExtender a
 -> P.IO ()
setFillStyleKeepFmtVE x0 =
  A.propertySet "FillStyleKeepFmt"
   [A.inString x0]

exportVE :: P.String
 -> IVExtender a
 -> P.IO ()
exportVE fileName =
  A.method0 "Export"
   [A.inString fileName]

getUniqueIDVE :: P.Int
 -> IVExtender a
 -> P.IO (P.String)
getUniqueIDVE fUniqueID =
  A.propertyGet "UniqueID"
   [A.inInt fUniqueID]
   A.outString

getContainingPageVE :: IVExtender a
 -> P.IO (IVPage ())
getContainingPageVE =
  A.propertyGet "ContainingPage"
   []
   A.outIDispatch

getContainingMasterVE :: IVExtender a
 -> P.IO (IVMaster ())
getContainingMasterVE =
  A.propertyGet "ContainingMaster"
   []
   A.outIDispatch

getContainingShapeVE :: IVExtender a
 -> P.IO (IVShape ())
getContainingShapeVE =
  A.propertyGet "ContainingShape"
   []
   A.outIDispatch

getSectionExistsVE :: P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getSectionExistsVE section fLocalExists =
  A.propertyGet "SectionExists"
   [ A.inInt section
   , A.inInt fLocalExists
   ]
   A.outInt

getRowExistsVE :: P.Int
 -> P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getRowExistsVE section row fLocalExists =
  A.propertyGet "RowExists"
   [ A.inInt section
   , A.inInt row
   , A.inInt fLocalExists
   ]
   A.outInt

getCellExistsVE :: P.String
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getCellExistsVE cellName fLocalExists =
  A.propertyGet "CellExists"
   [ A.inString cellName
   , A.inInt fLocalExists
   ]
   A.outInt

getCellsSRCExistsVE :: P.Int
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
getCellsSRCExistsVE section row column fLocalExists =
  A.propertyGet "CellsSRCExists"
   [ A.inInt section
   , A.inInt row
   , A.inInt column
   , A.inInt fLocalExists
   ]
   A.outInt

getLayerCountVE :: IVExtender a
 -> P.IO (P.Int)
getLayerCountVE =
  A.propertyGet "LayerCount"
   []
   A.outInt

getLayerVE :: P.Int
 -> IVExtender a
 -> P.IO (IVLayer ())
getLayerVE index =
  A.propertyGet "Layer"
   [A.inInt index]
   A.outIDispatch

addNamedRowVE :: P.Int
 -> P.String
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
addNamedRowVE section rowName rowTag =
  A.function1 "AddNamedRow"
   [ A.inInt section
   , A.inString rowName
   , A.inInt rowTag
   ]
   A.outInt

addRowsVE :: P.Int
 -> P.Int
 -> P.Int
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
addRowsVE section row rowTag rowCount =
  A.function1 "AddRows"
   [ A.inInt section
   , A.inInt row
   , A.inInt rowTag
   , A.inInt rowCount
   ]
   A.outInt

eventListVE :: IVExtender a
 -> P.IO (IVEventList ())
eventListVE =
  A.propertyGet "EventList"
   []
   A.outIDispatch

getPersistsEventsVE :: IVExtender a
 -> P.IO (P.Int)
getPersistsEventsVE =
  A.propertyGet "PersistsEvents"
   []
   A.outInt

getClassIDVE :: IVExtender a
 -> P.IO (P.String)
getClassIDVE =
  A.propertyGet "ClassID"
   []
   A.outString

getShapeObjectVE :: IVExtender a
 -> P.IO (A.IDispatch ())
getShapeObjectVE =
  A.propertyGet "ShapeObject"
   []
   A.outIDispatch

openSheetWindowVE :: IVExtender a
 -> P.IO (IVWindow ())
openSheetWindowVE =
  A.function1 "OpenSheetWindow"
   []
   A.outIDispatch

getShapeIDVE :: IVExtender a
 -> P.IO (P.Int)
getShapeIDVE =
  A.propertyGet "ShapeID"
   []
   A.outInt

getFormulasVE :: SafeArray P.Int
 -> IVExtender a
 -> P.IO (SafeArray ())
getFormulasVE sRCStream =
  A.method1 "GetFormulas"
   [inSafeArray sRCStream]
   outSafeArray

getResultsVE :: SafeArray P.Int
 -> P.Int
 -> SafeArray ()
 -> IVExtender a
 -> P.IO (SafeArray ())
getResultsVE sRCStream flags unitsNamesOrCodes =
  A.method1 "GetResults"
   [ inSafeArray sRCStream
   , A.inInt flags
   , inSafeArray unitsNamesOrCodes
   ]
   outSafeArray

setFormulasVE :: SafeArray P.Int
 -> SafeArray ()
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
setFormulasVE sRCStream formulaArray flags =
  A.function1 "SetFormulas"
   [ inSafeArray sRCStream
   , inSafeArray formulaArray
   , A.inInt flags
   ]
   A.outInt

setResultsVE :: SafeArray P.Int
 -> SafeArray ()
 -> SafeArray ()
 -> P.Int
 -> IVExtender a
 -> P.IO (P.Int)
setResultsVE sRCStream unitsNamesOrCodes resultArray flags =
  A.function1 "SetResults"
   [ inSafeArray sRCStream
   , inSafeArray unitsNamesOrCodes
   , inSafeArray resultArray
   , A.inInt flags
   ]
   A.outInt

getFromConnectsVE :: IVExtender a
 -> P.IO (IVConnects ())
getFromConnectsVE =
  A.propertyGet "FromConnects"
   []
   A.outIDispatch

boundingBoxVE :: P.Int
 -> IVExtender a
 -> P.IO (P.Double, P.Double, P.Double, P.Double)
boundingBoxVE flags =
  A.method4 "BoundingBox"
   [A.inInt flags]
   A.outDouble
   A.outDouble
   A.outDouble
   A.outDouble

hitTestVE :: P.Double
 -> P.Double
 -> P.Double
 -> IVExtender a
 -> P.IO (P.Int)
hitTestVE xPos yPos tolerance =
  A.function1 "HitTest"
   [ A.inDouble xPos
   , A.inDouble yPos
   , A.inDouble tolerance
   ]
   A.outInt

getHyperlinkVE :: IVExtender a
 -> P.IO (IVHyperlink ())
getHyperlinkVE =
  A.propertyGet "Hyperlink"
   []
   A.outIDispatch

getProgIDVE :: IVExtender a
 -> P.IO (P.String)
getProgIDVE =
  A.propertyGet "ProgID"
   []
   A.outString

getObjectIsInheritedVE :: IVExtender a
 -> P.IO (P.Int)
getObjectIsInheritedVE =
  A.propertyGet "ObjectIsInherited"
   []
   A.outInt

-- --------------------------------------------------
-- 
-- coclass Layer
-- 
-- --------------------------------------------------
clsidLayer :: Com.CLSID
clsidLayer = Com.mkCLSID "{000D0A08-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Layers
-- 
-- --------------------------------------------------
clsidLayers :: Com.CLSID
clsidLayers = Com.mkCLSID "{000D0A07-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Selection
-- 
-- --------------------------------------------------
clsidSelection :: Com.CLSID
clsidSelection =
  Com.mkCLSID "{000D0A0E-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Shapes
-- 
-- --------------------------------------------------
clsidShapes :: Com.CLSID
clsidShapes = Com.mkCLSID "{000D0A09-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- interface IVGlobal
-- 
-- --------------------------------------------------
data IVGlobal_ a = IVGlobal__
   
type IVGlobal a = A.IDispatch (IVGlobal_ a)
iidIVGlobal :: Com.IID (IVGlobal ())
iidIVGlobal = Com.mkIID "{000D071C-0000-0000-C000-000000000046}"

getApplicationVG :: IVGlobal a
 -> P.IO (IVApplication ())
getApplicationVG =
  A.propertyGet "Application"
   []
   A.outIDispatch

getActiveDocumentVG :: IVGlobal a
 -> P.IO (IVDocument ())
getActiveDocumentVG =
  A.propertyGet "ActiveDocument"
   []
   A.outIDispatch

getActivePageVG :: IVGlobal a
 -> P.IO (IVPage ())
getActivePageVG =
  A.propertyGet "ActivePage"
   []
   A.outIDispatch

getActiveWindowVG :: IVGlobal a
 -> P.IO (IVWindow ())
getActiveWindowVG =
  A.propertyGet "ActiveWindow"
   []
   A.outIDispatch

getDocumentsVG :: IVGlobal a
 -> P.IO (IVDocuments ())
getDocumentsVG =
  A.propertyGet "Documents"
   []
   A.outIDispatch

getWindowsVG :: IVGlobal a
 -> P.IO (IVWindows ())
getWindowsVG =
  A.propertyGet "Windows"
   []
   A.outIDispatch

getAddonsVG :: IVGlobal a
 -> P.IO (IVAddons ())
getAddonsVG =
  A.propertyGet "Addons"
   []
   A.outIDispatch

getVbeVG :: IVGlobal a
 -> P.IO (A.IDispatch ())
getVbeVG =
  A.propertyGet "Vbe"
   []
   A.outIDispatch

-- --------------------------------------------------
-- 
-- coclass MenuItem
-- 
-- --------------------------------------------------
clsidMenuItem :: Com.CLSID
clsidMenuItem =
  Com.mkCLSID "{000D0210-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass MenuItems
-- 
-- --------------------------------------------------
clsidMenuItems :: Com.CLSID
clsidMenuItems =
  Com.mkCLSID "{000D0215-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Menu
-- 
-- --------------------------------------------------
clsidMenu :: Com.CLSID
clsidMenu = Com.mkCLSID "{000D0220-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Menus
-- 
-- --------------------------------------------------
clsidMenus :: Com.CLSID
clsidMenus = Com.mkCLSID "{000D0224-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass MenuSet
-- 
-- --------------------------------------------------
clsidMenuSet :: Com.CLSID
clsidMenuSet = Com.mkCLSID "{000D0230-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass MenuSets
-- 
-- --------------------------------------------------
clsidMenuSets :: Com.CLSID
clsidMenuSets =
  Com.mkCLSID "{000D0235-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBarItem
-- 
-- --------------------------------------------------
clsidStatusBarItem :: Com.CLSID
clsidStatusBarItem =
  Com.mkCLSID "{000D0270-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBarItems
-- 
-- --------------------------------------------------
clsidStatusBarItems :: Com.CLSID
clsidStatusBarItems =
  Com.mkCLSID "{000D0274-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBar
-- 
-- --------------------------------------------------
clsidStatusBar :: Com.CLSID
clsidStatusBar =
  Com.mkCLSID "{000D0280-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBars
-- 
-- --------------------------------------------------
clsidStatusBars :: Com.CLSID
clsidStatusBars =
  Com.mkCLSID "{000D0284-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarItem
-- 
-- --------------------------------------------------
clsidToolbarItem :: Com.CLSID
clsidToolbarItem =
  Com.mkCLSID "{000D0240-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarItems
-- 
-- --------------------------------------------------
clsidToolbarItems :: Com.CLSID
clsidToolbarItems =
  Com.mkCLSID "{000D0244-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Toolbar
-- 
-- --------------------------------------------------
clsidToolbar :: Com.CLSID
clsidToolbar = Com.mkCLSID "{000D0250-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Toolbars
-- 
-- --------------------------------------------------
clsidToolbars :: Com.CLSID
clsidToolbars =
  Com.mkCLSID "{000D0254-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarSet
-- 
-- --------------------------------------------------
clsidToolbarSet :: Com.CLSID
clsidToolbarSet =
  Com.mkCLSID "{000D0260-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarSets
-- 
-- --------------------------------------------------
clsidToolbarSets :: Com.CLSID
clsidToolbarSets =
  Com.mkCLSID "{000D0265-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass UIObject
-- 
-- --------------------------------------------------
clsidUIObject :: Com.CLSID
clsidUIObject =
  Com.mkCLSID "{000D0201-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Hyperlink
-- 
-- --------------------------------------------------
clsidHyperlink :: Com.CLSID
clsidHyperlink =
  Com.mkCLSID "{000D0A1B-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Global
-- 
-- --------------------------------------------------
clsidGlobal :: Com.CLSID
clsidGlobal = Com.mkCLSID "{000D0A1A-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Fonts
-- 
-- --------------------------------------------------
clsidFonts :: Com.CLSID
clsidFonts = Com.mkCLSID "{000D0A10-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Font
-- 
-- --------------------------------------------------
clsidFont :: Com.CLSID
clsidFont = Com.mkCLSID "{000D0A0F-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass EventList
-- 
-- --------------------------------------------------
clsidEventList :: Com.CLSID
clsidEventList =
  Com.mkCLSID "{000D0A16-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Event
-- 
-- --------------------------------------------------
clsidEvent :: Com.CLSID
clsidEvent = Com.mkCLSID "{000D0A15-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EWindows
-- 
-- --------------------------------------------------
data EWindows_ a = EWindows__
   
type EWindows a = A.IDispatch (EWindows_ a)
iidEWindows :: Com.IID (EWindows ())
iidEWindows = Com.mkIID "{000D0B01-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Windows
-- 
-- --------------------------------------------------
clsidWindows :: Com.CLSID
clsidWindows = Com.mkCLSID "{000D0A0B-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EWindow
-- 
-- --------------------------------------------------
data EWindow_ a = EWindow__
   
type EWindow a = A.IDispatch (EWindow_ a)
iidEWindow :: Com.IID (EWindow ())
iidEWindow = Com.mkIID "{000D0B02-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Window
-- 
-- --------------------------------------------------
clsidWindow :: Com.CLSID
clsidWindow = Com.mkCLSID "{000D0A0C-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EStyles
-- 
-- --------------------------------------------------
data EStyles_ a = EStyles__
   
type EStyles a = A.IDispatch (EStyles_ a)
iidEStyles :: Com.IID (EStyles ())
iidEStyles = Com.mkIID "{000D0B05-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Styles
-- 
-- --------------------------------------------------
clsidStyles :: Com.CLSID
clsidStyles = Com.mkCLSID "{000D0A01-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EStyle
-- 
-- --------------------------------------------------
data EStyle_ a = EStyle__
   
type EStyle a = A.IDispatch (EStyle_ a)
iidEStyle :: Com.IID (EStyle ())
iidEStyle = Com.mkIID "{000D0B06-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Style
-- 
-- --------------------------------------------------
clsidStyle :: Com.CLSID
clsidStyle = Com.mkCLSID "{000D0A02-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EShape
-- 
-- --------------------------------------------------
data EShape_ a = EShape__
   
type EShape a = A.IDispatch (EShape_ a)
iidEShape :: Com.IID (EShape ())
iidEShape = Com.mkIID "{000D0B0B-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Extender
-- 
-- --------------------------------------------------
clsidExtender :: Com.CLSID
clsidExtender =
  Com.mkCLSID "{000D0D06-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Shape
-- 
-- --------------------------------------------------
clsidShape :: Com.CLSID
clsidShape = Com.mkCLSID "{000D0A0A-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EPages
-- 
-- --------------------------------------------------
data EPages_ a = EPages__
   
type EPages a = A.IDispatch (EPages_ a)
iidEPages :: Com.IID (EPages ())
iidEPages = Com.mkIID "{000D0B09-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Pages
-- 
-- --------------------------------------------------
clsidPages :: Com.CLSID
clsidPages = Com.mkCLSID "{000D0A05-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EPage
-- 
-- --------------------------------------------------
data EPage_ a = EPage__
   
type EPage a = A.IDispatch (EPage_ a)
iidEPage :: Com.IID (EPage ())
iidEPage = Com.mkIID "{000D0B0A-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Page
-- 
-- --------------------------------------------------
clsidPage :: Com.CLSID
clsidPage = Com.mkCLSID "{000D0A06-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EMasters
-- 
-- --------------------------------------------------
data EMasters_ a = EMasters__
   
type EMasters a = A.IDispatch (EMasters_ a)
iidEMasters :: Com.IID (EMasters ())
iidEMasters = Com.mkIID "{000D0B07-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Masters
-- 
-- --------------------------------------------------
clsidMasters :: Com.CLSID
clsidMasters = Com.mkCLSID "{000D0A03-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EMaster
-- 
-- --------------------------------------------------
data EMaster_ a = EMaster__
   
type EMaster a = A.IDispatch (EMaster_ a)
iidEMaster :: Com.IID (EMaster ())
iidEMaster = Com.mkIID "{000D0B08-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Master
-- 
-- --------------------------------------------------
clsidMaster :: Com.CLSID
clsidMaster = Com.mkCLSID "{000D0A04-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EDocuments
-- 
-- --------------------------------------------------
data EDocuments_ a = EDocuments__
   
type EDocuments a = A.IDispatch (EDocuments_ a)
iidEDocuments :: Com.IID (EDocuments ())
iidEDocuments = Com.mkIID "{000D0B03-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EDocument
-- 
-- --------------------------------------------------
data EDocument_ a = EDocument__
   
type EDocument a = A.IDispatch (EDocument_ a)
iidEDocument :: Com.IID (EDocument ())
iidEDocument = Com.mkIID "{000D0750-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface ECharacters
-- 
-- --------------------------------------------------
data ECharacters_ a = ECharacters__
   
type ECharacters a = A.IDispatch (ECharacters_ a)
iidECharacters :: Com.IID (ECharacters ())
iidECharacters = Com.mkIID "{000D0B0C-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface ECell
-- 
-- --------------------------------------------------
data ECell_ a = ECell__
   
type ECell a = A.IDispatch (ECell_ a)
iidECell :: Com.IID (ECell ())
iidECell = Com.mkIID "{000D0B0D-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EApplication
-- 
-- --------------------------------------------------
data EApplication_ a = EApplication__
   
type EApplication a = A.IDispatch (EApplication_ a)
iidEApplication :: Com.IID (EApplication ())
iidEApplication =
  Com.mkIID "{000D0B00-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Documents
-- 
-- --------------------------------------------------
clsidDocuments :: Com.CLSID
clsidDocuments =
  Com.mkCLSID "{000D0A00-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Document
-- 
-- --------------------------------------------------
clsidDocument :: Com.CLSID
clsidDocument =
  Com.mkCLSID "{00021A21-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Curve
-- 
-- --------------------------------------------------
clsidCurve :: Com.CLSID
clsidCurve = Com.mkCLSID "{000D0A20-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Control
-- 
-- --------------------------------------------------
clsidControl :: Com.CLSID
clsidControl = Com.mkCLSID "{000D0D00-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Connects
-- 
-- --------------------------------------------------
clsidConnects :: Com.CLSID
clsidConnects =
  Com.mkCLSID "{000D0A19-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Connect
-- 
-- --------------------------------------------------
clsidConnect :: Com.CLSID
clsidConnect = Com.mkCLSID "{000D0A18-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Colors
-- 
-- --------------------------------------------------
clsidColors :: Com.CLSID
clsidColors = Com.mkCLSID "{000D0A12-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Color
-- 
-- --------------------------------------------------
clsidColor :: Com.CLSID
clsidColor = Com.mkCLSID "{000D0A11-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Characters
-- 
-- --------------------------------------------------
clsidCharacters :: Com.CLSID
clsidCharacters =
  Com.mkCLSID "{000D0A17-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Cell
-- 
-- --------------------------------------------------
clsidCell :: Com.CLSID
clsidCell = Com.mkCLSID "{000D0A0D-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Application
-- 
-- --------------------------------------------------
clsidApplication :: Com.CLSID
clsidApplication =
  Com.mkCLSID "{00021A20-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Addons
-- 
-- --------------------------------------------------
clsidAddons :: Com.CLSID
clsidAddons = Com.mkCLSID "{000D0A14-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Addon
-- 
-- --------------------------------------------------
clsidAddon :: Com.CLSID
clsidAddon = Com.mkCLSID "{000D0A13-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelTables
-- 
-- --------------------------------------------------
clsidAccelTables :: Com.CLSID
clsidAccelTables =
  Com.mkCLSID "{000D02A4-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelTable
-- 
-- --------------------------------------------------
clsidAccelTable :: Com.CLSID
clsidAccelTable =
  Com.mkCLSID "{000D02A0-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelItems
-- 
-- --------------------------------------------------
clsidAccelItems :: Com.CLSID
clsidAccelItems =
  Com.mkCLSID "{000D0294-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelItem
-- 
-- --------------------------------------------------
clsidAccelItem :: Com.CLSID
clsidAccelItem =
  Com.mkCLSID "{000D0290-0000-0000-C000-000000000046}"

