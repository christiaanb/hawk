-- Automatically generated by HaskellDirect (ihc), version 0.15
-- Created: 15:56 , Tuesday 20 July, 1999

module VisioHawk
       ( VisWinTypes(..)
       , VisUnitCodes(..)
       , VisUniqueIDArgs(..)
       , VisUIStringIDs(..)
       , VisUISpacingTypes(..)
       , VisUIObjSets(..)
       , VisUIIconIDs(..)
       , VisUICtrlTypes(..)
       , VisUICtrlIDs(..)
       , VisUICtrlAtts(..)
       , VisUICmds(..)
       , VisTraceFlags(..)
       , VisToolbarFlavors(..)
       , VisToParts(..)
       , VisStatCodes(..)
       , VisShapeTypes(..)
       , VisShapeIDs(..)
       , VisSelectArgs(..)
       , VisSectionIndices(..)
       , VisScrollbarStates(..)
       , VisRunTypes(..)
       , VisRowTags(..)
       , VisRowIndices(..)
       , VisRoundFlags(..)
       , VisOpenSaveArgs(..)
       , VisObjectTypes(..)
       , VisMasterProperties(..)
       , VisInsertObjArgs(..)
       , VisHitTestResults(..)
       , VisGuideTypes(..)
       , VisGetSetArgs(..)
       , VisFromParts(..)
       , VisFontAttributes(..)
       , VisFieldFormats(..)
       , VisFieldCodes(..)
       , VisFieldCategories(..)
       , VisExistsFlags(..)
       , VisEventCodes(..)
       , VisDrawSplineFlags(..)
       , VisDocVersions(..)
       , VisDocModeArgs(..)
       , VisDefaultColors(..)
       , VisCharsBias(..)
       , VisCellVals(..)
       , VisCellIndices(..)
       , VisCellError(..)
       , VisBoundingBoxArgs(..)
       , getBackColorVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Int)
       , getDisplayNameVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.String)
       , getFontVA -- :: IVAmbients a0 -> Prelude.IO (Automation.IDispatch ())
       , getForeColorVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Int)
       , getLocaleIDVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Int)
       , getMessageReflectVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getScaleUnitsVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.String)
       , getTextAlignVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Int)
       , getUserModeVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getUIDeadVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getShowGrabHandlesVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getShowHatchingVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getDisplayAsDefaultVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getSupportsMnemonicsVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getAutoClipVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Bool)
       , getAppearanceVA -- :: IVAmbients a0 -> Prelude.IO (Prelude.Int)
       , IVAmbients(..)
       , IVAmbients_(..)
       , iidIVAmbients
       , delete -- :: IVAccelItem a0 -> Prelude.IO ()
       , getDefaultVAI -- :: IVAccelItem a0 -> Prelude.IO (Prelude.Int)
       , setCmdNumVAI -- :: Prelude.Int -> IVAccelItem a0 -> Prelude.IO ()
       , getCmdNumVAI -- :: IVAccelItem a0 -> Prelude.IO (Prelude.Int)
       , setKeyVAI -- :: Prelude.Int -> IVAccelItem a0 -> Prelude.IO ()
       , getKeyVAI -- :: IVAccelItem a0 -> Prelude.IO (Prelude.Int)
       , setAltVAI -- :: Prelude.Int -> IVAccelItem a0 -> Prelude.IO ()
       , getAltVAI -- :: IVAccelItem a0 -> Prelude.IO (Prelude.Int)
       , setShiftVAI -- :: Prelude.Int -> IVAccelItem a0 -> Prelude.IO ()
       , getShiftVAI -- :: IVAccelItem a0 -> Prelude.IO (Prelude.Int)
       , setControlVAI -- :: Prelude.Int -> IVAccelItem a0 -> Prelude.IO ()
       , getControlVAI -- :: IVAccelItem a0 -> Prelude.IO (Prelude.Int)
       , getParentVAI -- :: IVAccelItem a0 -> Prelude.IO (IVAccelItems ())
       , IVAccelItem(..)
       , IVAccelItem_(..)
       , iidIVAccelItem
       , getNewEnumVAI -- :: IVAccelItems a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVAI -- :: Prelude.Int -> IVAccelItems a0 -> Prelude.IO (IVAccelItem ())
       , add -- :: IVAccelItems a0 -> Prelude.IO (IVAccelItem ())
       , getCountVAI -- :: IVAccelItems a0 -> Prelude.IO (Prelude.Int)
       , parentVAI -- :: IVAccelItems a0 -> Prelude.IO (IVAccelTable ())
       , IVAccelItems(..)
       , IVAccelItems_(..)
       , iidIVAccelItems
       , deleteVAT -- :: IVAccelTable a0 -> Prelude.IO ()
       , getDefaultVAT -- :: IVAccelTable a0 -> Prelude.IO (Prelude.String)
       , setTableNameVAT -- :: Prelude.String -> IVAccelTable a0 -> Prelude.IO ()
       , getTableNameVAT -- :: IVAccelTable a0 -> Prelude.IO (Prelude.String)
       , getSetIDVAT -- :: IVAccelTable a0 -> Prelude.IO (Prelude.Int)
       , getAccelItemsVAT -- :: IVAccelTable a0 -> Prelude.IO (IVAccelItems ())
       , getParentVAT -- :: IVAccelTable a0 -> Prelude.IO (IVAccelTables ())
       , IVAccelTable(..)
       , IVAccelTable_(..)
       , iidIVAccelTable
       , getNewEnumVAT -- :: IVAccelTables a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVAT -- :: Prelude.Int -> IVAccelTables a0 -> Prelude.IO (IVAccelTable ())
       , getItemAtIDVAT -- :: Prelude.Int -> IVAccelTables a0 -> Prelude.IO (IVAccelTable ())
       , addVAT -- :: IVAccelTables a0 -> Prelude.IO (IVAccelTable ())
       , addAtID -- :: Prelude.Int -> IVAccelTables a0 -> Prelude.IO (IVAccelTable ())
       , getCountVAT -- :: IVAccelTables a0 -> Prelude.IO (Prelude.Int)
       , parentVAT -- :: IVAccelTables a0 -> Prelude.IO (IVUIObject ())
       , IVAccelTables(..)
       , IVAccelTables_(..)
       , iidIVAccelTables
       , deleteVUIO -- :: IVUIObject a0 -> Prelude.IO ()
       , getDefaultVUIO -- :: IVUIObject a0 -> Prelude.IO (Prelude.String)
       , setNameVUIO -- :: Prelude.String -> IVUIObject a0 -> Prelude.IO ()
       , getNameVUIO -- :: IVUIObject a0 -> Prelude.IO (Prelude.String)
       , setFlavorVUIO -- :: Prelude.Int -> IVUIObject a0 -> Prelude.IO ()
       , getFlavorVUIO -- :: IVUIObject a0 -> Prelude.IO (Prelude.Int)
       , getMenuSetsVUIO -- :: IVUIObject a0 -> Prelude.IO (IVMenuSets ())
       , getToolbarSetsVUIO -- :: IVUIObject a0 -> Prelude.IO (IVToolbarSets ())
       , getStatusBarsVUIO -- :: IVUIObject a0 -> Prelude.IO (IVStatusBars ())
       , getAccelTablesVUIO -- :: IVUIObject a0 -> Prelude.IO (IVAccelTables ())
       , saveToFile -- :: Prelude.String -> IVUIObject a0 -> Prelude.IO ()
       , loadFromFile -- :: Prelude.String -> IVUIObject a0 -> Prelude.IO ()
       , updateUI -- :: IVUIObject a0 -> Prelude.IO ()
       , IVUIObject(..)
       , IVUIObject_(..)
       , iidIVUIObject
       , getNewEnumVMS -- :: IVMenuSets a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVMS -- :: Prelude.Int -> IVMenuSets a0 -> Prelude.IO (IVMenuSet ())
       , getItemAtIDVMS -- :: Prelude.Int -> IVMenuSets a0 -> Prelude.IO (IVMenuSet ())
       , addVMS -- :: IVMenuSets a0 -> Prelude.IO (IVMenuSet ())
       , addAtIDVMS -- :: Prelude.Int -> IVMenuSets a0 -> Prelude.IO (IVMenuSet ())
       , getCountVMS -- :: IVMenuSets a0 -> Prelude.IO (Prelude.Int)
       , getParentVMS -- :: IVMenuSets a0 -> Prelude.IO (IVUIObject ())
       , IVMenuSets(..)
       , IVMenuSets_(..)
       , iidIVMenuSets
       , deleteVMS -- :: IVMenuSet a0 -> Prelude.IO ()
       , getDefaultVMS -- :: IVMenuSet a0 -> Prelude.IO (Prelude.String)
       , setCaptionVMS -- :: Prelude.String -> IVMenuSet a0 -> Prelude.IO ()
       , getCaptionVMS -- :: IVMenuSet a0 -> Prelude.IO (Prelude.String)
       , getSetIDVMS -- :: IVMenuSet a0 -> Prelude.IO (Prelude.Int)
       , getMenusVMS -- :: IVMenuSet a0 -> Prelude.IO (IVMenus ())
       , parentVMS -- :: IVMenuSet a0 -> Prelude.IO (IVMenuSets ())
       , IVMenuSet(..)
       , IVMenuSet_(..)
       , iidIVMenuSet
       , getNewEnumVM -- :: IVMenus a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVM -- :: Prelude.Int -> IVMenus a0 -> Prelude.IO (IVMenu ())
       , addVM -- :: IVMenus a0 -> Prelude.IO (IVMenu ())
       , addAt -- :: Prelude.Int -> IVMenus a0 -> Prelude.IO (IVMenu ())
       , getCountVM -- :: IVMenus a0 -> Prelude.IO (Prelude.Int)
       , getParentVM -- :: IVMenus a0 -> Prelude.IO (IVMenuSet ())
       , IVMenus(..)
       , IVMenus_(..)
       , iidIVMenus
       , deleteVM -- :: IVMenu a0 -> Prelude.IO ()
       , getDefaultVM -- :: IVMenu a0 -> Prelude.IO (Prelude.String)
       , setCaptionVM -- :: Prelude.String -> IVMenu a0 -> Prelude.IO ()
       , getCaptionVM -- :: IVMenu a0 -> Prelude.IO (Prelude.String)
       , getIndexVM -- :: IVMenu a0 -> Prelude.IO (Prelude.Int)
       , setMDIWindowMenuVM -- :: Prelude.Int -> IVMenu a0 -> Prelude.IO ()
       , getMDIWindowMenuVM -- :: IVMenu a0 -> Prelude.IO (Prelude.Int)
       , getMenuItemsVM -- :: IVMenu a0 -> Prelude.IO (IVMenuItems ())
       , parentVM -- :: IVMenu a0 -> Prelude.IO (IVMenus ())
       , IVMenu(..)
       , IVMenu_(..)
       , iidIVMenu
       , getNewEnumVMI -- :: IVMenuItems a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVMI -- :: Prelude.Int -> IVMenuItems a0 -> Prelude.IO (IVMenuItem ())
       , addVMI -- :: IVMenuItems a0 -> Prelude.IO (IVMenuItem ())
       , addAtVMI -- :: Prelude.Int -> IVMenuItems a0 -> Prelude.IO (IVMenuItem ())
       , getCountVMI -- :: IVMenuItems a0 -> Prelude.IO (Prelude.Int)
       , getParentVMI -- :: IVMenuItems a0 -> Prelude.IO (IVMenu ())
       , IVMenuItems(..)
       , IVMenuItems_(..)
       , iidIVMenuItems
       , deleteVMI -- :: IVMenuItem a0 -> Prelude.IO ()
       , getDefaultVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , getIndexVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.Int)
       , getMenuItemsVMI -- :: IVMenuItem a0 -> Prelude.IO (IVMenuItems ())
       , parentVMI -- :: IVMenuItem a0 -> Prelude.IO (IVMenuItems ())
       , setCmdNumVMI -- :: Prelude.Int -> IVMenuItem a0 -> Prelude.IO ()
       , getCmdNumVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.Int)
       , setHelpContextIDVMI -- :: Prelude.Int -> IVMenuItem a0 -> Prelude.IO ()
       , getHelpContextIDVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.Int)
       , getIsSeparatorVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.Int)
       , getIsHierarchicalVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.Int)
       , setCaptionVMI -- :: Prelude.String -> IVMenuItem a0 -> Prelude.IO ()
       , getCaptionVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , setActionTextVMI -- :: Prelude.String -> IVMenuItem a0 -> Prelude.IO ()
       , getActionTextVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , setMiniHelpVMI -- :: Prelude.String -> IVMenuItem a0 -> Prelude.IO ()
       , getMiniHelpVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , setAddOnNameVMI -- :: Prelude.String -> IVMenuItem a0 -> Prelude.IO ()
       , getAddOnNameVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , setAddOnArgsVMI -- :: Prelude.String -> IVMenuItem a0 -> Prelude.IO ()
       , getAddOnArgsVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , setHelpFileVMI -- :: Prelude.String -> IVMenuItem a0 -> Prelude.IO ()
       , getHelpFileVMI -- :: IVMenuItem a0 -> Prelude.IO (Prelude.String)
       , IVMenuItem(..)
       , IVMenuItem_(..)
       , iidIVMenuItem
       , getNewEnumVTS -- :: IVToolbarSets a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVTS -- :: Prelude.Int -> IVToolbarSets a0 -> Prelude.IO (IVToolbarSet ())
       , getItemAtIDVTS -- :: Prelude.Int -> IVToolbarSets a0 -> Prelude.IO (IVToolbarSet ())
       , addVTS -- :: IVToolbarSets a0 -> Prelude.IO (IVToolbarSet ())
       , addAtIDVTS -- :: Prelude.Int -> IVToolbarSets a0 -> Prelude.IO (IVToolbarSet ())
       , getCountVTS -- :: IVToolbarSets a0 -> Prelude.IO (Prelude.Int)
       , getParentVTS -- :: IVToolbarSets a0 -> Prelude.IO (IVUIObject ())
       , IVToolbarSets(..)
       , IVToolbarSets_(..)
       , iidIVToolbarSets
       , deleteVTS -- :: IVToolbarSet a0 -> Prelude.IO ()
       , getDefaultVTS -- :: IVToolbarSet a0 -> Prelude.IO (Prelude.String)
       , setCaptionVTS -- :: Prelude.String -> IVToolbarSet a0 -> Prelude.IO ()
       , getCaptionVTS -- :: IVToolbarSet a0 -> Prelude.IO (Prelude.String)
       , getSetIDVTS -- :: IVToolbarSet a0 -> Prelude.IO (Prelude.Int)
       , getToolbarsVTS -- :: IVToolbarSet a0 -> Prelude.IO (IVToolbars ())
       , parentVTS -- :: IVToolbarSet a0 -> Prelude.IO (IVToolbarSets ())
       , IVToolbarSet(..)
       , IVToolbarSet_(..)
       , iidIVToolbarSet
       , getNewEnumVT -- :: IVToolbars a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVT -- :: Prelude.Int -> IVToolbars a0 -> Prelude.IO (IVToolbar ())
       , addVT -- :: IVToolbars a0 -> Prelude.IO (IVToolbar ())
       , addAtVT -- :: Prelude.Int -> IVToolbars a0 -> Prelude.IO (IVToolbar ())
       , getCountVT -- :: IVToolbars a0 -> Prelude.IO (Prelude.Int)
       , getParentVT -- :: IVToolbars a0 -> Prelude.IO (IVToolbarSet ())
       , IVToolbars(..)
       , IVToolbars_(..)
       , iidIVToolbars
       , deleteVT -- :: IVToolbar a0 -> Prelude.IO ()
       , getDefaultVT -- :: IVToolbar a0 -> Prelude.IO (Prelude.String)
       , setCaptionVT -- :: Prelude.String -> IVToolbar a0 -> Prelude.IO ()
       , getCaptionVT -- :: IVToolbar a0 -> Prelude.IO (Prelude.String)
       , getIndexVT -- :: IVToolbar a0 -> Prelude.IO (Prelude.Int)
       , getToolbarItemsVT -- :: IVToolbar a0 -> Prelude.IO (IVToolbarItems ())
       , parentVT -- :: IVToolbar a0 -> Prelude.IO (IVToolbars ())
       , IVToolbar(..)
       , IVToolbar_(..)
       , iidIVToolbar
       , getNewEnumVTI -- :: IVToolbarItems a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVTI -- :: Prelude.Int -> IVToolbarItems a0 -> Prelude.IO (IVToolbarItem ())
       , addVTI -- :: IVToolbarItems a0 -> Prelude.IO (IVToolbarItem ())
       , addAtVTI -- :: Prelude.Int -> IVToolbarItems a0 -> Prelude.IO (IVToolbarItem ())
       , getCountVTI -- :: IVToolbarItems a0 -> Prelude.IO (Prelude.Int)
       , getParentVTI -- :: IVToolbarItems a0 -> Prelude.IO (IVToolbar ())
       , IVToolbarItems(..)
       , IVToolbarItems_(..)
       , iidIVToolbarItems
       , deleteVTI -- :: IVToolbarItem a0 -> Prelude.IO ()
       , iconFileName -- :: Prelude.String -> IVToolbarItem a0 -> Prelude.IO ()
       , getDefaultVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.String)
       , getIndexVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , parentVTI -- :: IVToolbarItem a0 -> Prelude.IO (IVToolbarItems ())
       , setCmdNumVTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getCmdNumVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setHelpContextIDVTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getHelpContextIDVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setActionTextVTI -- :: Prelude.String -> IVToolbarItem a0 -> Prelude.IO ()
       , getActionTextVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.String)
       , setAddOnNameVTI -- :: Prelude.String -> IVToolbarItem a0 -> Prelude.IO ()
       , getAddOnNameVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.String)
       , setAddOnArgsVTI -- :: Prelude.String -> IVToolbarItem a0 -> Prelude.IO ()
       , getAddOnArgsVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.String)
       , setHelpFileVTI -- :: Prelude.String -> IVToolbarItem a0 -> Prelude.IO ()
       , getHelpFileVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.String)
       , setCntrlTypeVTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getCntrlTypeVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setCntrlIDVTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getCntrlIDVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setTypeSpecific1VTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getTypeSpecific1VTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setPriorityVTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getPriorityVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setSpacingVTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getSpacingVTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , setTypeSpecific2VTI -- :: Prelude.Int -> IVToolbarItem a0 -> Prelude.IO ()
       , getTypeSpecific2VTI -- :: IVToolbarItem a0 -> Prelude.IO (Prelude.Int)
       , IVToolbarItem(..)
       , IVToolbarItem_(..)
       , iidIVToolbarItem
       , getNewEnumVSB -- :: IVStatusBars a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVSB -- :: Prelude.Int -> IVStatusBars a0 -> Prelude.IO (IVStatusBar ())
       , getItemAtIDVSB -- :: Prelude.Int -> IVStatusBars a0 -> Prelude.IO (IVStatusBar ())
       , addVSB -- :: IVStatusBars a0 -> Prelude.IO (IVStatusBar ())
       , addAtIDVSB -- :: Prelude.Int -> IVStatusBars a0 -> Prelude.IO (IVStatusBar ())
       , getCountVSB -- :: IVStatusBars a0 -> Prelude.IO (Prelude.Int)
       , getParentVSB -- :: IVStatusBars a0 -> Prelude.IO (IVUIObject ())
       , IVStatusBars(..)
       , IVStatusBars_(..)
       , iidIVStatusBars
       , deleteVSB -- :: IVStatusBar a0 -> Prelude.IO ()
       , getDefaultVSB -- :: IVStatusBar a0 -> Prelude.IO (Prelude.String)
       , setCaptionVSB -- :: Prelude.String -> IVStatusBar a0 -> Prelude.IO ()
       , getCaptionVSB -- :: IVStatusBar a0 -> Prelude.IO (Prelude.String)
       , getSetIDVSB -- :: IVStatusBar a0 -> Prelude.IO (Prelude.Int)
       , getStatusBarItemsVSB -- :: IVStatusBar a0 -> Prelude.IO (IVStatusBarItems ())
       , parentVSB -- :: IVStatusBar a0 -> Prelude.IO (IVStatusBars ())
       , IVStatusBar(..)
       , IVStatusBar_(..)
       , iidIVStatusBar
       , getNewEnumVSBI -- :: IVStatusBarItems a0 -> Prelude.IO (Com.IUnknown ())
       , getItemVSBI -- :: Prelude.Int -> IVStatusBarItems a0 -> Prelude.IO (IVStatusBarItem ())
       , addVSBI -- :: IVStatusBarItems a0 -> Prelude.IO (IVStatusBarItem ())
       , addAtVSBI -- :: Prelude.Int -> IVStatusBarItems a0 -> Prelude.IO (IVStatusBarItem ())
       , getCountVSBI -- :: IVStatusBarItems a0 -> Prelude.IO (Prelude.Int)
       , getParentVSBI -- :: IVStatusBarItems a0 -> Prelude.IO (IVStatusBar ())
       , IVStatusBarItems(..)
       , IVStatusBarItems_(..)
       , iidIVStatusBarItems
       , deleteVSBI -- :: IVStatusBarItem a0 -> Prelude.IO ()
       , iconFileNameVSBI -- :: Prelude.String -> IVStatusBarItem a0 -> Prelude.IO ()
       , getDefaultVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.String)
       , getIndexVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , parentVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (IVStatusBarItems ())
       , setCmdNumVSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getCmdNumVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setHelpContextIDVSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getHelpContextIDVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setActionTextVSBI -- :: Prelude.String -> IVStatusBarItem a0 -> Prelude.IO ()
       , getActionTextVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.String)
       , setAddOnNameVSBI -- :: Prelude.String -> IVStatusBarItem a0 -> Prelude.IO ()
       , getAddOnNameVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.String)
       , setAddOnArgsVSBI -- :: Prelude.String -> IVStatusBarItem a0 -> Prelude.IO ()
       , getAddOnArgsVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.String)
       , setHelpFileVSBI -- :: Prelude.String -> IVStatusBarItem a0 -> Prelude.IO ()
       , getHelpFileVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.String)
       , setCntrlTypeVSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getCntrlTypeVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setCntrlIDVSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getCntrlIDVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setTypeSpecific1VSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getTypeSpecific1VSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setPriorityVSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getPriorityVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setSpacingVSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getSpacingVSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , setTypeSpecific2VSBI -- :: Prelude.Int -> IVStatusBarItem a0 -> Prelude.IO ()
       , getTypeSpecific2VSBI -- :: IVStatusBarItem a0 -> Prelude.IO (Prelude.Int)
       , IVStatusBarItem(..)
       , IVStatusBarItem_(..)
       , iidIVStatusBarItem
       , getApplicationVD -- :: IVDocument a0 -> Prelude.IO (IVApplication ())
       , getStatVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , getObjectTypeVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , getInPlaceVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , getMastersVD -- :: IVDocument a0 -> Prelude.IO (IVMasters ())
       , getPagesVD -- :: IVDocument a0 -> Prelude.IO (IVPages ())
       , getStylesVD -- :: IVDocument a0 -> Prelude.IO (IVStyles ())
       , getNameVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , getPathVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , getFullNameVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , drop -- :: Com.IUnknown a1 -> Prelude.Int -> Prelude.Int -> IVDocument a0 -> Prelude.IO (IVMaster ())
       , getIndexVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , getSavedVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setSavedVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getReadOnlyVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , save -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , saveAs -- :: Prelude.String -> IVDocument a0 -> Prelude.IO (Prelude.Int)
       , getVersionVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setVersionVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getTitleVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setTitleVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getSubjectVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setSubjectVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getCreatorVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setCreatorVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getKeywordsVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setKeywordsVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getDescriptionVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setDescriptionVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , print -- :: IVDocument a0 -> Prelude.IO ()
       , close -- :: IVDocument a0 -> Prelude.IO ()
       , getCustomMenusVD -- :: IVDocument a0 -> Prelude.IO (IVUIObject ())
       , setCustomMenus -- :: IVUIObject a1 -> IVDocument a0 -> Prelude.IO ()
       , getCustomMenusFileVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setCustomMenusFileVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , clearCustomMenus -- :: IVDocument a0 -> Prelude.IO ()
       , getCustomToolbarsVD -- :: IVDocument a0 -> Prelude.IO (IVUIObject ())
       , setCustomToolbars -- :: IVUIObject a1 -> IVDocument a0 -> Prelude.IO ()
       , getCustomToolbarsFileVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setCustomToolbarsFileVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , clearCustomToolbars -- :: IVDocument a0 -> Prelude.IO ()
       , getFontsVD -- :: IVDocument a0 -> Prelude.IO (IVFonts ())
       , getColorsVD -- :: IVDocument a0 -> Prelude.IO (IVColors ())
       , getEventListVD -- :: IVDocument a0 -> Prelude.IO (IVEventList ())
       , getTemplateVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , saveAsEx -- :: Prelude.String -> Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getSavePreviewModeVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setSavePreviewModeVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getIcon -- :: Prelude.Int -> Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , setIcon -- :: Prelude.Int -> Prelude.Int -> Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getLeftMarginVD -- :: a1 -> IVDocument a0 -> Prelude.IO (Prelude.Double)
       , setLeftMarginVD -- :: a1 -> Prelude.Double -> IVDocument a0 -> Prelude.IO ()
       , getRightMarginVD -- :: a1 -> IVDocument a0 -> Prelude.IO (Prelude.Double)
       , setRightMarginVD -- :: a1 -> Prelude.Double -> IVDocument a0 -> Prelude.IO ()
       , getTopMarginVD -- :: a1 -> IVDocument a0 -> Prelude.IO (Prelude.Double)
       , setTopMarginVD -- :: a1 -> Prelude.Double -> IVDocument a0 -> Prelude.IO ()
       , getBottomMarginVD -- :: a1 -> IVDocument a0 -> Prelude.IO (Prelude.Double)
       , setBottomMarginVD -- :: a1 -> Prelude.Double -> IVDocument a0 -> Prelude.IO ()
       , getPrintLandscapeVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPrintLandscapeVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getPrintCenteredHVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPrintCenteredHVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getPrintCenteredVVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPrintCenteredVVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getPrintScaleVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Double)
       , setPrintScaleVD -- :: Prelude.Double -> IVDocument a0 -> Prelude.IO ()
       , getPrintFitOnPagesVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPrintFitOnPagesVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getPrintPagesAcrossVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPrintPagesAcrossVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getPrintPagesDownVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPrintPagesDownVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getDefaultStyleVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setDefaultStyleVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getDefaultLineStyleVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setDefaultLineStyleVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getDefaultFillStyleVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setDefaultFillStyleVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getDefaultTextStyleVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setDefaultTextStyleVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getPersistsEventsVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , openStencilWindow -- :: IVDocument a0 -> Prelude.IO (IVWindow ())
       , parseLine -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , executeLine -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getVBProjectVD -- :: IVDocument a0 -> Prelude.IO (Automation.IDispatch ())
       , getPaperWidthVD -- :: a1 -> IVDocument a0 -> Prelude.IO (Prelude.Double)
       , getPaperHeightVD -- :: a1 -> IVDocument a0 -> Prelude.IO (Prelude.Double)
       , getPaperSizeVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setPaperSizeVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , followHyperlink45 -- :: Prelude.String -> Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getCodeNameVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , getModeVD -- :: IVDocument a0 -> Prelude.IO (Prelude.Int)
       , setModeVD -- :: Prelude.Int -> IVDocument a0 -> Prelude.IO ()
       , getOLEObjectsVD -- :: IVDocument a0 -> Prelude.IO (IVOLEObjects ())
       , getManagerVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setManagerVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getCompanyVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setCompanyVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getCategoryVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setCategoryVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , getHyperlinkBaseVD -- :: IVDocument a0 -> Prelude.IO (Prelude.String)
       , setHyperlinkBaseVD -- :: Prelude.String -> IVDocument a0 -> Prelude.IO ()
       , IVDocument(..)
       , IVDocument_(..)
       , iidIVDocument
       , getActiveDocumentVA -- :: IVApplication a0 -> Prelude.IO (IVDocument ())
       , getActivePageVA -- :: IVApplication a0 -> Prelude.IO (IVPage ())
       , getActiveWindowVA -- :: IVApplication a0 -> Prelude.IO (IVWindow ())
       , getApplicationVA -- :: IVApplication a0 -> Prelude.IO (IVApplication ())
       , getDocumentsVA -- :: IVApplication a0 -> Prelude.IO (IVDocuments ())
       , getObjectTypeVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getOnDataChangeDelayVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setOnDataChangeDelayVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getProcessIDVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , quit -- :: IVApplication a0 -> Prelude.IO ()
       , redo -- :: IVApplication a0 -> Prelude.IO ()
       , getScreenUpdatingVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setScreenUpdatingVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getStatVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , undo -- :: IVApplication a0 -> Prelude.IO ()
       , getVersionVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , getWindowHandleVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getWindowsVA -- :: IVApplication a0 -> Prelude.IO (IVWindows ())
       , getLanguageVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getIsVisio16VA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getIsVisio32VA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getWindowHandle32VA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getInstanceHandleVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getInstanceHandle32VA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getBuiltInMenusVA -- :: IVApplication a0 -> Prelude.IO (IVUIObject ())
       , getBuiltInToolbarsVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO (IVUIObject ())
       , getCustomMenusVA -- :: IVApplication a0 -> Prelude.IO (IVUIObject ())
       , setCustomMenusVA -- :: IVUIObject a1 -> IVApplication a0 -> Prelude.IO ()
       , getCustomMenusFileVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setCustomMenusFileVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , clearCustomMenusVA -- :: IVApplication a0 -> Prelude.IO ()
       , getCustomToolbarsVA -- :: IVApplication a0 -> Prelude.IO (IVUIObject ())
       , setCustomToolbarsVA -- :: IVUIObject a1 -> IVApplication a0 -> Prelude.IO ()
       , getCustomToolbarsFileVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setCustomToolbarsFileVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , clearCustomToolbarsVA -- :: IVApplication a0 -> Prelude.IO ()
       , getAddonPathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setAddonPathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getDrawingPathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setDrawingPathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getFilterPathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setFilterPathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getHelpPathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setHelpPathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getStartupPathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setStartupPathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getStencilPathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setStencilPathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getTemplatePathsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setTemplatePathsVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getUserNameVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , setUserNameVA -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , getPromptForSummaryVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setPromptForSummaryVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getAddonsVA -- :: IVApplication a0 -> Prelude.IO (IVAddons ())
       , saveWorkspaceAs -- :: Prelude.String -> IVApplication a0 -> Prelude.IO ()
       , doCmd -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getProfileNameVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , getEventInfoVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO (Prelude.String)
       , getEventListVA -- :: IVApplication a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getActiveVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getDeferRecalcVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setDeferRecalcVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getAlertResponseVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setAlertResponseVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getShowProgressVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setShowProgressVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getVbeVA -- :: IVApplication a0 -> Prelude.IO (Automation.IDispatch ())
       , getShowMenusVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setShowMenusVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getToolbarStyleVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setToolbarStyleVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getShowStatusBarVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setShowStatusBarVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , getEventsEnabledVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setEventsEnabledVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , formatResult -- :: a1 -> a2 -> a3 -> Prelude.String -> IVApplication a0 -> Prelude.IO (Prelude.String)
       , convertResult -- :: a1 -> a2 -> a3 -> IVApplication a0 -> Prelude.IO (Prelude.Double)
       , getPathVA -- :: IVApplication a0 -> Prelude.IO (Prelude.String)
       , enumDirectories -- :: Prelude.String -> IVApplication a0 -> Prelude.IO (SafeArray Prelude.String)
       , getTraceFlagsVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setTraceFlagsVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , purgeUndo -- :: IVApplication a0 -> Prelude.IO ()
       , queueMarkerEvent -- :: Prelude.String -> IVApplication a0 -> Prelude.IO (Prelude.Int)
       , getShowToolbarVA -- :: IVApplication a0 -> Prelude.IO (Prelude.Int)
       , setShowToolbarVA -- :: Prelude.Int -> IVApplication a0 -> Prelude.IO ()
       , IVApplication(..)
       , IVApplication_(..)
       , iidIVApplication
       , getDocumentVP -- :: IVPage a0 -> Prelude.IO (IVDocument ())
       , getApplicationVP -- :: IVPage a0 -> Prelude.IO (IVApplication ())
       , getStatVP -- :: IVPage a0 -> Prelude.IO (Prelude.Int)
       , getBackgroundVP -- :: IVPage a0 -> Prelude.IO (Prelude.Int)
       , setBackgroundVP -- :: Prelude.Int -> IVPage a0 -> Prelude.IO ()
       , paste -- :: IVPage a0 -> Prelude.IO ()
       , pasteSpecial -- :: Prelude.Int -> IVPage a0 -> Prelude.IO ()
       , getObjectTypeVP -- :: IVPage a0 -> Prelude.IO (Prelude.Int)
       , drawLine -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVPage a0 -> Prelude.IO (IVShape ())
       , drawRectangle -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVPage a0 -> Prelude.IO (IVShape ())
       , drawOval -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVPage a0 -> Prelude.IO (IVShape ())
       , getIndexVP -- :: IVPage a0 -> Prelude.IO (Prelude.Int)
       , getNameVP -- :: IVPage a0 -> Prelude.IO (Prelude.String)
       , setNameVP -- :: Prelude.String -> IVPage a0 -> Prelude.IO ()
       , getShapesVP -- :: IVPage a0 -> Prelude.IO (IVShapes ())
       , dropVP -- :: Com.IUnknown a1 -> Prelude.Double -> Prelude.Double -> IVPage a0 -> Prelude.IO (IVShape ())
       , addGuide -- :: Prelude.Int -> Prelude.Double -> Prelude.Double -> IVPage a0 -> Prelude.IO (IVShape ())
       , getBackPageAsObjVP -- :: IVPage a0 -> Prelude.IO (IVPage ())
       , setBackPageFromNameVP -- :: Prelude.String -> IVPage a0 -> Prelude.IO ()
       , printVP -- :: IVPage a0 -> Prelude.IO ()
       , importVP -- :: Prelude.String -> IVPage a0 -> Prelude.IO (IVShape ())
       , export -- :: Prelude.String -> IVPage a0 -> Prelude.IO ()
       , getLayersVP -- :: IVPage a0 -> Prelude.IO (IVLayers ())
       , getPageSheetVP -- :: IVPage a0 -> Prelude.IO (IVShape ())
       , deleteVP -- :: Prelude.Int -> IVPage a0 -> Prelude.IO ()
       , centerDrawing -- :: IVPage a0 -> Prelude.IO ()
       , getEventListVP -- :: IVPage a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVP -- :: IVPage a0 -> Prelude.IO (Prelude.Int)
       , drawSpline -- :: SafeArray Prelude.Double -> Prelude.Double -> Prelude.Int -> IVPage a0 -> Prelude.IO (IVShape ())
       , drawBezier -- :: SafeArray Prelude.Double -> Prelude.Int -> Prelude.Int -> IVPage a0 -> Prelude.IO (IVShape ())
       , drawPolyline -- :: SafeArray Prelude.Double -> Prelude.Int -> IVPage a0 -> Prelude.IO (IVShape ())
       , insertFromFile -- :: Prelude.String -> Prelude.Int -> IVPage a0 -> Prelude.IO (IVShape ())
       , insertObject -- :: Prelude.String -> Prelude.Int -> IVPage a0 -> Prelude.IO (IVShape ())
       , openDrawWindow -- :: IVPage a0 -> Prelude.IO (IVWindow ())
       , dropMany -- :: SafeArray () -> SafeArray Prelude.Double -> IVPage a0 -> Prelude.IO (SafeArray Prelude.Int, Prelude.Int)
       , getFormulas -- :: SafeArray Prelude.Int -> IVPage a0 -> Prelude.IO (SafeArray ())
       , getResults -- :: SafeArray Prelude.Int -> Prelude.Int -> SafeArray () -> IVPage a0 -> Prelude.IO (SafeArray ())
       , setFormulas -- :: SafeArray Prelude.Int -> SafeArray () -> Prelude.Int -> IVPage a0 -> Prelude.IO (Prelude.Int)
       , setResults -- :: SafeArray Prelude.Int -> SafeArray () -> SafeArray () -> Prelude.Int -> IVPage a0 -> Prelude.IO (Prelude.Int)
       , getConnectsVP -- :: IVPage a0 -> Prelude.IO (IVConnects ())
       , getBackPageVP -- :: IVPage a0 -> Prelude.IO (a1)
       , setBackPageVP -- :: a1 -> IVPage a0 -> Prelude.IO ()
       , layout -- :: IVPage a0 -> Prelude.IO ()
       , boundingBox -- :: Prelude.Int -> IVPage a0 -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
       , getIDVP -- :: IVPage a0 -> Prelude.IO (Prelude.Int)
       , getOLEObjectsVP -- :: IVPage a0 -> Prelude.IO (IVOLEObjects ())
       , IVPage(..)
       , IVPage_(..)
       , iidIVPage
       , group -- :: IVShape a0 -> Prelude.IO ()
       , bringForward -- :: IVShape a0 -> Prelude.IO ()
       , bringToFront -- :: IVShape a0 -> Prelude.IO ()
       , convertToGroup -- :: IVShape a0 -> Prelude.IO ()
       , flipHorizontal -- :: IVShape a0 -> Prelude.IO ()
       , flipVertical -- :: IVShape a0 -> Prelude.IO ()
       , reverseEnds -- :: IVShape a0 -> Prelude.IO ()
       , sendBackward -- :: IVShape a0 -> Prelude.IO ()
       , sendToBack -- :: IVShape a0 -> Prelude.IO ()
       , rotate90 -- :: IVShape a0 -> Prelude.IO ()
       , ungroup -- :: IVShape a0 -> Prelude.IO ()
       , getDocumentVS -- :: IVShape a0 -> Prelude.IO (IVDocument ())
       , getParentVS -- :: IVShape a0 -> Prelude.IO (Automation.IDispatch ())
       , getApplicationVS -- :: IVShape a0 -> Prelude.IO (IVApplication ())
       , getStatVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getMasterVS -- :: IVShape a0 -> Prelude.IO (IVMaster ())
       , getTypeVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getObjectTypeVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getCellsVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO (IVCell ())
       , getCellsSRCVS -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (IVCell ())
       , getShapesVS -- :: IVShape a0 -> Prelude.IO (IVShapes ())
       , getData1VS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setData1VS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getData2VS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setData2VS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getData3VS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setData3VS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getHelpVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setHelpVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getNameIDVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , getNameVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setNameVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getTextVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setTextVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getCharCountVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getCharactersVS -- :: IVShape a0 -> Prelude.IO (IVCharacters ())
       , copy -- :: IVShape a0 -> Prelude.IO ()
       , cut -- :: IVShape a0 -> Prelude.IO ()
       , deleteVS -- :: IVShape a0 -> Prelude.IO ()
       , duplicate -- :: IVShape a0 -> Prelude.IO ()
       , dropVS -- :: Com.IUnknown a1 -> Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO (IVShape ())
       , getOneDVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , setOneDVS -- :: Prelude.Int -> IVShape a0 -> Prelude.IO ()
       , getGeometryCountVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getRowCountVS -- :: Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , addSection -- :: Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , deleteSection -- :: Prelude.Int -> IVShape a0 -> Prelude.IO ()
       , addRow -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , deleteRow -- :: Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO ()
       , getRowsCellCountVS -- :: Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getRowTypeVS -- :: Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , setRowTypeVS -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO ()
       , setCenter -- :: Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO ()
       , setBegin -- :: Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO ()
       , setEnd -- :: Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO ()
       , getConnectsVS -- :: IVShape a0 -> Prelude.IO (IVConnects ())
       , getIndexVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getStyleVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setStyleVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , setStyleKeepFmtVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getLineStyleVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setLineStyleVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , setLineStyleKeepFmtVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getFillStyleVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setFillStyleVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , setFillStyleKeepFmtVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getTextStyleVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , setTextStyleVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , setTextStyleKeepFmtVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , exportVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO ()
       , getAreaIUVS -- :: IVShape a0 -> Prelude.IO (Prelude.Double)
       , getLengthIUVS -- :: IVShape a0 -> Prelude.IO (Prelude.Double)
       , getGeomExIfVS -- :: Prelude.Int -> Prelude.Double -> IVShape a0 -> Prelude.IO (Com.IUnknown ())
       , getUniqueIDVS -- :: Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.String)
       , getContainingPageVS -- :: IVShape a0 -> Prelude.IO (IVPage ())
       , getContainingMasterVS -- :: IVShape a0 -> Prelude.IO (IVMaster ())
       , getContainingShapeVS -- :: IVShape a0 -> Prelude.IO (IVShape ())
       , getSectionExistsVS -- :: Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getRowExistsVS -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getCellExistsVS -- :: Prelude.String -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getCellsSRCExistsVS -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getLayerCountVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getLayerVS -- :: Prelude.Int -> IVShape a0 -> Prelude.IO (IVLayer ())
       , addNamedRow -- :: Prelude.Int -> Prelude.String -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , addRows -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getEventListVS -- :: IVShape a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , drawLineVS -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO (IVShape ())
       , drawRectangleVS -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO (IVShape ())
       , drawOvalVS -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO (IVShape ())
       , drawSplineVS -- :: SafeArray Prelude.Double -> Prelude.Double -> Prelude.Int -> IVShape a0 -> Prelude.IO (IVShape ())
       , drawBezierVS -- :: SafeArray Prelude.Double -> Prelude.Int -> Prelude.Int -> IVShape a0 -> Prelude.IO (IVShape ())
       , drawPolylineVS -- :: SafeArray Prelude.Double -> Prelude.Int -> IVShape a0 -> Prelude.IO (IVShape ())
       , fitCurve -- :: Prelude.Double -> Prelude.Int -> IVShape a0 -> Prelude.IO ()
       , importVS -- :: Prelude.String -> IVShape a0 -> Prelude.IO (IVShape ())
       , centerDrawingVS -- :: IVShape a0 -> Prelude.IO ()
       , insertFromFileVS -- :: Prelude.String -> Prelude.Int -> IVShape a0 -> Prelude.IO (IVShape ())
       , insertObjectVS -- :: Prelude.String -> Prelude.Int -> IVShape a0 -> Prelude.IO (IVShape ())
       , getClassIDVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , getForeignTypeVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getObjectVS -- :: IVShape a0 -> Prelude.IO (Automation.IDispatch ())
       , openDrawWindowVS -- :: IVShape a0 -> Prelude.IO (IVWindow ())
       , openSheetWindow -- :: IVShape a0 -> Prelude.IO (IVWindow ())
       , getIDVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , dropManyVS -- :: SafeArray () -> SafeArray Prelude.Double -> IVShape a0 -> Prelude.IO (SafeArray Prelude.Int, Prelude.Int)
       , getFormulasVS -- :: SafeArray Prelude.Int -> IVShape a0 -> Prelude.IO (SafeArray ())
       , getResultsVS -- :: SafeArray Prelude.Int -> Prelude.Int -> SafeArray () -> IVShape a0 -> Prelude.IO (SafeArray ())
       , setFormulasVS -- :: SafeArray Prelude.Int -> SafeArray () -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , setResultsVS -- :: SafeArray Prelude.Int -> SafeArray () -> SafeArray () -> Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getFromConnectsVS -- :: IVShape a0 -> Prelude.IO (IVConnects ())
       , layoutVS -- :: IVShape a0 -> Prelude.IO ()
       , boundingBoxVS -- :: Prelude.Int -> IVShape a0 -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
       , hitTest -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> IVShape a0 -> Prelude.IO (Prelude.Int)
       , getHyperlinkVS -- :: IVShape a0 -> Prelude.IO (IVHyperlink ())
       , getProgIDVS -- :: IVShape a0 -> Prelude.IO (Prelude.String)
       , getObjectIsInheritedVS -- :: IVShape a0 -> Prelude.IO (Prelude.Int)
       , getPathsVS -- :: IVShape a0 -> Prelude.IO (IVPaths ())
       , getPathsLocalVS -- :: IVShape a0 -> Prelude.IO (IVPaths ())
       , addHyperlink -- :: IVShape a0 -> Prelude.IO (IVHyperlink ())
       , IVShape(..)
       , IVShape_(..)
       , iidIVShape
       , getDocumentVM -- :: IVMaster a0 -> Prelude.IO (IVDocument ())
       , getPromptVM -- :: IVMaster a0 -> Prelude.IO (Prelude.String)
       , setPromptVM -- :: Prelude.String -> IVMaster a0 -> Prelude.IO ()
       , getAlignNameVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , setAlignNameVM -- :: Prelude.Int -> IVMaster a0 -> Prelude.IO ()
       , getIconSizeVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , setIconSizeVM -- :: Prelude.Int -> IVMaster a0 -> Prelude.IO ()
       , getIconUpdateVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , setIconUpdateVM -- :: Prelude.Int -> IVMaster a0 -> Prelude.IO ()
       , getApplicationVM -- :: IVMaster a0 -> Prelude.IO (IVApplication ())
       , getStatVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , getObjectTypeVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , getNameVM -- :: IVMaster a0 -> Prelude.IO (Prelude.String)
       , setNameVM -- :: Prelude.String -> IVMaster a0 -> Prelude.IO ()
       , getShapesVM -- :: IVMaster a0 -> Prelude.IO (IVShapes ())
       , indexVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , getOneDVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , deleteVM0 -- :: IVMaster a0 -> Prelude.IO ()
       , getUniqueIDVM -- :: IVMaster a0 -> Prelude.IO (Prelude.String)
       , getLayersVM -- :: IVMaster a0 -> Prelude.IO (IVLayers ())
       , getPageSheetVM -- :: IVMaster a0 -> Prelude.IO (IVShape ())
       , dropVM -- :: Com.IUnknown a1 -> Prelude.Double -> Prelude.Double -> IVMaster a0 -> Prelude.IO (IVShape ())
       , centerDrawingVM -- :: IVMaster a0 -> Prelude.IO ()
       , getEventListVM -- :: IVMaster a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , drawLineVM -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVMaster a0 -> Prelude.IO (IVShape ())
       , drawRectangleVM -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVMaster a0 -> Prelude.IO (IVShape ())
       , drawOvalVM -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> Prelude.Double -> IVMaster a0 -> Prelude.IO (IVShape ())
       , drawSplineVM -- :: SafeArray Prelude.Double -> Prelude.Double -> Prelude.Int -> IVMaster a0 -> Prelude.IO (IVShape ())
       , drawBezierVM -- :: SafeArray Prelude.Double -> Prelude.Int -> Prelude.Int -> IVMaster a0 -> Prelude.IO (IVShape ())
       , drawPolylineVM -- :: SafeArray Prelude.Double -> Prelude.Int -> IVMaster a0 -> Prelude.IO (IVShape ())
       , importVM -- :: Prelude.String -> IVMaster a0 -> Prelude.IO (IVShape ())
       , exportVM -- :: Prelude.String -> IVMaster a0 -> Prelude.IO ()
       , insertFromFileVM -- :: Prelude.String -> Prelude.Int -> IVMaster a0 -> Prelude.IO (IVShape ())
       , insertObjectVM -- :: Prelude.String -> Prelude.Int -> IVMaster a0 -> Prelude.IO (IVShape ())
       , openDrawWindowVM -- :: IVMaster a0 -> Prelude.IO (IVWindow ())
       , openIconWindow -- :: IVMaster a0 -> Prelude.IO (IVWindow ())
       , open -- :: IVMaster a0 -> Prelude.IO (IVMaster ())
       , closeVM -- :: IVMaster a0 -> Prelude.IO ()
       , dropManyVM -- :: SafeArray () -> SafeArray Prelude.Double -> IVMaster a0 -> Prelude.IO (SafeArray Prelude.Int, Prelude.Int)
       , getFormulasVM -- :: SafeArray Prelude.Int -> IVMaster a0 -> Prelude.IO (SafeArray ())
       , getResultsVM -- :: SafeArray Prelude.Int -> Prelude.Int -> SafeArray () -> IVMaster a0 -> Prelude.IO (SafeArray ())
       , setFormulasVM -- :: SafeArray Prelude.Int -> SafeArray () -> Prelude.Int -> IVMaster a0 -> Prelude.IO (Prelude.Int)
       , setResultsVM -- :: SafeArray Prelude.Int -> SafeArray () -> SafeArray () -> Prelude.Int -> IVMaster a0 -> Prelude.IO (Prelude.Int)
       , getConnectsVM -- :: IVMaster a0 -> Prelude.IO (IVConnects ())
       , importIcon -- :: Prelude.String -> IVMaster a0 -> Prelude.IO ()
       , exportIcon -- :: Prelude.String -> Prelude.Int -> IVMaster a0 -> Prelude.IO ()
       , layoutVM -- :: IVMaster a0 -> Prelude.IO ()
       , boundingBoxVM -- :: Prelude.Int -> IVMaster a0 -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
       , getIDVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , getOLEObjectsVM -- :: IVMaster a0 -> Prelude.IO (IVOLEObjects ())
       , getPatternFlagsVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , setPatternFlagsVM -- :: Prelude.Int -> IVMaster a0 -> Prelude.IO ()
       , getMatchByNameVM -- :: IVMaster a0 -> Prelude.IO (Prelude.Int)
       , setMatchByNameVM -- :: Prelude.Int -> IVMaster a0 -> Prelude.IO ()
       , IVMaster(..)
       , IVMaster_(..)
       , iidIVMaster
       , applicationVS -- :: IVShapes a0 -> Prelude.IO (IVApplication ())
       , objectTypeVS -- :: IVShapes a0 -> Prelude.IO (Prelude.Int)
       , getItemVS -- :: a1 -> IVShapes a0 -> Prelude.IO (IVShape ())
       , getCountVS -- :: IVShapes a0 -> Prelude.IO (Prelude.Int)
       , documentVS -- :: IVShapes a0 -> Prelude.IO (IVDocument ())
       , containingPageVS -- :: IVShapes a0 -> Prelude.IO (IVPage ())
       , containingMasterVS -- :: IVShapes a0 -> Prelude.IO (IVMaster ())
       , containingShapeVS -- :: IVShapes a0 -> Prelude.IO (IVShape ())
       , centerDrawingVS0 -- :: IVShapes a0 -> Prelude.IO ()
       , statVS -- :: IVShapes a0 -> Prelude.IO (Prelude.Int)
       , eventListVS -- :: IVShapes a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVS -- :: IVShapes a0 -> Prelude.IO (Prelude.Int)
       , getItemFromIDVS -- :: Prelude.Int -> IVShapes a0 -> Prelude.IO (IVShape ())
       , IVShapes(..)
       , IVShapes_(..)
       , iidIVShapes
       , getApplicationVEL -- :: IVEventList a0 -> Prelude.IO (IVApplication ())
       , getObjectTypeVEL -- :: IVEventList a0 -> Prelude.IO (Prelude.Int)
       , getItemVEL -- :: Prelude.Int -> IVEventList a0 -> Prelude.IO (IVEvent ())
       , getCountVEL -- :: IVEventList a0 -> Prelude.IO (Prelude.Int)
       , addVEL -- :: Prelude.Int -> Prelude.Int -> Prelude.String -> Prelude.String -> IVEventList a0 -> Prelude.IO (IVEvent ())
       , addAdvise -- :: Prelude.Int -> a1 -> Prelude.String -> Prelude.String -> IVEventList a0 -> Prelude.IO (IVEvent ())
       , getItemFromIDVEL -- :: Prelude.Int -> IVEventList a0 -> Prelude.IO (IVEvent ())
       , IVEventList(..)
       , IVEventList_(..)
       , iidIVEventList
       , getApplicationVE -- :: IVEvent a0 -> Prelude.IO (IVApplication ())
       , getEventListVE -- :: IVEvent a0 -> Prelude.IO (IVEventList ())
       , getIndexVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , getEventVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , setEventVE -- :: Prelude.Int -> IVEvent a0 -> Prelude.IO ()
       , getActionVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , setActionVE -- :: Prelude.Int -> IVEvent a0 -> Prelude.IO ()
       , getTargetVE -- :: IVEvent a0 -> Prelude.IO (Prelude.String)
       , setTargetVE -- :: Prelude.String -> IVEvent a0 -> Prelude.IO ()
       , getTargetArgsVE -- :: IVEvent a0 -> Prelude.IO (Prelude.String)
       , setTargetArgsVE -- :: Prelude.String -> IVEvent a0 -> Prelude.IO ()
       , trigger -- :: Prelude.String -> IVEvent a0 -> Prelude.IO ()
       , deleteVE -- :: IVEvent a0 -> Prelude.IO ()
       , getObjectTypeVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , getIDVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , getEnabledVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , setEnabledVE -- :: Prelude.Int -> IVEvent a0 -> Prelude.IO ()
       , getPersistableVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , getPersistentVE -- :: IVEvent a0 -> Prelude.IO (Prelude.Int)
       , setPersistentVE -- :: Prelude.Int -> IVEvent a0 -> Prelude.IO ()
       , IVEvent(..)
       , IVEvent_(..)
       , iidIVEvent
       , getApplicationVL -- :: IVLayers a0 -> Prelude.IO (IVApplication ())
       , getDocumentVL -- :: IVLayers a0 -> Prelude.IO (IVDocument ())
       , getPageVL -- :: IVLayers a0 -> Prelude.IO (IVPage ())
       , getMasterVL -- :: IVLayers a0 -> Prelude.IO (IVMaster ())
       , getCountVL -- :: IVLayers a0 -> Prelude.IO (Prelude.Int)
       , getItemVL -- :: a1 -> IVLayers a0 -> Prelude.IO (IVLayer ())
       , addVL -- :: Prelude.String -> IVLayers a0 -> Prelude.IO (IVLayer ())
       , getObjectTypeVL -- :: IVLayers a0 -> Prelude.IO (Prelude.Int)
       , getStatVL -- :: IVLayers a0 -> Prelude.IO (Prelude.Int)
       , getEventListVL -- :: IVLayers a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVL -- :: IVLayers a0 -> Prelude.IO (Prelude.Int)
       , IVLayers(..)
       , IVLayers_(..)
       , iidIVLayers
       , applicationVL -- :: IVLayer a0 -> Prelude.IO (IVApplication ())
       , documentVL -- :: IVLayer a0 -> Prelude.IO (IVDocument ())
       , pageVL -- :: IVLayer a0 -> Prelude.IO (IVPage ())
       , masterVL -- :: IVLayer a0 -> Prelude.IO (IVMaster ())
       , getIndexVL -- :: IVLayer a0 -> Prelude.IO (Prelude.Int)
       , getRowVL -- :: IVLayer a0 -> Prelude.IO (Prelude.Int)
       , addVL0 -- :: IVShape a1 -> Prelude.Int -> IVLayer a0 -> Prelude.IO ()
       , remove -- :: IVShape a1 -> Prelude.Int -> IVLayer a0 -> Prelude.IO ()
       , deleteVL -- :: Prelude.Int -> IVLayer a0 -> Prelude.IO ()
       , getNameVL -- :: IVLayer a0 -> Prelude.IO (Prelude.String)
       , setNameVL -- :: Prelude.String -> IVLayer a0 -> Prelude.IO ()
       , getCellsCVL -- :: Prelude.Int -> IVLayer a0 -> Prelude.IO (IVCell ())
       , objectTypeVL -- :: IVLayer a0 -> Prelude.IO (Prelude.Int)
       , statVL -- :: IVLayer a0 -> Prelude.IO (Prelude.Int)
       , eventListVL -- :: IVLayer a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVL -- :: IVLayer a0 -> Prelude.IO (Prelude.Int)
       , IVLayer(..)
       , IVLayer_(..)
       , iidIVLayer
       , getApplicationVC -- :: IVCell a0 -> Prelude.IO (IVApplication ())
       , getObjectTypeVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getErrorVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getFormulaVC -- :: IVCell a0 -> Prelude.IO (Prelude.String)
       , setFormulaVC -- :: Prelude.String -> IVCell a0 -> Prelude.IO ()
       , setFormulaForceVC -- :: Prelude.String -> IVCell a0 -> Prelude.IO ()
       , glueTo -- :: IVCell a1 -> IVCell a0 -> Prelude.IO ()
       , glueToPos -- :: IVShape a1 -> Prelude.Double -> Prelude.Double -> IVCell a0 -> Prelude.IO ()
       , getResultVC -- :: a1 -> IVCell a0 -> Prelude.IO (Prelude.Double)
       , setResultVC -- :: a1 -> Prelude.Double -> IVCell a0 -> Prelude.IO ()
       , setResultForceVC -- :: a1 -> Prelude.Double -> IVCell a0 -> Prelude.IO ()
       , getResultIUVC -- :: IVCell a0 -> Prelude.IO (Prelude.Double)
       , setResultIUVC -- :: Prelude.Double -> IVCell a0 -> Prelude.IO ()
       , setResultIUForceVC -- :: Prelude.Double -> IVCell a0 -> Prelude.IO ()
       , getStatVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getUnitsVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getNameVC -- :: IVCell a0 -> Prelude.IO (Prelude.String)
       , getLocalNameVC -- :: IVCell a0 -> Prelude.IO (Prelude.String)
       , setRowNameVC -- :: Prelude.String -> IVCell a0 -> Prelude.IO ()
       , getDocumentVC -- :: IVCell a0 -> Prelude.IO (IVDocument ())
       , getShapeVC -- :: IVCell a0 -> Prelude.IO (IVShape ())
       , getStyleVC -- :: IVCell a0 -> Prelude.IO (IVStyle ())
       , getSectionVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getRowVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getColumnVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getIsConstantVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getIsInheritedVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , getResultIntVC -- :: a1 -> Prelude.Int -> IVCell a0 -> Prelude.IO (Prelude.Int)
       , setResultFromIntVC -- :: a1 -> Prelude.Int -> IVCell a0 -> Prelude.IO ()
       , setResultFromIntForceVC -- :: a1 -> Prelude.Int -> IVCell a0 -> Prelude.IO ()
       , getResultStrVC -- :: a1 -> IVCell a0 -> Prelude.IO (Prelude.String)
       , triggerVC -- :: IVCell a0 -> Prelude.IO ()
       , getRowNameVC -- :: IVCell a0 -> Prelude.IO (Prelude.String)
       , getEventListVC -- :: IVCell a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVC -- :: IVCell a0 -> Prelude.IO (Prelude.Int)
       , IVCell(..)
       , IVCell_(..)
       , iidIVCell
       , applicationVS0 -- :: IVStyle a0 -> Prelude.IO (IVApplication ())
       , statVS0 -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , objectTypeVS0 -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , nameVS -- :: IVStyle a0 -> Prelude.IO (Prelude.String)
       , nameVS0 -- :: Prelude.String -> IVStyle a0 -> Prelude.IO ()
       , indexVS -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , documentVS0 -- :: IVStyle a0 -> Prelude.IO (IVDocument ())
       , getBasedOnVS -- :: IVStyle a0 -> Prelude.IO (Prelude.String)
       , setBasedOnVS -- :: Prelude.String -> IVStyle a0 -> Prelude.IO ()
       , getTextBasedOnVS -- :: IVStyle a0 -> Prelude.IO (Prelude.String)
       , setTextBasedOnVS -- :: Prelude.String -> IVStyle a0 -> Prelude.IO ()
       , getLineBasedOnVS -- :: IVStyle a0 -> Prelude.IO (Prelude.String)
       , setLineBasedOnVS -- :: Prelude.String -> IVStyle a0 -> Prelude.IO ()
       , getFillBasedOnVS -- :: IVStyle a0 -> Prelude.IO (Prelude.String)
       , setFillBasedOnVS -- :: Prelude.String -> IVStyle a0 -> Prelude.IO ()
       , getIncludesTextVS -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , setIncludesTextVS -- :: Prelude.Int -> IVStyle a0 -> Prelude.IO ()
       , getIncludesLineVS -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , setIncludesLineVS -- :: Prelude.Int -> IVStyle a0 -> Prelude.IO ()
       , getIncludesFillVS -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , setIncludesFillVS -- :: Prelude.Int -> IVStyle a0 -> Prelude.IO ()
       , cellsVS -- :: Prelude.String -> IVStyle a0 -> Prelude.IO (IVCell ())
       , deleteVS0 -- :: IVStyle a0 -> Prelude.IO ()
       , eventListVS0 -- :: IVStyle a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVS0 -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , iDVS -- :: IVStyle a0 -> Prelude.IO (Prelude.Int)
       , getFormulasVS0 -- :: SafeArray Prelude.Int -> IVStyle a0 -> Prelude.IO (SafeArray ())
       , getResultsVS0 -- :: SafeArray Prelude.Int -> Prelude.Int -> SafeArray () -> IVStyle a0 -> Prelude.IO (SafeArray ())
       , setFormulasVS0 -- :: SafeArray Prelude.Int -> SafeArray () -> Prelude.Int -> IVStyle a0 -> Prelude.IO (Prelude.Int)
       , setResultsVS0 -- :: SafeArray Prelude.Int -> SafeArray () -> SafeArray () -> Prelude.Int -> IVStyle a0 -> Prelude.IO (Prelude.Int)
       , IVStyle(..)
       , IVStyle_(..)
       , iidIVStyle
       , getApplicationVW -- :: IVWindow a0 -> Prelude.IO (IVApplication ())
       , getStatVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , getObjectTypeVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , activate -- :: IVWindow a0 -> Prelude.IO ()
       , getTypeVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , getDocumentVW -- :: IVWindow a0 -> Prelude.IO (IVDocument ())
       , getPageAsObjVW -- :: IVWindow a0 -> Prelude.IO (IVPage ())
       , setPageFromNameVW -- :: Prelude.String -> IVWindow a0 -> Prelude.IO ()
       , getZoomVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Double)
       , setZoomVW -- :: Prelude.Double -> IVWindow a0 -> Prelude.IO ()
       , closeVW -- :: IVWindow a0 -> Prelude.IO ()
       , selectAll -- :: IVWindow a0 -> Prelude.IO ()
       , deselectAll -- :: IVWindow a0 -> Prelude.IO ()
       , getSelectionVW -- :: IVWindow a0 -> Prelude.IO (IVSelection ())
       , select -- :: IVShape a1 -> Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , getIndexVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , cutVW -- :: IVWindow a0 -> Prelude.IO ()
       , copyVW -- :: IVWindow a0 -> Prelude.IO ()
       , pasteVW -- :: IVWindow a0 -> Prelude.IO ()
       , deleteVW -- :: IVWindow a0 -> Prelude.IO ()
       , duplicateVW -- :: IVWindow a0 -> Prelude.IO ()
       , groupVW -- :: IVWindow a0 -> Prelude.IO ()
       , union -- :: IVWindow a0 -> Prelude.IO ()
       , combine -- :: IVWindow a0 -> Prelude.IO ()
       , fragment -- :: IVWindow a0 -> Prelude.IO ()
       , addToGroup -- :: IVWindow a0 -> Prelude.IO ()
       , removeFromGroup -- :: IVWindow a0 -> Prelude.IO ()
       , getSubTypeVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , intersect -- :: IVWindow a0 -> Prelude.IO ()
       , subtract -- :: IVWindow a0 -> Prelude.IO ()
       , getEventListVW -- :: IVWindow a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , getWindowHandleVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , getWindowHandle32VW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , trim -- :: IVWindow a0 -> Prelude.IO ()
       , join -- :: IVWindow a0 -> Prelude.IO ()
       , getShowRulersVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , setShowRulersVW -- :: Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , getShowGridVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , setShowGridVW -- :: Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , getShowGuidesVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , setShowGuidesVW -- :: Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , getShowConnectPointsVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , setShowConnectPointsVW -- :: Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , getShowPageBreaksVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , setShowPageBreaksVW -- :: Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , getPageVW -- :: IVWindow a0 -> Prelude.IO (a1)
       , setPageVW -- :: a1 -> IVWindow a0 -> Prelude.IO ()
       , dockedStencils -- :: IVWindow a0 -> Prelude.IO (SafeArray Prelude.String)
       , getMasterVW -- :: IVWindow a0 -> Prelude.IO (a1)
       , getShowScrollBarsVW -- :: IVWindow a0 -> Prelude.IO (Prelude.Int)
       , setShowScrollBarsVW -- :: Prelude.Int -> IVWindow a0 -> Prelude.IO ()
       , IVWindow(..)
       , IVWindow_(..)
       , iidIVWindow
       , applicationVS1 -- :: IVSelection a0 -> Prelude.IO (IVApplication ())
       , statVS1 -- :: IVSelection a0 -> Prelude.IO (Prelude.Int)
       , objectTypeVS1 -- :: IVSelection a0 -> Prelude.IO (Prelude.Int)
       , itemVS -- :: Prelude.Int -> IVSelection a0 -> Prelude.IO (IVShape ())
       , countVS -- :: IVSelection a0 -> Prelude.IO (Prelude.Int)
       , exportVS0 -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , documentVS1 -- :: IVSelection a0 -> Prelude.IO (IVDocument ())
       , containingPageVS0 -- :: IVSelection a0 -> Prelude.IO (IVPage ())
       , containingMasterVS0 -- :: IVSelection a0 -> Prelude.IO (IVMaster ())
       , containingShapeVS0 -- :: IVSelection a0 -> Prelude.IO (IVShape ())
       , bringForwardVS -- :: IVSelection a0 -> Prelude.IO ()
       , bringToFrontVS -- :: IVSelection a0 -> Prelude.IO ()
       , sendBackwardVS -- :: IVSelection a0 -> Prelude.IO ()
       , sendToBackVS -- :: IVSelection a0 -> Prelude.IO ()
       , styleVS -- :: IVSelection a0 -> Prelude.IO (Prelude.String)
       , styleVS0 -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , styleKeepFmtVS -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , lineStyleVS -- :: IVSelection a0 -> Prelude.IO (Prelude.String)
       , lineStyleVS0 -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , lineStyleKeepFmtVS -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , fillStyleVS -- :: IVSelection a0 -> Prelude.IO (Prelude.String)
       , fillStyleVS0 -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , fillStyleKeepFmtVS -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , textStyleVS -- :: IVSelection a0 -> Prelude.IO (Prelude.String)
       , textStyleVS0 -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , textStyleKeepFmtVS -- :: Prelude.String -> IVSelection a0 -> Prelude.IO ()
       , combineVS -- :: IVSelection a0 -> Prelude.IO ()
       , fragmentVS -- :: IVSelection a0 -> Prelude.IO ()
       , intersectVS -- :: IVSelection a0 -> Prelude.IO ()
       , subtractVS -- :: IVSelection a0 -> Prelude.IO ()
       , unionVS -- :: IVSelection a0 -> Prelude.IO ()
       , flipHorizontalVS -- :: IVSelection a0 -> Prelude.IO ()
       , flipVerticalVS -- :: IVSelection a0 -> Prelude.IO ()
       , reverseEndsVS -- :: IVSelection a0 -> Prelude.IO ()
       , rotate90VS -- :: IVSelection a0 -> Prelude.IO ()
       , copyVS -- :: IVSelection a0 -> Prelude.IO ()
       , cutVS -- :: IVSelection a0 -> Prelude.IO ()
       , deleteVS1 -- :: IVSelection a0 -> Prelude.IO ()
       , duplicateVS -- :: IVSelection a0 -> Prelude.IO ()
       , groupVS -- :: IVSelection a0 -> Prelude.IO ()
       , convertToGroupVS -- :: IVSelection a0 -> Prelude.IO ()
       , ungroupVS -- :: IVSelection a0 -> Prelude.IO ()
       , selectAllVS -- :: IVSelection a0 -> Prelude.IO ()
       , deselectAllVS -- :: IVSelection a0 -> Prelude.IO ()
       , selectVS -- :: IVShape a1 -> Prelude.Int -> IVSelection a0 -> Prelude.IO ()
       , eventListVS1 -- :: IVSelection a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVS1 -- :: IVSelection a0 -> Prelude.IO (Prelude.Int)
       , trimVS -- :: IVSelection a0 -> Prelude.IO ()
       , joinVS -- :: IVSelection a0 -> Prelude.IO ()
       , fitCurveVS -- :: Prelude.Double -> Prelude.Int -> IVSelection a0 -> Prelude.IO ()
       , layoutVS0 -- :: IVSelection a0 -> Prelude.IO ()
       , boundingBoxVS0 -- :: Prelude.Int -> IVSelection a0 -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
       , IVSelection(..)
       , IVSelection_(..)
       , iidIVSelection
       , applicationVC -- :: IVConnects a0 -> Prelude.IO (IVApplication ())
       , getItemVC -- :: Prelude.Int -> IVConnects a0 -> Prelude.IO (IVConnect ())
       , getCountVC -- :: IVConnects a0 -> Prelude.IO (Prelude.Int)
       , getFromSheetVC -- :: IVConnects a0 -> Prelude.IO (IVShape ())
       , objectTypeVC -- :: IVConnects a0 -> Prelude.IO (Prelude.Int)
       , documentVC -- :: IVConnects a0 -> Prelude.IO (IVDocument ())
       , statVC -- :: IVConnects a0 -> Prelude.IO (Prelude.Int)
       , getToSheetVC -- :: IVConnects a0 -> Prelude.IO (IVShape ())
       , IVConnects(..)
       , IVConnects_(..)
       , iidIVConnects
       , applicationVC0 -- :: IVConnect a0 -> Prelude.IO (IVApplication ())
       , statVC0 -- :: IVConnect a0 -> Prelude.IO (Prelude.Int)
       , fromSheetVC -- :: IVConnect a0 -> Prelude.IO (IVShape ())
       , toSheetVC -- :: IVConnect a0 -> Prelude.IO (IVShape ())
       , getFromCellVC -- :: IVConnect a0 -> Prelude.IO (IVCell ())
       , getToCellVC -- :: IVConnect a0 -> Prelude.IO (IVCell ())
       , getFromPartVC -- :: IVConnect a0 -> Prelude.IO (Prelude.Int)
       , getToPartVC -- :: IVConnect a0 -> Prelude.IO (Prelude.Int)
       , objectTypeVC0 -- :: IVConnect a0 -> Prelude.IO (Prelude.Int)
       , getIndexVC -- :: IVConnect a0 -> Prelude.IO (Prelude.Int)
       , documentVC0 -- :: IVConnect a0 -> Prelude.IO (IVDocument ())
       , IVConnect(..)
       , IVConnect_(..)
       , iidIVConnect
       , getApplicationVOLEO -- :: IVOLEObjects a0 -> Prelude.IO (IVApplication ())
       , getObjectTypeVOLEO -- :: IVOLEObjects a0 -> Prelude.IO (Prelude.Int)
       , getStatVOLEO -- :: IVOLEObjects a0 -> Prelude.IO (Prelude.Int)
       , getItemVOLEO -- :: a1 -> IVOLEObjects a0 -> Prelude.IO (IVOLEObject ())
       , getCountVOLEO -- :: IVOLEObjects a0 -> Prelude.IO (Prelude.Int)
       , IVOLEObjects(..)
       , IVOLEObjects_(..)
       , iidIVOLEObjects
       , applicationVOLEO -- :: IVOLEObject a0 -> Prelude.IO (IVApplication ())
       , getShapeVOLEO -- :: IVOLEObject a0 -> Prelude.IO (IVShape ())
       , objectTypeVOLEO -- :: IVOLEObject a0 -> Prelude.IO (Prelude.Int)
       , statVOLEO -- :: IVOLEObject a0 -> Prelude.IO (Prelude.Int)
       , getClassIDVOLEO -- :: IVOLEObject a0 -> Prelude.IO (Prelude.String)
       , getProgIDVOLEO -- :: IVOLEObject a0 -> Prelude.IO (Prelude.String)
       , getForeignTypeVOLEO -- :: IVOLEObject a0 -> Prelude.IO (Prelude.Int)
       , getObjectVOLEO -- :: IVOLEObject a0 -> Prelude.IO (Automation.IDispatch ())
       , IVOLEObject(..)
       , IVOLEObject_(..)
       , iidIVOLEObject
       , addCustomField -- :: Prelude.String -> Prelude.Int -> IVCharacters a0 -> Prelude.IO ()
       , addField -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVCharacters a0 -> Prelude.IO ()
       , applicationVC1 -- :: IVCharacters a0 -> Prelude.IO (IVApplication ())
       , getBeginVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , setBeginVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO ()
       , getCharCountVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , setCharPropsVC -- :: Prelude.Int -> Prelude.Int -> IVCharacters a0 -> Prelude.IO ()
       , getCharPropsRowVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , copyVC -- :: IVCharacters a0 -> Prelude.IO ()
       , cutVC -- :: IVCharacters a0 -> Prelude.IO ()
       , objectTypeVC1 -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getEndVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , setEndVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO ()
       , getFieldCategoryVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getFieldCodeVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getFieldFormatVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getFieldFormulaVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.String)
       , getIsFieldVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , setParaPropsVC -- :: Prelude.Int -> Prelude.Int -> IVCharacters a0 -> Prelude.IO ()
       , getParaPropsRowVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , pasteVC -- :: IVCharacters a0 -> Prelude.IO ()
       , getTabPropsRowVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getRunBeginVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getRunEndVC -- :: Prelude.Int -> IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , shapeVC -- :: IVCharacters a0 -> Prelude.IO (IVShape ())
       , statVC1 -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getTextAsStringVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.String)
       , setTextVC -- :: a1 -> IVCharacters a0 -> Prelude.IO ()
       , documentVC1 -- :: IVCharacters a0 -> Prelude.IO (IVDocument ())
       , eventListVC -- :: IVCharacters a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVC -- :: IVCharacters a0 -> Prelude.IO (Prelude.Int)
       , getTextVC -- :: IVCharacters a0 -> Prelude.IO (a1)
       , IVCharacters(..)
       , IVCharacters_(..)
       , iidIVCharacters
       , getDescriptionVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.String)
       , setDescriptionVH -- :: Prelude.String -> IVHyperlink a0 -> Prelude.IO ()
       , getApplicationVH -- :: IVHyperlink a0 -> Prelude.IO (IVApplication ())
       , getShapeVH -- :: IVHyperlink a0 -> Prelude.IO (IVShape ())
       , getObjectTypeVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.Int)
       , getStatVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.Int)
       , getAddressVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.String)
       , setAddressVH -- :: Prelude.String -> IVHyperlink a0 -> Prelude.IO ()
       , getSubAddressVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.String)
       , setSubAddressVH -- :: Prelude.String -> IVHyperlink a0 -> Prelude.IO ()
       , getNewWindowVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.Int)
       , setNewWindowVH -- :: Prelude.Int -> IVHyperlink a0 -> Prelude.IO ()
       , getExtraInfoVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.String)
       , setExtraInfoVH -- :: Prelude.String -> IVHyperlink a0 -> Prelude.IO ()
       , getFrameVH -- :: IVHyperlink a0 -> Prelude.IO (Prelude.String)
       , setFrameVH -- :: Prelude.String -> IVHyperlink a0 -> Prelude.IO ()
       , follow -- :: IVHyperlink a0 -> Prelude.IO ()
       , deleteVH -- :: IVHyperlink a0 -> Prelude.IO ()
       , copyVH -- :: IVHyperlink a0 -> Prelude.IO ()
       , createURL -- :: Prelude.Int -> IVHyperlink a0 -> Prelude.IO (Prelude.String)
       , IVHyperlink(..)
       , IVHyperlink_(..)
       , iidIVHyperlink
       , applicationVP -- :: IVPaths a0 -> Prelude.IO (IVApplication ())
       , objectTypeVP -- :: IVPaths a0 -> Prelude.IO (Prelude.Int)
       , getItemVP -- :: Prelude.Int -> IVPaths a0 -> Prelude.IO (IVPath ())
       , getCountVP -- :: IVPaths a0 -> Prelude.IO (Prelude.Int)
       , IVPaths(..)
       , IVPaths_(..)
       , iidIVPaths
       , applicationVP0 -- :: IVPath a0 -> Prelude.IO (IVApplication ())
       , objectTypeVP0 -- :: IVPath a0 -> Prelude.IO (Prelude.Int)
       , itemVP -- :: Prelude.Int -> IVPath a0 -> Prelude.IO (IVCurve ())
       , countVP -- :: IVPath a0 -> Prelude.IO (Prelude.Int)
       , getClosedVP -- :: IVPath a0 -> Prelude.IO (Prelude.Int)
       , points -- :: Prelude.Double -> IVPath a0 -> Prelude.IO (SafeArray Prelude.Double)
       , IVPath(..)
       , IVPath_(..)
       , iidIVPath
       , applicationVC2 -- :: IVCurve a0 -> Prelude.IO (IVApplication ())
       , objectTypeVC2 -- :: IVCurve a0 -> Prelude.IO (Prelude.Int)
       , getClosedVC -- :: IVCurve a0 -> Prelude.IO (Prelude.Int)
       , pointsVC -- :: Prelude.Double -> IVCurve a0 -> Prelude.IO (SafeArray Prelude.Double)
       , getStartVC -- :: IVCurve a0 -> Prelude.IO (Prelude.Double)
       , endVC -- :: IVCurve a0 -> Prelude.IO (Prelude.Double)
       , point -- :: Prelude.Double -> IVCurve a0 -> Prelude.IO (Prelude.Double, Prelude.Double)
       , IVCurve(..)
       , IVCurve_(..)
       , iidIVCurve
       , addVD -- :: Prelude.String -> IVDocuments a0 -> Prelude.IO (IVDocument ())
       , openVD -- :: Prelude.String -> IVDocuments a0 -> Prelude.IO (IVDocument ())
       , applicationVD -- :: IVDocuments a0 -> Prelude.IO (IVApplication ())
       , objectTypeVD -- :: IVDocuments a0 -> Prelude.IO (Prelude.Int)
       , getItemVD -- :: a1 -> IVDocuments a0 -> Prelude.IO (IVDocument ())
       , getCountVD -- :: IVDocuments a0 -> Prelude.IO (Prelude.Int)
       , openEx -- :: Prelude.String -> Prelude.Int -> IVDocuments a0 -> Prelude.IO (IVDocument ())
       , eventListVD -- :: IVDocuments a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVD -- :: IVDocuments a0 -> Prelude.IO (Prelude.Int)
       , getNames -- :: IVDocuments a0 -> Prelude.IO (SafeArray Prelude.String)
       , IVDocuments(..)
       , IVDocuments_(..)
       , iidIVDocuments
       , applicationVW -- :: IVWindows a0 -> Prelude.IO (IVApplication ())
       , objectTypeVW -- :: IVWindows a0 -> Prelude.IO (Prelude.Int)
       , getItemVW -- :: Prelude.Int -> IVWindows a0 -> Prelude.IO (IVWindow ())
       , getCountVW -- :: IVWindows a0 -> Prelude.IO (Prelude.Int)
       , arrange -- :: IVWindows a0 -> Prelude.IO ()
       , eventListVW -- :: IVWindows a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVW -- :: IVWindows a0 -> Prelude.IO (Prelude.Int)
       , IVWindows(..)
       , IVWindows_(..)
       , iidIVWindows
       , applicationVA -- :: IVAddons a0 -> Prelude.IO (IVApplication ())
       , objectTypeVA -- :: IVAddons a0 -> Prelude.IO (Prelude.Int)
       , getItemVA -- :: a1 -> IVAddons a0 -> Prelude.IO (IVAddon ())
       , getCountVA -- :: IVAddons a0 -> Prelude.IO (Prelude.Int)
       , addVA -- :: Prelude.String -> IVAddons a0 -> Prelude.IO (IVAddon ())
       , getNamesVA -- :: IVAddons a0 -> Prelude.IO (SafeArray Prelude.String)
       , IVAddons(..)
       , IVAddons_(..)
       , iidIVAddons
       , applicationVA0 -- :: IVAddon a0 -> Prelude.IO (IVApplication ())
       , objectTypeVA0 -- :: IVAddon a0 -> Prelude.IO (Prelude.Int)
       , getNameVA -- :: IVAddon a0 -> Prelude.IO (Prelude.String)
       , getIndexVA -- :: IVAddon a0 -> Prelude.IO (Prelude.Int)
       , getEnabledVA -- :: IVAddon a0 -> Prelude.IO (Prelude.Int)
       , run -- :: Prelude.String -> IVAddon a0 -> Prelude.IO ()
       , IVAddon(..)
       , IVAddon_(..)
       , iidIVAddon
       , applicationVM -- :: IVMasters a0 -> Prelude.IO (IVApplication ())
       , objectTypeVM -- :: IVMasters a0 -> Prelude.IO (Prelude.Int)
       , itemVM -- :: a1 -> IVMasters a0 -> Prelude.IO (IVMaster ())
       , countVM -- :: IVMasters a0 -> Prelude.IO (Prelude.Int)
       , documentVM -- :: IVMasters a0 -> Prelude.IO (IVDocument ())
       , statVM -- :: IVMasters a0 -> Prelude.IO (Prelude.Int)
       , eventListVM -- :: IVMasters a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVM -- :: IVMasters a0 -> Prelude.IO (Prelude.Int)
       , addVM0 -- :: IVMasters a0 -> Prelude.IO (IVMaster ())
       , getNamesVM -- :: IVMasters a0 -> Prelude.IO (SafeArray Prelude.String)
       , IVMasters(..)
       , IVMasters_(..)
       , iidIVMasters
       , applicationVP1 -- :: IVPages a0 -> Prelude.IO (IVApplication ())
       , objectTypeVP1 -- :: IVPages a0 -> Prelude.IO (Prelude.Int)
       , itemVP0 -- :: a1 -> IVPages a0 -> Prelude.IO (IVPage ())
       , countVP0 -- :: IVPages a0 -> Prelude.IO (Prelude.Int)
       , addVP -- :: IVPages a0 -> Prelude.IO (IVPage ())
       , documentVP -- :: IVPages a0 -> Prelude.IO (IVDocument ())
       , statVP -- :: IVPages a0 -> Prelude.IO (Prelude.Int)
       , eventListVP -- :: IVPages a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVP -- :: IVPages a0 -> Prelude.IO (Prelude.Int)
       , getNamesVP -- :: IVPages a0 -> Prelude.IO (SafeArray Prelude.String)
       , IVPages(..)
       , IVPages_(..)
       , iidIVPages
       , applicationVS2 -- :: IVStyles a0 -> Prelude.IO (IVApplication ())
       , objectTypeVS2 -- :: IVStyles a0 -> Prelude.IO (Prelude.Int)
       , itemVS0 -- :: a1 -> IVStyles a0 -> Prelude.IO (IVStyle ())
       , countVS0 -- :: IVStyles a0 -> Prelude.IO (Prelude.Int)
       , documentVS2 -- :: IVStyles a0 -> Prelude.IO (IVDocument ())
       , addVS -- :: Prelude.String -> Prelude.String -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVStyles a0 -> Prelude.IO (IVStyle ())
       , statVS2 -- :: IVStyles a0 -> Prelude.IO (Prelude.Int)
       , eventListVS2 -- :: IVStyles a0 -> Prelude.IO (IVEventList ())
       , persistsEventsVS2 -- :: IVStyles a0 -> Prelude.IO (Prelude.Int)
       , itemFromIDVS -- :: Prelude.Int -> IVStyles a0 -> Prelude.IO (IVStyle ())
       , getNamesVS -- :: IVStyles a0 -> Prelude.IO (SafeArray Prelude.String)
       , IVStyles(..)
       , IVStyles_(..)
       , iidIVStyles
       , getApplicationVF -- :: IVFonts a0 -> Prelude.IO (IVApplication ())
       , getDocumentVF -- :: IVFonts a0 -> Prelude.IO (IVDocument ())
       , getCountVF -- :: IVFonts a0 -> Prelude.IO (Prelude.Int)
       , getItemVF -- :: a1 -> IVFonts a0 -> Prelude.IO (IVFont ())
       , getItemFromIDVF -- :: Prelude.Int -> IVFonts a0 -> Prelude.IO (IVFont ())
       , getObjectTypeVF -- :: IVFonts a0 -> Prelude.IO (Prelude.Int)
       , getStatVF -- :: IVFonts a0 -> Prelude.IO (Prelude.Int)
       , IVFonts(..)
       , IVFonts_(..)
       , iidIVFonts
       , applicationVF -- :: IVFont a0 -> Prelude.IO (IVApplication ())
       , documentVF -- :: IVFont a0 -> Prelude.IO (IVDocument ())
       , getIndexVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , getNameVF -- :: IVFont a0 -> Prelude.IO (Prelude.String)
       , getIDVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , getAttributesVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , getCharSetVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , getPitchAndFamilyVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , objectTypeVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , statVF -- :: IVFont a0 -> Prelude.IO (Prelude.Int)
       , IVFont(..)
       , IVFont_(..)
       , iidIVFont
       , applicationVC3 -- :: IVColors a0 -> Prelude.IO (IVApplication ())
       , documentVC2 -- :: IVColors a0 -> Prelude.IO (IVDocument ())
       , countVC -- :: IVColors a0 -> Prelude.IO (Prelude.Int)
       , itemVC -- :: Prelude.Int -> IVColors a0 -> Prelude.IO (IVColor ())
       , objectTypeVC3 -- :: IVColors a0 -> Prelude.IO (Prelude.Int)
       , statVC2 -- :: IVColors a0 -> Prelude.IO (Prelude.Int)
       , IVColors(..)
       , IVColors_(..)
       , iidIVColors
       , applicationVC4 -- :: IVColor a0 -> Prelude.IO (IVApplication ())
       , documentVC3 -- :: IVColor a0 -> Prelude.IO (IVDocument ())
       , indexVC -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , getRedVC -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , setRedVC -- :: Prelude.Int -> IVColor a0 -> Prelude.IO ()
       , getGreenVC -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , setGreenVC -- :: Prelude.Int -> IVColor a0 -> Prelude.IO ()
       , getBlueVC -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , setBlueVC -- :: Prelude.Int -> IVColor a0 -> Prelude.IO ()
       , getFlagsVC -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , setFlagsVC -- :: Prelude.Int -> IVColor a0 -> Prelude.IO ()
       , getPaletteEntryVC -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , setPaletteEntryVC -- :: Prelude.Int -> IVColor a0 -> Prelude.IO ()
       , objectTypeVC4 -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , statVC3 -- :: IVColor a0 -> Prelude.IO (Prelude.Int)
       , IVColor(..)
       , IVColor_(..)
       , iidIVColor
       , clsidPath
       , clsidPaths
       , clsidOLEObjects
       , clsidOLEObject
       , getNameVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setNameVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getObjectVDE -- :: IVDispExtender a0 -> Prelude.IO (Com.IUnknown ())
       , getParentVDE -- :: IVDispExtender a0 -> Prelude.IO (Com.IUnknown ())
       , deleteVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , index -- :: IVDispExtender a0 -> Prelude.IO ()
       , getShapeVDE -- :: IVDispExtender a0 -> Prelude.IO (IVShape ())
       , groupVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , bringForwardVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , bringToFrontVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , convertToGroupVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , sendBackwardVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , sendToBackVDE -- :: IVDispExtender a0 -> Prelude.IO ()
       , getDocumentVDE -- :: IVDispExtender a0 -> Prelude.IO (IVDocument ())
       , getShapeParentVDE -- :: IVDispExtender a0 -> Prelude.IO (Automation.IDispatch ())
       , getApplicationVDE -- :: IVDispExtender a0 -> Prelude.IO (IVApplication ())
       , getMasterVDE -- :: IVDispExtender a0 -> Prelude.IO (IVMaster ())
       , getCellsVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO (IVCell ())
       , getCellsSRCVDE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (IVCell ())
       , getData1VDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setData1VDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getData2VDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setData2VDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getData3VDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setData3VDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getHelpVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setHelpVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getNameIDVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , shapeCopy -- :: IVDispExtender a0 -> Prelude.IO ()
       , shapeCut -- :: IVDispExtender a0 -> Prelude.IO ()
       , shapeDelete -- :: IVDispExtender a0 -> Prelude.IO ()
       , shapeDuplicate -- :: IVDispExtender a0 -> Prelude.IO ()
       , getRowCountVDE -- :: Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , addSectionVDE -- :: Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , deleteSectionVDE -- :: Prelude.Int -> IVDispExtender a0 -> Prelude.IO ()
       , addRowVDE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , deleteRowVDE -- :: Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO ()
       , getRowsCellCountVDE -- :: Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getRowTypeVDE -- :: Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , setRowTypeVDE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO ()
       , setCenterVDE -- :: Prelude.Double -> Prelude.Double -> IVDispExtender a0 -> Prelude.IO ()
       , getConnectsVDE -- :: IVDispExtender a0 -> Prelude.IO (IVConnects ())
       , getShapeIndexVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getStyleVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setStyleVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , setStyleKeepFmtVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getLineStyleVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setLineStyleVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , setLineStyleKeepFmtVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getFillStyleVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , setFillStyleVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , setFillStyleKeepFmtVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , exportVDE -- :: Prelude.String -> IVDispExtender a0 -> Prelude.IO ()
       , getUniqueIDVDE -- :: Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , getContainingPageVDE -- :: IVDispExtender a0 -> Prelude.IO (IVPage ())
       , getContainingMasterVDE -- :: IVDispExtender a0 -> Prelude.IO (IVMaster ())
       , getContainingShapeVDE -- :: IVDispExtender a0 -> Prelude.IO (IVShape ())
       , getSectionExistsVDE -- :: Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getRowExistsVDE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getCellExistsVDE -- :: Prelude.String -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getCellsSRCExistsVDE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getLayerCountVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getLayerVDE -- :: Prelude.Int -> IVDispExtender a0 -> Prelude.IO (IVLayer ())
       , addNamedRowVDE -- :: Prelude.Int -> Prelude.String -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , addRowsVDE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getEventListVDE -- :: IVDispExtender a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getClassIDVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , getShapeObjectVDE -- :: IVDispExtender a0 -> Prelude.IO (Automation.IDispatch ())
       , openSheetWindowVDE -- :: IVDispExtender a0 -> Prelude.IO (IVWindow ())
       , getShapeIDVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getFormulasVDE -- :: SafeArray Prelude.Int -> IVDispExtender a0 -> Prelude.IO (SafeArray ())
       , getResultsVDE -- :: SafeArray Prelude.Int -> Prelude.Int -> SafeArray () -> IVDispExtender a0 -> Prelude.IO (SafeArray ())
       , setFormulasVDE -- :: SafeArray Prelude.Int -> SafeArray () -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , setResultsVDE -- :: SafeArray Prelude.Int -> SafeArray () -> SafeArray () -> Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getFromConnectsVDE -- :: IVDispExtender a0 -> Prelude.IO (IVConnects ())
       , boundingBoxVDE -- :: Prelude.Int -> IVDispExtender a0 -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
       , hitTestVDE -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , getHyperlinkVDE -- :: IVDispExtender a0 -> Prelude.IO (IVHyperlink ())
       , getProgIDVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.String)
       , getObjectIsInheritedVDE -- :: IVDispExtender a0 -> Prelude.IO (Prelude.Int)
       , IVDispExtender(..)
       , IVDispExtender_(..)
       , iidIVDispExtender
       , getNameVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setNameVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getObjectVE -- :: IVExtender a0 -> Prelude.IO (Com.IUnknown ())
       , getParentVE -- :: IVExtender a0 -> Prelude.IO (Com.IUnknown ())
       , deleteVE0 -- :: IVExtender a0 -> Prelude.IO ()
       , indexVE -- :: IVExtender a0 -> Prelude.IO ()
       , getShapeVE -- :: IVExtender a0 -> Prelude.IO (IVShape ())
       , groupVE -- :: IVExtender a0 -> Prelude.IO ()
       , bringForwardVE -- :: IVExtender a0 -> Prelude.IO ()
       , bringToFrontVE -- :: IVExtender a0 -> Prelude.IO ()
       , convertToGroupVE -- :: IVExtender a0 -> Prelude.IO ()
       , sendBackwardVE -- :: IVExtender a0 -> Prelude.IO ()
       , sendToBackVE -- :: IVExtender a0 -> Prelude.IO ()
       , getDocumentVE -- :: IVExtender a0 -> Prelude.IO (IVDocument ())
       , getShapeParentVE -- :: IVExtender a0 -> Prelude.IO (Automation.IDispatch ())
       , applicationVE -- :: IVExtender a0 -> Prelude.IO (IVApplication ())
       , getMasterVE -- :: IVExtender a0 -> Prelude.IO (IVMaster ())
       , getCellsVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO (IVCell ())
       , getCellsSRCVE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (IVCell ())
       , getData1VE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setData1VE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getData2VE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setData2VE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getData3VE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setData3VE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getHelpVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setHelpVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getNameIDVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , shapeCopyVE -- :: IVExtender a0 -> Prelude.IO ()
       , shapeCutVE -- :: IVExtender a0 -> Prelude.IO ()
       , shapeDeleteVE -- :: IVExtender a0 -> Prelude.IO ()
       , shapeDuplicateVE -- :: IVExtender a0 -> Prelude.IO ()
       , getRowCountVE -- :: Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , addSectionVE -- :: Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , deleteSectionVE -- :: Prelude.Int -> IVExtender a0 -> Prelude.IO ()
       , addRowVE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , deleteRowVE -- :: Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO ()
       , getRowsCellCountVE -- :: Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getRowTypeVE -- :: Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , setRowTypeVE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO ()
       , setCenterVE -- :: Prelude.Double -> Prelude.Double -> IVExtender a0 -> Prelude.IO ()
       , getConnectsVE -- :: IVExtender a0 -> Prelude.IO (IVConnects ())
       , getShapeIndexVE -- :: IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getStyleVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setStyleVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , setStyleKeepFmtVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getLineStyleVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setLineStyleVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , setLineStyleKeepFmtVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getFillStyleVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , setFillStyleVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , setFillStyleKeepFmtVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , exportVE -- :: Prelude.String -> IVExtender a0 -> Prelude.IO ()
       , getUniqueIDVE -- :: Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.String)
       , getContainingPageVE -- :: IVExtender a0 -> Prelude.IO (IVPage ())
       , getContainingMasterVE -- :: IVExtender a0 -> Prelude.IO (IVMaster ())
       , getContainingShapeVE -- :: IVExtender a0 -> Prelude.IO (IVShape ())
       , getSectionExistsVE -- :: Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getRowExistsVE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getCellExistsVE -- :: Prelude.String -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getCellsSRCExistsVE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getLayerCountVE -- :: IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getLayerVE -- :: Prelude.Int -> IVExtender a0 -> Prelude.IO (IVLayer ())
       , addNamedRowVE -- :: Prelude.Int -> Prelude.String -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , addRowsVE -- :: Prelude.Int -> Prelude.Int -> Prelude.Int -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , eventListVE -- :: IVExtender a0 -> Prelude.IO (IVEventList ())
       , getPersistsEventsVE -- :: IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getClassIDVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , getShapeObjectVE -- :: IVExtender a0 -> Prelude.IO (Automation.IDispatch ())
       , openSheetWindowVE -- :: IVExtender a0 -> Prelude.IO (IVWindow ())
       , getShapeIDVE -- :: IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getFormulasVE -- :: SafeArray Prelude.Int -> IVExtender a0 -> Prelude.IO (SafeArray ())
       , getResultsVE -- :: SafeArray Prelude.Int -> Prelude.Int -> SafeArray () -> IVExtender a0 -> Prelude.IO (SafeArray ())
       , setFormulasVE -- :: SafeArray Prelude.Int -> SafeArray () -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , setResultsVE -- :: SafeArray Prelude.Int -> SafeArray () -> SafeArray () -> Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getFromConnectsVE -- :: IVExtender a0 -> Prelude.IO (IVConnects ())
       , boundingBoxVE -- :: Prelude.Int -> IVExtender a0 -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
       , hitTestVE -- :: Prelude.Double -> Prelude.Double -> Prelude.Double -> IVExtender a0 -> Prelude.IO (Prelude.Int)
       , getHyperlinkVE -- :: IVExtender a0 -> Prelude.IO (IVHyperlink ())
       , getProgIDVE -- :: IVExtender a0 -> Prelude.IO (Prelude.String)
       , getObjectIsInheritedVE -- :: IVExtender a0 -> Prelude.IO (Prelude.Int)
       , IVExtender(..)
       , IVExtender_(..)
       , iidIVExtender
       , clsidLayer
       , clsidLayers
       , clsidSelection
       , clsidShapes
       , getApplicationVG -- :: IVGlobal a0 -> Prelude.IO (IVApplication ())
       , getActiveDocumentVG -- :: IVGlobal a0 -> Prelude.IO (IVDocument ())
       , getActivePageVG -- :: IVGlobal a0 -> Prelude.IO (IVPage ())
       , getActiveWindowVG -- :: IVGlobal a0 -> Prelude.IO (IVWindow ())
       , getDocumentsVG -- :: IVGlobal a0 -> Prelude.IO (IVDocuments ())
       , getWindowsVG -- :: IVGlobal a0 -> Prelude.IO (IVWindows ())
       , getAddonsVG -- :: IVGlobal a0 -> Prelude.IO (IVAddons ())
       , getVbeVG -- :: IVGlobal a0 -> Prelude.IO (Automation.IDispatch ())
       , IVGlobal(..)
       , IVGlobal_(..)
       , iidIVGlobal
       , clsidMenuItem
       , clsidMenuItems
       , clsidMenu
       , clsidMenus
       , clsidMenuSet
       , clsidMenuSets
       , clsidStatusBarItem
       , clsidStatusBarItems
       , clsidStatusBar
       , clsidStatusBars
       , clsidToolbarItem
       , clsidToolbarItems
       , clsidToolbar
       , clsidToolbars
       , clsidToolbarSet
       , clsidToolbarSets
       , clsidUIObject
       , clsidHyperlink
       , clsidGlobal
       , clsidFonts
       , clsidFont
       , clsidEventList
       , clsidEvent
       , EWindows(..)
       , EWindows_(..)
       , iidEWindows
       , clsidWindows
       , EWindow(..)
       , EWindow_(..)
       , iidEWindow
       , clsidWindow
       , EStyles(..)
       , EStyles_(..)
       , iidEStyles
       , clsidStyles
       , EStyle(..)
       , EStyle_(..)
       , iidEStyle
       , clsidStyle
       , EShape(..)
       , EShape_(..)
       , iidEShape
       , clsidExtender
       , clsidShape
       , EPages(..)
       , EPages_(..)
       , iidEPages
       , clsidPages
       , EPage(..)
       , EPage_(..)
       , iidEPage
       , clsidPage
       , EMasters(..)
       , EMasters_(..)
       , iidEMasters
       , clsidMasters
       , EMaster(..)
       , EMaster_(..)
       , iidEMaster
       , clsidMaster
       , EDocuments(..)
       , EDocuments_(..)
       , iidEDocuments
       , EDocument(..)
       , EDocument_(..)
       , iidEDocument
       , ECharacters(..)
       , ECharacters_(..)
       , iidECharacters
       , ECell(..)
       , ECell_(..)
       , iidECell
       , EApplication(..)
       , EApplication_(..)
       , iidEApplication
       , clsidDocuments
       , clsidDocument
       , clsidCurve
       , clsidControl
       , clsidConnects
       , clsidConnect
       , clsidColors
       , clsidColor
       , clsidCharacters
       , clsidCell
       , clsidApplication
       , clsidAddons
       , clsidAddon
       , clsidAccelTables
       , clsidAccelTable
       , clsidAccelItems
       , clsidAccelItem
       ) where
       
import qualified Prelude
import qualified Automation (IDispatch, outInt, propertyGet, 
                             outString, outIDispatch, outBool, method0, inInt, propertySet, 
                             outIDispatch, function1, inString, inIUnknown, inIDispatch, 
                             Variant, outDouble, inVariant, inDouble, noInArg, inMaybe, 
                             SafeArray, outSafeArray, method1, inSafeArray, function2, 
                             outVariant, method4, method2)
import qualified Com (IID, mkIID, IUnknown, CLSID, mkCLSID)

-- Begin Hacked up version (tdn)
data SafeArray a = SafeArray
outSafeArray = Prelude.undefined
inSafeArray = Prelude.undefined

-- End Hacked up version (tdn)

data VisWinTypes
 = VisWinOther
 | VisDrawing
 | VisStencil
 | VisSheet
 | VisIcon
 | VisPageWin
 | VisPageGroupWin
 | VisMasterWin
 | VisMasterGroupWin
 deriving ()
instance Prelude.Enum VisWinTypes where
  fromEnum v =
    case v of
       VisWinOther -> 0
       VisDrawing -> 1
       VisStencil -> 2
       VisSheet -> 3
       VisIcon -> 4
       VisPageWin -> 128
       VisPageGroupWin -> 160
       VisMasterWin -> 64
       VisMasterGroupWin -> 96
  
  toEnum v =
    case v of
       0 -> VisWinOther
       1 -> VisDrawing
       2 -> VisStencil
       3 -> VisSheet
       4 -> VisIcon
       128 -> VisPageWin
       160 -> VisPageGroupWin
       64 -> VisMasterWin
       96 -> VisMasterGroupWin
       _ -> Prelude.error "unmarshallVisWinTypes: illegal enum value "
  
data VisUnitCodes
 = VisNumber
 | VisDate
 | VisDurationUnits
 | VisElapsedWeek
 | VisElapsedDay
 | VisElapsedHour
 | VisElapsedMin
 | VisElapsedSec
 | VisTypeUnits
 | VisPoints
 | VisPicas
 | VisDidots
 | VisCiceros
 | VisPageUnits
 | VisDrawingUnits
 | VisInches
 | VisFeet
 | VisFeetAndInches
 | VisMiles
 | VisCentimeters
 | VisMillimeters
 | VisMeters
 | VisKilometers
 | VisInchFrac
 | VisMileFrac
 | VisYards
 | VisNautMiles
 | VisAngleUnits
 | VisDegrees
 | VisDegreeMinSec
 | VisRadians
 | VisMin
 | VisSec
 | VisCurrency
 | VisNoCast
 deriving ()
instance Prelude.Enum VisUnitCodes where
  fromEnum v =
    case v of
       VisNumber -> 32
       VisDate -> 40
       VisDurationUnits -> 42
       VisElapsedWeek -> 43
       VisElapsedDay -> 44
       VisElapsedHour -> 45
       VisElapsedMin -> 46
       VisElapsedSec -> 47
       VisTypeUnits -> 48
       VisPoints -> 50
       VisPicas -> 51
       VisDidots -> 53
       VisCiceros -> 54
       VisPageUnits -> 63
       VisDrawingUnits -> 64
       VisInches -> 65
       VisFeet -> 66
       VisFeetAndInches -> 67
       VisMiles -> 68
       VisCentimeters -> 69
       VisMillimeters -> 70
       VisMeters -> 71
       VisKilometers -> 72
       VisInchFrac -> 73
       VisMileFrac -> 74
       VisYards -> 75
       VisNautMiles -> 76
       VisAngleUnits -> 80
       VisDegrees -> 81
       VisDegreeMinSec -> 82
       VisRadians -> 83
       VisMin -> 84
       VisSec -> 85
       VisCurrency -> 111
       VisNoCast -> 252
  
  toEnum v =
    case v of
       32 -> VisNumber
       40 -> VisDate
       42 -> VisDurationUnits
       43 -> VisElapsedWeek
       44 -> VisElapsedDay
       45 -> VisElapsedHour
       46 -> VisElapsedMin
       47 -> VisElapsedSec
       48 -> VisTypeUnits
       50 -> VisPoints
       51 -> VisPicas
       53 -> VisDidots
       54 -> VisCiceros
       63 -> VisPageUnits
       64 -> VisDrawingUnits
       65 -> VisInches
       66 -> VisFeet
       67 -> VisFeetAndInches
       68 -> VisMiles
       69 -> VisCentimeters
       70 -> VisMillimeters
       71 -> VisMeters
       72 -> VisKilometers
       73 -> VisInchFrac
       74 -> VisMileFrac
       75 -> VisYards
       76 -> VisNautMiles
       80 -> VisAngleUnits
       81 -> VisDegrees
       82 -> VisDegreeMinSec
       83 -> VisRadians
       84 -> VisMin
       85 -> VisSec
       111 -> VisCurrency
       252 -> VisNoCast
       _ -> Prelude.error "unmarshallVisUnitCodes: illegal enum value "
  
data VisUniqueIDArgs
 = VisGetGUID
 | VisGetOrMakeGUID
 | VisDeleteGUID
 deriving ()
instance Prelude.Enum VisUniqueIDArgs where
  fromEnum v =
    case v of
       VisGetGUID -> 0
       VisGetOrMakeGUID -> 1
       VisDeleteGUID -> 2
  
  toEnum v =
    case v of
       0 -> VisGetGUID
       1 -> VisGetOrMakeGUID
       2 -> VisDeleteGUID
       _ -> Prelude.error "unmarshallVisUniqueIDArgs: illegal enum value "
  
data VisUIStringIDs
 = VisStrIDBASESTRINGID
 | VisStrIDALLSTYLES
 | VisStrIDTEXTSTYLE
 | VisStrIDLINESTYLE
 | VisStrIDFILLSTYLE
 | VisStrIDZOOM
 | VisStrIDFONT
 | VisStrIDPOINTSIZE
 | VisStrIDLEFTCOLOR
 | VisStrIDRIGHTCOLOR
 | VisStrIDSTATUS
 | VisStrIDPRINTPREVIEW
 | VisStrIDTEXTEDIT
 | VisStrIDCLOSE
 | VisStrIDNONE
 | VisStrIDCHANGE
 | VisStrIDSPACE
 | VisStrIDREADY
 | VisStrIDWAIT
 | VisStrIDDRAG
 | VisStrIDDRAW
 | VisStrIDEDIT
 | VisStrIDMOVE
 | VisStrIDSIZE
 | VisStrIDROTATE
 | VisStrIDCROP
 | VisStrIDSCROLL
 | VisStrIDADD
 | VisStrIDEXTEND
 | VisStrIDCOPY
 | VisStrIDLINECOLORS
 | VisStrIDLINEWEIGHTS
 | VisStrIDLINEPATTERNS
 | VisStrIDFILLCOLORS
 | VisStrIDFILLPATTERNS
 | VisStrIDTEXTCOLORS
 | VisStrIDSHADOWS
 | VisStrIDLINEENDS
 | VisStrIDCORNERS
 | VisStrIDNOSHADOW
 deriving ()
instance Prelude.Enum VisUIStringIDs where
  fromEnum v =
    case v of
       VisStrIDBASESTRINGID -> 2000
       VisStrIDALLSTYLES -> 2000
       VisStrIDTEXTSTYLE -> 2001
       VisStrIDLINESTYLE -> 2002
       VisStrIDFILLSTYLE -> 2003
       VisStrIDZOOM -> 2004
       VisStrIDFONT -> 2005
       VisStrIDPOINTSIZE -> 2006
       VisStrIDLEFTCOLOR -> 2007
       VisStrIDRIGHTCOLOR -> 2008
       VisStrIDSTATUS -> 2009
       VisStrIDPRINTPREVIEW -> 2010
       VisStrIDTEXTEDIT -> 2011
       VisStrIDCLOSE -> 2050
       VisStrIDNONE -> 2300
       VisStrIDCHANGE -> 2301
       VisStrIDSPACE -> 2302
       VisStrIDREADY -> 2320
       VisStrIDWAIT -> 2321
       VisStrIDDRAG -> 2322
       VisStrIDDRAW -> 2323
       VisStrIDEDIT -> 2324
       VisStrIDMOVE -> 2325
       VisStrIDSIZE -> 2326
       VisStrIDROTATE -> 2327
       VisStrIDCROP -> 2328
       VisStrIDSCROLL -> 2329
       VisStrIDADD -> 2330
       VisStrIDEXTEND -> 2331
       VisStrIDCOPY -> 2332
       VisStrIDLINECOLORS -> 2051
       VisStrIDLINEWEIGHTS -> 2052
       VisStrIDLINEPATTERNS -> 2053
       VisStrIDFILLCOLORS -> 2054
       VisStrIDFILLPATTERNS -> 2055
       VisStrIDTEXTCOLORS -> 2056
       VisStrIDSHADOWS -> 2057
       VisStrIDLINEENDS -> 2058
       VisStrIDCORNERS -> 2059
       VisStrIDNOSHADOW -> 2060
  
  toEnum v =
    case v of
       2000 -> VisStrIDBASESTRINGID
       2000 -> VisStrIDALLSTYLES
       2001 -> VisStrIDTEXTSTYLE
       2002 -> VisStrIDLINESTYLE
       2003 -> VisStrIDFILLSTYLE
       2004 -> VisStrIDZOOM
       2005 -> VisStrIDFONT
       2006 -> VisStrIDPOINTSIZE
       2007 -> VisStrIDLEFTCOLOR
       2008 -> VisStrIDRIGHTCOLOR
       2009 -> VisStrIDSTATUS
       2010 -> VisStrIDPRINTPREVIEW
       2011 -> VisStrIDTEXTEDIT
       2050 -> VisStrIDCLOSE
       2300 -> VisStrIDNONE
       2301 -> VisStrIDCHANGE
       2302 -> VisStrIDSPACE
       2320 -> VisStrIDREADY
       2321 -> VisStrIDWAIT
       2322 -> VisStrIDDRAG
       2323 -> VisStrIDDRAW
       2324 -> VisStrIDEDIT
       2325 -> VisStrIDMOVE
       2326 -> VisStrIDSIZE
       2327 -> VisStrIDROTATE
       2328 -> VisStrIDCROP
       2329 -> VisStrIDSCROLL
       2330 -> VisStrIDADD
       2331 -> VisStrIDEXTEND
       2332 -> VisStrIDCOPY
       2051 -> VisStrIDLINECOLORS
       2052 -> VisStrIDLINEWEIGHTS
       2053 -> VisStrIDLINEPATTERNS
       2054 -> VisStrIDFILLCOLORS
       2055 -> VisStrIDFILLPATTERNS
       2056 -> VisStrIDTEXTCOLORS
       2057 -> VisStrIDSHADOWS
       2058 -> VisStrIDLINEENDS
       2059 -> VisStrIDCORNERS
       2060 -> VisStrIDNOSHADOW
       _ -> Prelude.error "unmarshallVisUIStringIDs: illegal enum value "
  
data VisUISpacingTypes
 = VisCtrlSpacingNONE
 | VisCtrlSpacingVARIABLE_BEFORE
 | VisCtrlSpacingVARIABLE_AFTER
 | VisCtrlSpacingFIXED_BEFORE
 | VisCtrlSpacingFIXED_AFTER
 | VisCtrlSpacingNEW_ROW
 | VisCtrlSpacingTB_NOTFIXED
 | VisCtrlSpacingPALETTERIGHT
 | VisCtrlSpacingNEW_ROW_PALETTERIGHT
 deriving ()
instance Prelude.Enum VisUISpacingTypes where
  fromEnum v =
    case v of
       VisCtrlSpacingNONE -> 0
       VisCtrlSpacingVARIABLE_BEFORE -> 1
       VisCtrlSpacingVARIABLE_AFTER -> 2
       VisCtrlSpacingFIXED_BEFORE -> 4
       VisCtrlSpacingFIXED_AFTER -> 8
       VisCtrlSpacingNEW_ROW -> 16
       VisCtrlSpacingTB_NOTFIXED -> 32
       VisCtrlSpacingPALETTERIGHT -> 64
       VisCtrlSpacingNEW_ROW_PALETTERIGHT -> 80
  
  toEnum v =
    case v of
       0 -> VisCtrlSpacingNONE
       1 -> VisCtrlSpacingVARIABLE_BEFORE
       2 -> VisCtrlSpacingVARIABLE_AFTER
       4 -> VisCtrlSpacingFIXED_BEFORE
       8 -> VisCtrlSpacingFIXED_AFTER
       16 -> VisCtrlSpacingNEW_ROW
       32 -> VisCtrlSpacingTB_NOTFIXED
       64 -> VisCtrlSpacingPALETTERIGHT
       80 -> VisCtrlSpacingNEW_ROW_PALETTERIGHT
       _ -> Prelude.error "unmarshallVisUISpacingTypes: illegal enum value "
  
data VisUIObjSets
 = VisUIObjSetNoDocument
 | VisUIObjSetDrawing
 | VisUIObjSetStencil
 | VisUIObjSetShapeSheet
 | VisUIObjSetIcon
 | VisUIObjSetInPlace
 | VisUIObjSetPrintPreview
 | VisUIObjSetText
 | VisUIObjSetCntx_DrawObjSel
 | VisUIObjSetCntx_DrawOleObjSel
 | VisUIObjSetCntx_DrawNoObjSel
 | VisUIObjSetCntx_InPlaceNoObj
 | VisUIObjSetCntx_TextEdit
 | VisUIObjSetCntx_StencilRO
 | VisUIObjSetCntx_ShapeSheet
 | VisUIObjSetCntx_Toolbar
 | VisUIObjSetCntx_FullScreen
 | VisUIObjSetBinderInPlace
 | VisUIObjSetCntx_Debug
 | VisUIObjSetCntx_StencilRW
 | VisUIObjSetCntx_StencilDocked
 | VisUIObjSetHostingInPlace
 | VisUIObjSetCntx_Hyperlink
 | VisUIObjSetPal_LineColors
 | VisUIObjSetPal_LineWeights
 | VisUIObjSetPal_LinePatterns
 | VisUIObjSetPal_FillColors
 | VisUIObjSetPal_FillPatterns
 | VisUIObjSetPal_TextColors
 | VisUIObjSetPal_AlignShapes
 | VisUIObjSetPal_DistributeShapes
 | VisUIObjSetPal_Shadow
 | VisUIObjSetPal_LineEnds
 | VisUIObjSetPal_CornerRounding
 deriving ()
instance Prelude.Enum VisUIObjSets where
  fromEnum v =
    case v of
       VisUIObjSetNoDocument -> 1
       VisUIObjSetDrawing -> 2
       VisUIObjSetStencil -> 3
       VisUIObjSetShapeSheet -> 4
       VisUIObjSetIcon -> 5
       VisUIObjSetInPlace -> 6
       VisUIObjSetPrintPreview -> 7
       VisUIObjSetText -> 8
       VisUIObjSetCntx_DrawObjSel -> 9
       VisUIObjSetCntx_DrawOleObjSel -> 10
       VisUIObjSetCntx_DrawNoObjSel -> 11
       VisUIObjSetCntx_InPlaceNoObj -> 12
       VisUIObjSetCntx_TextEdit -> 13
       VisUIObjSetCntx_StencilRO -> 14
       VisUIObjSetCntx_ShapeSheet -> 15
       VisUIObjSetCntx_Toolbar -> 16
       VisUIObjSetCntx_FullScreen -> 17
       VisUIObjSetBinderInPlace -> 18
       VisUIObjSetCntx_Debug -> 19
       VisUIObjSetCntx_StencilRW -> 20
       VisUIObjSetCntx_StencilDocked -> 21
       VisUIObjSetHostingInPlace -> 22
       VisUIObjSetCntx_Hyperlink -> 23
       VisUIObjSetPal_LineColors -> 24
       VisUIObjSetPal_LineWeights -> 25
       VisUIObjSetPal_LinePatterns -> 26
       VisUIObjSetPal_FillColors -> 27
       VisUIObjSetPal_FillPatterns -> 28
       VisUIObjSetPal_TextColors -> 29
       VisUIObjSetPal_AlignShapes -> 30
       VisUIObjSetPal_DistributeShapes -> 31
       VisUIObjSetPal_Shadow -> 32
       VisUIObjSetPal_LineEnds -> 33
       VisUIObjSetPal_CornerRounding -> 34
  
  toEnum v =
    case v of
       1 -> VisUIObjSetNoDocument
       2 -> VisUIObjSetDrawing
       3 -> VisUIObjSetStencil
       4 -> VisUIObjSetShapeSheet
       5 -> VisUIObjSetIcon
       6 -> VisUIObjSetInPlace
       7 -> VisUIObjSetPrintPreview
       8 -> VisUIObjSetText
       9 -> VisUIObjSetCntx_DrawObjSel
       10 -> VisUIObjSetCntx_DrawOleObjSel
       11 -> VisUIObjSetCntx_DrawNoObjSel
       12 -> VisUIObjSetCntx_InPlaceNoObj
       13 -> VisUIObjSetCntx_TextEdit
       14 -> VisUIObjSetCntx_StencilRO
       15 -> VisUIObjSetCntx_ShapeSheet
       16 -> VisUIObjSetCntx_Toolbar
       17 -> VisUIObjSetCntx_FullScreen
       18 -> VisUIObjSetBinderInPlace
       19 -> VisUIObjSetCntx_Debug
       20 -> VisUIObjSetCntx_StencilRW
       21 -> VisUIObjSetCntx_StencilDocked
       22 -> VisUIObjSetHostingInPlace
       23 -> VisUIObjSetCntx_Hyperlink
       24 -> VisUIObjSetPal_LineColors
       25 -> VisUIObjSetPal_LineWeights
       26 -> VisUIObjSetPal_LinePatterns
       27 -> VisUIObjSetPal_FillColors
       28 -> VisUIObjSetPal_FillPatterns
       29 -> VisUIObjSetPal_TextColors
       30 -> VisUIObjSetPal_AlignShapes
       31 -> VisUIObjSetPal_DistributeShapes
       32 -> VisUIObjSetPal_Shadow
       33 -> VisUIObjSetPal_LineEnds
       34 -> VisUIObjSetPal_CornerRounding
       _ -> Prelude.error "unmarshallVisUIObjSets: illegal enum value "
  
data VisUIIconIDs
 = VisIconIXNEW
 | VisIconIXOPEN
 | VisIconIXOPENSTENCIL
 | VisIconIXSAVE
 | VisIconIXPRINT
 | VisIconIXPRINTPREVIEW
 | VisIconIXCUT
 | VisIconIXCOPY
 | VisIconIXPASTE
 | VisIconIXCLEAR
 | VisIconIXUNDO
 | VisIconIXREDO
 | VisIconIXREPEAT
 | VisIconIXPREVIOUSPAGE
 | VisIconIXNEXTPAGE
 | VisIconIXZOOMOUT
 | VisIconIXZOOMIN
 | VisIconIXZOOM100
 | VisIconIXFLIPHORIZONTAL
 | VisIconIXFLIPVERTICAL
 | VisIconIXPOINTERTOOL
 | VisIconIXPENCILTOOL
 | VisIconIXLINETOOL
 | VisIconIXQTRARCTOOL
 | VisIconIXRECTANGLETOOL
 | VisIconIXOVALTOOL
 | VisIconIXSTAMPTOOL
 | VisIconIXTEXTOOL
 | VisIconIXROTATETOOL
 | VisIconIXCROP
 | VisIconIXCONNECTIONPTTOOL
 | VisIconIXSNAP
 | VisIconIXGLUE
 | VisIconIXRULER
 | VisIconIXGRID
 | VisIconIXGUIDE
 | VisIconIXCONNECTIONPOINTS
 | VisIconIXROTATECLOCKWISE
 | VisIconIXROTATECOUNTERCLOCKWISE
 | VisIconIXNEWWINDOW
 | VisIconIXCORNERSTYLE
 | VisIconIXLINEEND
 | VisIconIXSHADOWSTYLE
 | VisIconIXFILLCOLOR
 | VisIconIXLINECOLOR
 | VisIconIXLINEWEIGHT
 | VisIconIXLINEPATTERN
 | VisIconIXFILLPATTERN
 | VisIconIXPOINTSIZEDOWN
 | VisIconIXPOINTSIZEUP
 | VisIconIXBOLD
 | VisIconIXITALIC
 | VisIconIXUNDERLINE
 | VisIconIXSUPERSCRIPT
 | VisIconIXSUBSCRIPT
 | VisIconIXTEXTCOLOR
 | VisIconIXTEXTALIGNLEFT
 | VisIconIXTEXTALIGNCENTER
 | VisIconIXTEXTALIGNRIGHT
 | VisIconIXTEXTALIGNJUSTIFY
 | VisIconIXTEXTALIGNTOP
 | VisIconIXTEXTALIGNMIDDLE
 | VisIconIXTEXTALIGNBOTTOM
 | VisIconIXALIGN
 | VisIconIXALIGNLEFT
 | VisIconIXALIGNCENTER
 | VisIconIXALIGNRIGHT
 | VisIconIXALIGNTOP
 | VisIconIXALIGNMIDDLE
 | VisIconIXALIGNBOTTOM
 | VisIconIXDISTRIBUTE
 | VisIconIXDHORZ_EQSPACE
 | VisIconIXDHORZ_CENTER
 | VisIconIXDVERT_EQSPACE
 | VisIconIXDVERT_MIDDLE
 | VisIconIXCONNECTSHAPES
 | VisIconIXFIRSTPAGE
 | VisIconIXLASTPAGE
 | VisIconIXPAGEBREAKS
 | VisIconIXSPLINETOOL
 | VisIconIXICONNAME
 | VisIconIXICONONLY
 | VisIconIXNAMEONLY
 | VisIconIXARRANGE
 | VisIconIXCANCEL
 | VisIconIXACCEPT
 | VisIconIXICONPENCIL
 | VisIconIXICONBUCKET
 | VisIconIXICONLASSO
 | VisIconIXICONSELNET
 | VisIconIXBRINGFRONT
 | VisIconIXSENDBACK
 | VisIconIXGROUP
 | VisIconIXUNGROUP
 | VisIconIXCASCADE
 | VisIconIXTILE
 | VisIconIXCONNECTORTOOL
 | VisIconIXTEXTBLOCKTOOL
 | VisIconIXWHOLEPAGE
 | VisIconIXSINGLETILE
 | VisIconIXSPELLING
 | VisIconIXFORMATPAINTER
 | VisIconIXHELPMODE
 | VisIconIXLAYERPROPERTIES
 | VisIconIXLAYOUTSHAPES
 | VisIconIXINSERTHYPERLINK
 | VisIconIXSEARCHTHEWEB
 | VisIconIXGOBACK
 | VisIconIXGOFORWARD
 | VisIconIXWEBTOOLBAR
 | VisIconIXSHAPEEXPL
 | VisIconIXCUSTPROP
 | VisIconIXROTATETEXT
 | VisIconIXBULLETS
 | VisIconIXDECRINDENT
 | VisIconIXINCRINDENT
 | VisIconIXDECRPARA
 | VisIconIXINCRPARA
 | VisIconIXINSERTCONTROL
 | VisIconIXDESIGNMODE
 | VisIconIXSHAPESHEET
 | VisIconIXMACROS
 | VisIconIXVBEDITOR
 deriving ()
instance Prelude.Enum VisUIIconIDs where
  fromEnum v =
    case v of
       VisIconIXNEW -> 0
       VisIconIXOPEN -> 1
       VisIconIXOPENSTENCIL -> 2
       VisIconIXSAVE -> 3
       VisIconIXPRINT -> 4
       VisIconIXPRINTPREVIEW -> 5
       VisIconIXCUT -> 6
       VisIconIXCOPY -> 7
       VisIconIXPASTE -> 8
       VisIconIXCLEAR -> 9
       VisIconIXUNDO -> 10
       VisIconIXREDO -> 11
       VisIconIXREPEAT -> 12
       VisIconIXPREVIOUSPAGE -> 13
       VisIconIXNEXTPAGE -> 14
       VisIconIXZOOMOUT -> 15
       VisIconIXZOOMIN -> 16
       VisIconIXZOOM100 -> 17
       VisIconIXFLIPHORIZONTAL -> 18
       VisIconIXFLIPVERTICAL -> 19
       VisIconIXPOINTERTOOL -> 20
       VisIconIXPENCILTOOL -> 21
       VisIconIXLINETOOL -> 22
       VisIconIXQTRARCTOOL -> 23
       VisIconIXRECTANGLETOOL -> 24
       VisIconIXOVALTOOL -> 25
       VisIconIXSTAMPTOOL -> 26
       VisIconIXTEXTOOL -> 27
       VisIconIXROTATETOOL -> 28
       VisIconIXCROP -> 29
       VisIconIXCONNECTIONPTTOOL -> 30
       VisIconIXSNAP -> 31
       VisIconIXGLUE -> 32
       VisIconIXRULER -> 33
       VisIconIXGRID -> 34
       VisIconIXGUIDE -> 35
       VisIconIXCONNECTIONPOINTS -> 36
       VisIconIXROTATECLOCKWISE -> 37
       VisIconIXROTATECOUNTERCLOCKWISE -> 38
       VisIconIXNEWWINDOW -> 39
       VisIconIXCORNERSTYLE -> 40
       VisIconIXLINEEND -> 41
       VisIconIXSHADOWSTYLE -> 42
       VisIconIXFILLCOLOR -> 43
       VisIconIXLINECOLOR -> 44
       VisIconIXLINEWEIGHT -> 45
       VisIconIXLINEPATTERN -> 46
       VisIconIXFILLPATTERN -> 47
       VisIconIXPOINTSIZEDOWN -> 48
       VisIconIXPOINTSIZEUP -> 49
       VisIconIXBOLD -> 50
       VisIconIXITALIC -> 51
       VisIconIXUNDERLINE -> 52
       VisIconIXSUPERSCRIPT -> 53
       VisIconIXSUBSCRIPT -> 54
       VisIconIXTEXTCOLOR -> 55
       VisIconIXTEXTALIGNLEFT -> 56
       VisIconIXTEXTALIGNCENTER -> 57
       VisIconIXTEXTALIGNRIGHT -> 58
       VisIconIXTEXTALIGNJUSTIFY -> 59
       VisIconIXTEXTALIGNTOP -> 60
       VisIconIXTEXTALIGNMIDDLE -> 61
       VisIconIXTEXTALIGNBOTTOM -> 62
       VisIconIXALIGN -> 63
       VisIconIXALIGNLEFT -> 64
       VisIconIXALIGNCENTER -> 65
       VisIconIXALIGNRIGHT -> 66
       VisIconIXALIGNTOP -> 67
       VisIconIXALIGNMIDDLE -> 68
       VisIconIXALIGNBOTTOM -> 69
       VisIconIXDISTRIBUTE -> 70
       VisIconIXDHORZ_EQSPACE -> 71
       VisIconIXDHORZ_CENTER -> 72
       VisIconIXDVERT_EQSPACE -> 73
       VisIconIXDVERT_MIDDLE -> 74
       VisIconIXCONNECTSHAPES -> 75
       VisIconIXFIRSTPAGE -> 76
       VisIconIXLASTPAGE -> 77
       VisIconIXPAGEBREAKS -> 78
       VisIconIXSPLINETOOL -> 79
       VisIconIXICONNAME -> 80
       VisIconIXICONONLY -> 81
       VisIconIXNAMEONLY -> 82
       VisIconIXARRANGE -> 83
       VisIconIXCANCEL -> 84
       VisIconIXACCEPT -> 85
       VisIconIXICONPENCIL -> 86
       VisIconIXICONBUCKET -> 87
       VisIconIXICONLASSO -> 88
       VisIconIXICONSELNET -> 89
       VisIconIXBRINGFRONT -> 90
       VisIconIXSENDBACK -> 91
       VisIconIXGROUP -> 92
       VisIconIXUNGROUP -> 93
       VisIconIXCASCADE -> 94
       VisIconIXTILE -> 95
       VisIconIXCONNECTORTOOL -> 96
       VisIconIXTEXTBLOCKTOOL -> 97
       VisIconIXWHOLEPAGE -> 98
       VisIconIXSINGLETILE -> 99
       VisIconIXSPELLING -> 100
       VisIconIXFORMATPAINTER -> 101
       VisIconIXHELPMODE -> 102
       VisIconIXLAYERPROPERTIES -> 103
       VisIconIXLAYOUTSHAPES -> 104
       VisIconIXINSERTHYPERLINK -> 105
       VisIconIXSEARCHTHEWEB -> 106
       VisIconIXGOBACK -> 107
       VisIconIXGOFORWARD -> 108
       VisIconIXWEBTOOLBAR -> 109
       VisIconIXSHAPEEXPL -> 110
       VisIconIXCUSTPROP -> 111
       VisIconIXROTATETEXT -> 112
       VisIconIXBULLETS -> 113
       VisIconIXDECRINDENT -> 114
       VisIconIXINCRINDENT -> 115
       VisIconIXDECRPARA -> 116
       VisIconIXINCRPARA -> 117
       VisIconIXINSERTCONTROL -> 118
       VisIconIXDESIGNMODE -> 119
       VisIconIXSHAPESHEET -> 120
       VisIconIXMACROS -> 121
       VisIconIXVBEDITOR -> 122
  
  toEnum v =
    case v of
       0 -> VisIconIXNEW
       1 -> VisIconIXOPEN
       2 -> VisIconIXOPENSTENCIL
       3 -> VisIconIXSAVE
       4 -> VisIconIXPRINT
       5 -> VisIconIXPRINTPREVIEW
       6 -> VisIconIXCUT
       7 -> VisIconIXCOPY
       8 -> VisIconIXPASTE
       9 -> VisIconIXCLEAR
       10 -> VisIconIXUNDO
       11 -> VisIconIXREDO
       12 -> VisIconIXREPEAT
       13 -> VisIconIXPREVIOUSPAGE
       14 -> VisIconIXNEXTPAGE
       15 -> VisIconIXZOOMOUT
       16 -> VisIconIXZOOMIN
       17 -> VisIconIXZOOM100
       18 -> VisIconIXFLIPHORIZONTAL
       19 -> VisIconIXFLIPVERTICAL
       20 -> VisIconIXPOINTERTOOL
       21 -> VisIconIXPENCILTOOL
       22 -> VisIconIXLINETOOL
       23 -> VisIconIXQTRARCTOOL
       24 -> VisIconIXRECTANGLETOOL
       25 -> VisIconIXOVALTOOL
       26 -> VisIconIXSTAMPTOOL
       27 -> VisIconIXTEXTOOL
       28 -> VisIconIXROTATETOOL
       29 -> VisIconIXCROP
       30 -> VisIconIXCONNECTIONPTTOOL
       31 -> VisIconIXSNAP
       32 -> VisIconIXGLUE
       33 -> VisIconIXRULER
       34 -> VisIconIXGRID
       35 -> VisIconIXGUIDE
       36 -> VisIconIXCONNECTIONPOINTS
       37 -> VisIconIXROTATECLOCKWISE
       38 -> VisIconIXROTATECOUNTERCLOCKWISE
       39 -> VisIconIXNEWWINDOW
       40 -> VisIconIXCORNERSTYLE
       41 -> VisIconIXLINEEND
       42 -> VisIconIXSHADOWSTYLE
       43 -> VisIconIXFILLCOLOR
       44 -> VisIconIXLINECOLOR
       45 -> VisIconIXLINEWEIGHT
       46 -> VisIconIXLINEPATTERN
       47 -> VisIconIXFILLPATTERN
       48 -> VisIconIXPOINTSIZEDOWN
       49 -> VisIconIXPOINTSIZEUP
       50 -> VisIconIXBOLD
       51 -> VisIconIXITALIC
       52 -> VisIconIXUNDERLINE
       53 -> VisIconIXSUPERSCRIPT
       54 -> VisIconIXSUBSCRIPT
       55 -> VisIconIXTEXTCOLOR
       56 -> VisIconIXTEXTALIGNLEFT
       57 -> VisIconIXTEXTALIGNCENTER
       58 -> VisIconIXTEXTALIGNRIGHT
       59 -> VisIconIXTEXTALIGNJUSTIFY
       60 -> VisIconIXTEXTALIGNTOP
       61 -> VisIconIXTEXTALIGNMIDDLE
       62 -> VisIconIXTEXTALIGNBOTTOM
       63 -> VisIconIXALIGN
       64 -> VisIconIXALIGNLEFT
       65 -> VisIconIXALIGNCENTER
       66 -> VisIconIXALIGNRIGHT
       67 -> VisIconIXALIGNTOP
       68 -> VisIconIXALIGNMIDDLE
       69 -> VisIconIXALIGNBOTTOM
       70 -> VisIconIXDISTRIBUTE
       71 -> VisIconIXDHORZ_EQSPACE
       72 -> VisIconIXDHORZ_CENTER
       73 -> VisIconIXDVERT_EQSPACE
       74 -> VisIconIXDVERT_MIDDLE
       75 -> VisIconIXCONNECTSHAPES
       76 -> VisIconIXFIRSTPAGE
       77 -> VisIconIXLASTPAGE
       78 -> VisIconIXPAGEBREAKS
       79 -> VisIconIXSPLINETOOL
       80 -> VisIconIXICONNAME
       81 -> VisIconIXICONONLY
       82 -> VisIconIXNAMEONLY
       83 -> VisIconIXARRANGE
       84 -> VisIconIXCANCEL
       85 -> VisIconIXACCEPT
       86 -> VisIconIXICONPENCIL
       87 -> VisIconIXICONBUCKET
       88 -> VisIconIXICONLASSO
       89 -> VisIconIXICONSELNET
       90 -> VisIconIXBRINGFRONT
       91 -> VisIconIXSENDBACK
       92 -> VisIconIXGROUP
       93 -> VisIconIXUNGROUP
       94 -> VisIconIXCASCADE
       95 -> VisIconIXTILE
       96 -> VisIconIXCONNECTORTOOL
       97 -> VisIconIXTEXTBLOCKTOOL
       98 -> VisIconIXWHOLEPAGE
       99 -> VisIconIXSINGLETILE
       100 -> VisIconIXSPELLING
       101 -> VisIconIXFORMATPAINTER
       102 -> VisIconIXHELPMODE
       103 -> VisIconIXLAYERPROPERTIES
       104 -> VisIconIXLAYOUTSHAPES
       105 -> VisIconIXINSERTHYPERLINK
       106 -> VisIconIXSEARCHTHEWEB
       107 -> VisIconIXGOBACK
       108 -> VisIconIXGOFORWARD
       109 -> VisIconIXWEBTOOLBAR
       110 -> VisIconIXSHAPEEXPL
       111 -> VisIconIXCUSTPROP
       112 -> VisIconIXROTATETEXT
       113 -> VisIconIXBULLETS
       114 -> VisIconIXDECRINDENT
       115 -> VisIconIXINCRINDENT
       116 -> VisIconIXDECRPARA
       117 -> VisIconIXINCRPARA
       118 -> VisIconIXINSERTCONTROL
       119 -> VisIconIXDESIGNMODE
       120 -> VisIconIXSHAPESHEET
       121 -> VisIconIXMACROS
       122 -> VisIconIXVBEDITOR
       _ -> Prelude.error "unmarshallVisUIIconIDs: illegal enum value "
  
data VisUICtrlTypes
 = VisCtrlTypeEND
 | VisCtrlTypeSTATE
 | VisCtrlTypeBUTTON
 | VisCtrlTypeSTATE_BUTTON
 | VisCtrlTypePALETTEBUTTON
 | VisCtrlTypeHIERBUTTON
 | VisCtrlTypeSTATE_HIERBUTTON
 | VisCtrlTypeDROPBUTTON
 | VisCtrlTypeSTATE_DROPBUTTON
 | VisCtrlTypeSPINBUTTON
 | VisCtrlTypePUSHBUTTON
 | VisCtrlTypeOWNERDRAW_BUTTON
 | VisCtrlTypeEDITBOX
 | VisCtrlTypeCOMBOBOX
 | VisCtrlTypeCOMBODRAW
 | VisCtrlTypeLISTBOX
 | VisCtrlTypeLISTBOXDRAW
 | VisCtrlTypeCOLORBOX
 | VisCtrlTypeLABEL
 | VisCtrlTypeMESSAGE
 | VisCtrlTypeSPACER
 deriving ()
instance Prelude.Enum VisUICtrlTypes where
  fromEnum v =
    case v of
       VisCtrlTypeEND -> 0
       VisCtrlTypeSTATE -> 1
       VisCtrlTypeBUTTON -> 2
       VisCtrlTypeSTATE_BUTTON -> 3
       VisCtrlTypePALETTEBUTTON -> 16
       VisCtrlTypeHIERBUTTON -> 4
       VisCtrlTypeSTATE_HIERBUTTON -> 5
       VisCtrlTypeDROPBUTTON -> 8
       VisCtrlTypeSTATE_DROPBUTTON -> 9
       VisCtrlTypeSPINBUTTON -> 16
       VisCtrlTypePUSHBUTTON -> 32
       VisCtrlTypeOWNERDRAW_BUTTON -> 33
       VisCtrlTypeEDITBOX -> 64
       VisCtrlTypeCOMBOBOX -> 128
       VisCtrlTypeCOMBODRAW -> 256
       VisCtrlTypeLISTBOX -> 512
       VisCtrlTypeLISTBOXDRAW -> 513
       VisCtrlTypeCOLORBOX -> 1024
       VisCtrlTypeLABEL -> 2048
       VisCtrlTypeMESSAGE -> 4096
       VisCtrlTypeSPACER -> 16384
  
  toEnum v =
    case v of
       0 -> VisCtrlTypeEND
       1 -> VisCtrlTypeSTATE
       2 -> VisCtrlTypeBUTTON
       3 -> VisCtrlTypeSTATE_BUTTON
       16 -> VisCtrlTypePALETTEBUTTON
       4 -> VisCtrlTypeHIERBUTTON
       5 -> VisCtrlTypeSTATE_HIERBUTTON
       8 -> VisCtrlTypeDROPBUTTON
       9 -> VisCtrlTypeSTATE_DROPBUTTON
       16 -> VisCtrlTypeSPINBUTTON
       32 -> VisCtrlTypePUSHBUTTON
       33 -> VisCtrlTypeOWNERDRAW_BUTTON
       64 -> VisCtrlTypeEDITBOX
       128 -> VisCtrlTypeCOMBOBOX
       256 -> VisCtrlTypeCOMBODRAW
       512 -> VisCtrlTypeLISTBOX
       513 -> VisCtrlTypeLISTBOXDRAW
       1024 -> VisCtrlTypeCOLORBOX
       2048 -> VisCtrlTypeLABEL
       4096 -> VisCtrlTypeMESSAGE
       16384 -> VisCtrlTypeSPACER
       _ -> Prelude.error "unmarshallVisUICtrlTypes: illegal enum value "
  
data VisUICtrlIDs
 = VisCtrlIDNEW
 | VisCtrlIDOPEN
 | VisCtrlIDOPENSTEN
 | VisCtrlIDSAVE
 | VisCtrlIDPRINT
 | VisCtrlIDPREVIEW
 | VisCtrlIDCUT
 | VisCtrlIDCOPY
 | VisCtrlIDPASTE
 | VisCtrlIDCLEAR
 | VisCtrlIDUNDO
 | VisCtrlIDREDO
 | VisCtrlIDREPEAT
 | VisCtrlIDPREVIOUSPAGE
 | VisCtrlIDNEXTPAGE
 | VisCtrlIDZOOMOUT
 | VisCtrlIDZOOMIN
 | VisCtrlIDZOOM100
 | VisCtrlIDFLIPHORZ
 | VisCtrlIDFLIPVERT
 | VisCtrlIDPOINTERTOOL
 | VisCtrlIDPENCILTOOL
 | VisCtrlIDLINETOOL
 | VisCtrlIDQTRARCTOOL
 | VisCtrlIDRECTTOOL
 | VisCtrlIDOVALTOOL
 | VisCtrlIDSTAMPTOOL
 | VisCtrlIDTEXTTOOL
 | VisCtrlIDROTATETOOL
 | VisCtrlIDCROPTOOL
 | VisCtrlIDCONNECTIONPTTOOL
 | VisCtrlIDSNAP
 | VisCtrlIDGLUE
 | VisCtrlIDRULER
 | VisCtrlIDGRID
 | VisCtrlIDGUIDE
 | VisCtrlIDCONNECT
 | VisCtrlIDROTATECLOCKWISE
 | VisCtrlIDROTATECOUNTER
 | VisCtrlIDNEWWINDOW
 | VisCtrlIDCORNERSTYLE
 | VisCtrlIDLINEEND
 | VisCtrlIDSHADOWSTYLE
 | VisCtrlIDFILLCOLOR
 | VisCtrlIDLINECOLOR
 | VisCtrlIDLINEWEIGHT
 | VisCtrlIDLINEPATTERN
 | VisCtrlIDFILLPATTERN
 | VisCtrlIDPOINTSIZEDOWN
 | VisCtrlIDPOINTSIZEUP
 | VisCtrlIDBOLD
 | VisCtrlIDITALIC
 | VisCtrlIDULINE
 | VisCtrlIDSUPERSCRIPT
 | VisCtrlIDSUBSCRIPT
 | VisCtrlIDTEXTCOLOR
 | VisCtrlIDTEXTLEFT
 | VisCtrlIDTEXTCENTER
 | VisCtrlIDTEXTRIGHT
 | VisCtrlIDTEXTJUSTIFY
 | VisCtrlIDTEXTTOP
 | VisCtrlIDTEXTMIDDLE
 | VisCtrlIDTEXTBOTTOM
 | VisCtrlIDALIGN
 | VisCtrlIDALIGNLEFT
 | VisCtrlIDALIGNCENTER
 | VisCtrlIDALIGNRIGHT
 | VisCtrlIDALIGNTOP
 | VisCtrlIDALIGNMIDDLE
 | VisCtrlIDALIGNBOTTOM
 | VisCtrlIDDISTRIBUTE
 | VisCtrlIDDHORZ_EQSPACE
 | VisCtrlIDDHORZ_CENTER
 | VisCtrlIDDVERT_EQSPACE
 | VisCtrlIDDVERT_MIDDLE
 | VisCtrlIDCONNECTSHAPES
 | VisCtrlIDFIRSTPAGE
 | VisCtrlIDLASTPAGE
 | VisCtrlIDPAGEBREAKS
 | VisCtrlIDICONNAME
 | VisCtrlIDICONONLY
 | VisCtrlIDNAMEONLY
 | VisCtrlIDARRANGEICONS
 | VisCtrlIDCANCELFORMULA
 | VisCtrlIDACCEPTFORMULA
 | VisCtrlIDICONPENCIL
 | VisCtrlIDICONBUCKET
 | VisCtrlIDICONLASSO
 | VisCtrlIDICONSELNET
 | VisCtrlIDBRINGFRONT
 | VisCtrlIDSENDBACK
 | VisCtrlIDGROUP
 | VisCtrlIDUNGROUP
 | VisCtrlIDCASCADE
 | VisCtrlIDTILE
 | VisCtrlIDCONNECTORTOOL
 | VisCtrlIDTEXTBLOCKTOOL
 | VisCtrlIDWHOLEPAGE
 | VisCtrlIDSINGLETILE
 | VisCtrlIDFORMULA
 | VisCtrlIDSPACER
 | VisCtrlIDALLSTYLESCOMBO
 | VisCtrlIDTEXTSTYLECOMBO
 | VisCtrlIDLINESTYLECOMBO
 | VisCtrlIDFILLSTYLECOMBO
 | VisCtrlIDZOOMCOMBO
 | VisCtrlIDFONTCOMBO
 | VisCtrlIDPOINTSIZECOMBO
 | VisCtrlIDALLSTYLESLIST
 | VisCtrlIDTEXTSTYLELIST
 | VisCtrlIDLINESTYLELIST
 | VisCtrlIDFILLSTYLELIST
 | VisCtrlIDZOOMLIST
 | VisCtrlIDFONTLIST
 | VisCtrlIDPOINTSIZELIST
 | VisCtrlIDGOTOPAGELIST
 | VisCtrlIDCLOSE
 | VisCtrlIDLEFTCOLORBOX
 | VisCtrlIDRIGHTCOLORBOX
 | VisCtrlIDCOLOR1
 | VisCtrlIDCOLOR2
 | VisCtrlIDCOLOR3
 | VisCtrlIDCOLOR4
 | VisCtrlIDCOLOR5
 | VisCtrlIDCOLOR6
 | VisCtrlIDCOLOR7
 | VisCtrlIDCOLOR8
 | VisCtrlIDCOLOR9
 | VisCtrlIDCOLOR10
 | VisCtrlIDCOLOR11
 | VisCtrlIDCOLOR12
 | VisCtrlIDCOLOR13
 | VisCtrlIDCOLOR14
 | VisCtrlIDCOLOR15
 | VisCtrlIDCOLOR16
 | VisCtrlIDTRANSPARENT
 | VisCtrlIDALLSTYLESLABEL
 | VisCtrlIDTEXTSTYLELABEL
 | VisCtrlIDLINESTYLELABEL
 | VisCtrlIDFILLSTYLELABEL
 | VisCtrlIDZOOMLABEL
 | VisCtrlIDFONTLABEL
 | VisCtrlIDPOINTSIZELABEL
 | VisCtrlIDLEFTCOLORLABEL
 | VisCtrlIDRIGHTCOLORLABEL
 | VisCtrlIDSTATUSLABEL
 | VisCtrlIDPREVIEWLABEL
 | VisCtrlIDSTATUSREADOUT
 | VisCtrlIDSTATUSMSG_1
 | VisCtrlIDSTATUSMSG_2
 | VisCtrlIDSTATUSMSG_3
 | VisCtrlIDSTATUSMSG_4
 | VisCtrlIDSTATUSMSG_5
 | VisCtrlIDSTATUSMSG_6
 | VisCtrlIDSTATUSMSG_7
 | VisCtrlIDSTATUSMSG_8
 | VisCtrlIDSTATUSMSG_9
 | VisCtrlIDSPLINETOOL
 | VisCtrlIDSPELLING
 | VisCtrlIDFORMATPAINTER
 | VisCtrlIDHELPMODE
 | VisCtrlIDLAYERPROPERTIES
 | VisCtrlIDLAYOUTSHAPES
 | VisCtrlIDINSERTHYPERLINK
 | VisCtrlIDSEARCHTHEWEB
 | VisCtrlIDGOBACK
 | VisCtrlIDGOFORWARD
 | VisCtrlIDWEBTOOLBAR
 | VisCtrlIDSHAPEEXPL
 | VisCtrlIDCUSTPROP
 | VisCtrlIDROTATETEXT
 | VisCtrlIDBULLETS
 | VisCtrlIDDECRINDENT
 | VisCtrlIDINCRINDENT
 | VisCtrlIDDECRPARA
 | VisCtrlIDINCRPARA
 | VisCtrlIDINSERTCONTROL
 | VisCtrlIDDESIGNMODE
 | VisCtrlIDSHAPESHEET
 | VisCtrlIDSHAPELAYER
 | VisCtrlIDGOTOPAGE
 | VisCtrlIDLINECOLORS
 | VisCtrlIDLINEWEIGHTS
 | VisCtrlIDLINEPATTERNS
 | VisCtrlIDFILLCOLORS
 | VisCtrlIDFILLPATTERNS
 | VisCtrlIDTEXTCOLORS
 | VisCtrlIDMACROS
 | VisCtrlIDVBEDITOR
 | VisCtrlIDSHAPELAYERCOMBO
 | VisCtrlIDSHAPELAYERLIST
 | VisCtrlIDALIGNSHAPES
 | VisCtrlIDDISTRIBUTESHAPES
 | VisCtrlIDMSG_PAGES
 deriving ()
instance Prelude.Enum VisUICtrlIDs where
  fromEnum v =
    case v of
       VisCtrlIDNEW -> 8383
       VisCtrlIDOPEN -> 1
       VisCtrlIDOPENSTEN -> 2
       VisCtrlIDSAVE -> 3
       VisCtrlIDPRINT -> 4
       VisCtrlIDPREVIEW -> 5
       VisCtrlIDCUT -> 6
       VisCtrlIDCOPY -> 7
       VisCtrlIDPASTE -> 8
       VisCtrlIDCLEAR -> 9
       VisCtrlIDUNDO -> 10
       VisCtrlIDREDO -> 11
       VisCtrlIDREPEAT -> 12
       VisCtrlIDPREVIOUSPAGE -> 13
       VisCtrlIDNEXTPAGE -> 14
       VisCtrlIDZOOMOUT -> 15
       VisCtrlIDZOOMIN -> 16
       VisCtrlIDZOOM100 -> 17
       VisCtrlIDFLIPHORZ -> 18
       VisCtrlIDFLIPVERT -> 19
       VisCtrlIDPOINTERTOOL -> 20
       VisCtrlIDPENCILTOOL -> 21
       VisCtrlIDLINETOOL -> 22
       VisCtrlIDQTRARCTOOL -> 23
       VisCtrlIDRECTTOOL -> 24
       VisCtrlIDOVALTOOL -> 25
       VisCtrlIDSTAMPTOOL -> 26
       VisCtrlIDTEXTTOOL -> 27
       VisCtrlIDROTATETOOL -> 28
       VisCtrlIDCROPTOOL -> 29
       VisCtrlIDCONNECTIONPTTOOL -> 30
       VisCtrlIDSNAP -> 31
       VisCtrlIDGLUE -> 32
       VisCtrlIDRULER -> 33
       VisCtrlIDGRID -> 34
       VisCtrlIDGUIDE -> 35
       VisCtrlIDCONNECT -> 36
       VisCtrlIDROTATECLOCKWISE -> 37
       VisCtrlIDROTATECOUNTER -> 38
       VisCtrlIDNEWWINDOW -> 39
       VisCtrlIDCORNERSTYLE -> 40
       VisCtrlIDLINEEND -> 41
       VisCtrlIDSHADOWSTYLE -> 42
       VisCtrlIDFILLCOLOR -> 43
       VisCtrlIDLINECOLOR -> 44
       VisCtrlIDLINEWEIGHT -> 45
       VisCtrlIDLINEPATTERN -> 46
       VisCtrlIDFILLPATTERN -> 47
       VisCtrlIDPOINTSIZEDOWN -> 48
       VisCtrlIDPOINTSIZEUP -> 49
       VisCtrlIDBOLD -> 50
       VisCtrlIDITALIC -> 51
       VisCtrlIDULINE -> 52
       VisCtrlIDSUPERSCRIPT -> 53
       VisCtrlIDSUBSCRIPT -> 54
       VisCtrlIDTEXTCOLOR -> 55
       VisCtrlIDTEXTLEFT -> 56
       VisCtrlIDTEXTCENTER -> 57
       VisCtrlIDTEXTRIGHT -> 58
       VisCtrlIDTEXTJUSTIFY -> 59
       VisCtrlIDTEXTTOP -> 60
       VisCtrlIDTEXTMIDDLE -> 61
       VisCtrlIDTEXTBOTTOM -> 62
       VisCtrlIDALIGN -> 63
       VisCtrlIDALIGNLEFT -> 64
       VisCtrlIDALIGNCENTER -> 65
       VisCtrlIDALIGNRIGHT -> 66
       VisCtrlIDALIGNTOP -> 67
       VisCtrlIDALIGNMIDDLE -> 68
       VisCtrlIDALIGNBOTTOM -> 69
       VisCtrlIDDISTRIBUTE -> 70
       VisCtrlIDDHORZ_EQSPACE -> 71
       VisCtrlIDDHORZ_CENTER -> 72
       VisCtrlIDDVERT_EQSPACE -> 73
       VisCtrlIDDVERT_MIDDLE -> 74
       VisCtrlIDCONNECTSHAPES -> 75
       VisCtrlIDFIRSTPAGE -> 76
       VisCtrlIDLASTPAGE -> 77
       VisCtrlIDPAGEBREAKS -> 78
       VisCtrlIDICONNAME -> 80
       VisCtrlIDICONONLY -> 81
       VisCtrlIDNAMEONLY -> 82
       VisCtrlIDARRANGEICONS -> 83
       VisCtrlIDCANCELFORMULA -> 84
       VisCtrlIDACCEPTFORMULA -> 85
       VisCtrlIDICONPENCIL -> 86
       VisCtrlIDICONBUCKET -> 87
       VisCtrlIDICONLASSO -> 88
       VisCtrlIDICONSELNET -> 89
       VisCtrlIDBRINGFRONT -> 90
       VisCtrlIDSENDBACK -> 91
       VisCtrlIDGROUP -> 92
       VisCtrlIDUNGROUP -> 93
       VisCtrlIDCASCADE -> 94
       VisCtrlIDTILE -> 95
       VisCtrlIDCONNECTORTOOL -> 96
       VisCtrlIDTEXTBLOCKTOOL -> 97
       VisCtrlIDWHOLEPAGE -> 98
       VisCtrlIDSINGLETILE -> 99
       VisCtrlIDFORMULA -> 190
       VisCtrlIDSPACER -> 191
       VisCtrlIDALLSTYLESCOMBO -> 200
       VisCtrlIDTEXTSTYLECOMBO -> 201
       VisCtrlIDLINESTYLECOMBO -> 202
       VisCtrlIDFILLSTYLECOMBO -> 203
       VisCtrlIDZOOMCOMBO -> 204
       VisCtrlIDFONTCOMBO -> 205
       VisCtrlIDPOINTSIZECOMBO -> 206
       VisCtrlIDALLSTYLESLIST -> 220
       VisCtrlIDTEXTSTYLELIST -> 221
       VisCtrlIDLINESTYLELIST -> 222
       VisCtrlIDFILLSTYLELIST -> 223
       VisCtrlIDZOOMLIST -> 224
       VisCtrlIDFONTLIST -> 225
       VisCtrlIDPOINTSIZELIST -> 226
       VisCtrlIDGOTOPAGELIST -> 227
       VisCtrlIDCLOSE -> 240
       VisCtrlIDLEFTCOLORBOX -> 300
       VisCtrlIDRIGHTCOLORBOX -> 301
       VisCtrlIDCOLOR1 -> 302
       VisCtrlIDCOLOR2 -> 303
       VisCtrlIDCOLOR3 -> 304
       VisCtrlIDCOLOR4 -> 305
       VisCtrlIDCOLOR5 -> 306
       VisCtrlIDCOLOR6 -> 307
       VisCtrlIDCOLOR7 -> 308
       VisCtrlIDCOLOR8 -> 309
       VisCtrlIDCOLOR9 -> 310
       VisCtrlIDCOLOR10 -> 311
       VisCtrlIDCOLOR11 -> 312
       VisCtrlIDCOLOR12 -> 313
       VisCtrlIDCOLOR13 -> 314
       VisCtrlIDCOLOR14 -> 315
       VisCtrlIDCOLOR15 -> 316
       VisCtrlIDCOLOR16 -> 317
       VisCtrlIDTRANSPARENT -> 318
       VisCtrlIDALLSTYLESLABEL -> 400
       VisCtrlIDTEXTSTYLELABEL -> 401
       VisCtrlIDLINESTYLELABEL -> 402
       VisCtrlIDFILLSTYLELABEL -> 403
       VisCtrlIDZOOMLABEL -> 404
       VisCtrlIDFONTLABEL -> 405
       VisCtrlIDPOINTSIZELABEL -> 406
       VisCtrlIDLEFTCOLORLABEL -> 407
       VisCtrlIDRIGHTCOLORLABEL -> 408
       VisCtrlIDSTATUSLABEL -> 409
       VisCtrlIDPREVIEWLABEL -> 410
       VisCtrlIDSTATUSREADOUT -> 500
       VisCtrlIDSTATUSMSG_1 -> 501
       VisCtrlIDSTATUSMSG_2 -> 502
       VisCtrlIDSTATUSMSG_3 -> 503
       VisCtrlIDSTATUSMSG_4 -> 504
       VisCtrlIDSTATUSMSG_5 -> 505
       VisCtrlIDSTATUSMSG_6 -> 506
       VisCtrlIDSTATUSMSG_7 -> 507
       VisCtrlIDSTATUSMSG_8 -> 508
       VisCtrlIDSTATUSMSG_9 -> 509
       VisCtrlIDSPLINETOOL -> 79
       VisCtrlIDSPELLING -> 100
       VisCtrlIDFORMATPAINTER -> 101
       VisCtrlIDHELPMODE -> 102
       VisCtrlIDLAYERPROPERTIES -> 103
       VisCtrlIDLAYOUTSHAPES -> 104
       VisCtrlIDINSERTHYPERLINK -> 105
       VisCtrlIDSEARCHTHEWEB -> 106
       VisCtrlIDGOBACK -> 107
       VisCtrlIDGOFORWARD -> 108
       VisCtrlIDWEBTOOLBAR -> 109
       VisCtrlIDSHAPEEXPL -> 110
       VisCtrlIDCUSTPROP -> 111
       VisCtrlIDROTATETEXT -> 112
       VisCtrlIDBULLETS -> 113
       VisCtrlIDDECRINDENT -> 114
       VisCtrlIDINCRINDENT -> 115
       VisCtrlIDDECRPARA -> 116
       VisCtrlIDINCRPARA -> 117
       VisCtrlIDINSERTCONTROL -> 118
       VisCtrlIDDESIGNMODE -> 119
       VisCtrlIDSHAPESHEET -> 120
       VisCtrlIDSHAPELAYER -> 247
       VisCtrlIDGOTOPAGE -> 207
       VisCtrlIDLINECOLORS -> 241
       VisCtrlIDLINEWEIGHTS -> 242
       VisCtrlIDLINEPATTERNS -> 243
       VisCtrlIDFILLCOLORS -> 244
       VisCtrlIDFILLPATTERNS -> 245
       VisCtrlIDTEXTCOLORS -> 246
       VisCtrlIDMACROS -> 121
       VisCtrlIDVBEDITOR -> 122
       VisCtrlIDSHAPELAYERCOMBO -> 208
       VisCtrlIDSHAPELAYERLIST -> 228
       VisCtrlIDALIGNSHAPES -> 260
       VisCtrlIDDISTRIBUTESHAPES -> 261
       VisCtrlIDMSG_PAGES -> 510
  
  toEnum v =
    case v of
       8383 -> VisCtrlIDNEW
       1 -> VisCtrlIDOPEN
       2 -> VisCtrlIDOPENSTEN
       3 -> VisCtrlIDSAVE
       4 -> VisCtrlIDPRINT
       5 -> VisCtrlIDPREVIEW
       6 -> VisCtrlIDCUT
       7 -> VisCtrlIDCOPY
       8 -> VisCtrlIDPASTE
       9 -> VisCtrlIDCLEAR
       10 -> VisCtrlIDUNDO
       11 -> VisCtrlIDREDO
       12 -> VisCtrlIDREPEAT
       13 -> VisCtrlIDPREVIOUSPAGE
       14 -> VisCtrlIDNEXTPAGE
       15 -> VisCtrlIDZOOMOUT
       16 -> VisCtrlIDZOOMIN
       17 -> VisCtrlIDZOOM100
       18 -> VisCtrlIDFLIPHORZ
       19 -> VisCtrlIDFLIPVERT
       20 -> VisCtrlIDPOINTERTOOL
       21 -> VisCtrlIDPENCILTOOL
       22 -> VisCtrlIDLINETOOL
       23 -> VisCtrlIDQTRARCTOOL
       24 -> VisCtrlIDRECTTOOL
       25 -> VisCtrlIDOVALTOOL
       26 -> VisCtrlIDSTAMPTOOL
       27 -> VisCtrlIDTEXTTOOL
       28 -> VisCtrlIDROTATETOOL
       29 -> VisCtrlIDCROPTOOL
       30 -> VisCtrlIDCONNECTIONPTTOOL
       31 -> VisCtrlIDSNAP
       32 -> VisCtrlIDGLUE
       33 -> VisCtrlIDRULER
       34 -> VisCtrlIDGRID
       35 -> VisCtrlIDGUIDE
       36 -> VisCtrlIDCONNECT
       37 -> VisCtrlIDROTATECLOCKWISE
       38 -> VisCtrlIDROTATECOUNTER
       39 -> VisCtrlIDNEWWINDOW
       40 -> VisCtrlIDCORNERSTYLE
       41 -> VisCtrlIDLINEEND
       42 -> VisCtrlIDSHADOWSTYLE
       43 -> VisCtrlIDFILLCOLOR
       44 -> VisCtrlIDLINECOLOR
       45 -> VisCtrlIDLINEWEIGHT
       46 -> VisCtrlIDLINEPATTERN
       47 -> VisCtrlIDFILLPATTERN
       48 -> VisCtrlIDPOINTSIZEDOWN
       49 -> VisCtrlIDPOINTSIZEUP
       50 -> VisCtrlIDBOLD
       51 -> VisCtrlIDITALIC
       52 -> VisCtrlIDULINE
       53 -> VisCtrlIDSUPERSCRIPT
       54 -> VisCtrlIDSUBSCRIPT
       55 -> VisCtrlIDTEXTCOLOR
       56 -> VisCtrlIDTEXTLEFT
       57 -> VisCtrlIDTEXTCENTER
       58 -> VisCtrlIDTEXTRIGHT
       59 -> VisCtrlIDTEXTJUSTIFY
       60 -> VisCtrlIDTEXTTOP
       61 -> VisCtrlIDTEXTMIDDLE
       62 -> VisCtrlIDTEXTBOTTOM
       63 -> VisCtrlIDALIGN
       64 -> VisCtrlIDALIGNLEFT
       65 -> VisCtrlIDALIGNCENTER
       66 -> VisCtrlIDALIGNRIGHT
       67 -> VisCtrlIDALIGNTOP
       68 -> VisCtrlIDALIGNMIDDLE
       69 -> VisCtrlIDALIGNBOTTOM
       70 -> VisCtrlIDDISTRIBUTE
       71 -> VisCtrlIDDHORZ_EQSPACE
       72 -> VisCtrlIDDHORZ_CENTER
       73 -> VisCtrlIDDVERT_EQSPACE
       74 -> VisCtrlIDDVERT_MIDDLE
       75 -> VisCtrlIDCONNECTSHAPES
       76 -> VisCtrlIDFIRSTPAGE
       77 -> VisCtrlIDLASTPAGE
       78 -> VisCtrlIDPAGEBREAKS
       80 -> VisCtrlIDICONNAME
       81 -> VisCtrlIDICONONLY
       82 -> VisCtrlIDNAMEONLY
       83 -> VisCtrlIDARRANGEICONS
       84 -> VisCtrlIDCANCELFORMULA
       85 -> VisCtrlIDACCEPTFORMULA
       86 -> VisCtrlIDICONPENCIL
       87 -> VisCtrlIDICONBUCKET
       88 -> VisCtrlIDICONLASSO
       89 -> VisCtrlIDICONSELNET
       90 -> VisCtrlIDBRINGFRONT
       91 -> VisCtrlIDSENDBACK
       92 -> VisCtrlIDGROUP
       93 -> VisCtrlIDUNGROUP
       94 -> VisCtrlIDCASCADE
       95 -> VisCtrlIDTILE
       96 -> VisCtrlIDCONNECTORTOOL
       97 -> VisCtrlIDTEXTBLOCKTOOL
       98 -> VisCtrlIDWHOLEPAGE
       99 -> VisCtrlIDSINGLETILE
       190 -> VisCtrlIDFORMULA
       191 -> VisCtrlIDSPACER
       200 -> VisCtrlIDALLSTYLESCOMBO
       201 -> VisCtrlIDTEXTSTYLECOMBO
       202 -> VisCtrlIDLINESTYLECOMBO
       203 -> VisCtrlIDFILLSTYLECOMBO
       204 -> VisCtrlIDZOOMCOMBO
       205 -> VisCtrlIDFONTCOMBO
       206 -> VisCtrlIDPOINTSIZECOMBO
       220 -> VisCtrlIDALLSTYLESLIST
       221 -> VisCtrlIDTEXTSTYLELIST
       222 -> VisCtrlIDLINESTYLELIST
       223 -> VisCtrlIDFILLSTYLELIST
       224 -> VisCtrlIDZOOMLIST
       225 -> VisCtrlIDFONTLIST
       226 -> VisCtrlIDPOINTSIZELIST
       227 -> VisCtrlIDGOTOPAGELIST
       240 -> VisCtrlIDCLOSE
       300 -> VisCtrlIDLEFTCOLORBOX
       301 -> VisCtrlIDRIGHTCOLORBOX
       302 -> VisCtrlIDCOLOR1
       303 -> VisCtrlIDCOLOR2
       304 -> VisCtrlIDCOLOR3
       305 -> VisCtrlIDCOLOR4
       306 -> VisCtrlIDCOLOR5
       307 -> VisCtrlIDCOLOR6
       308 -> VisCtrlIDCOLOR7
       309 -> VisCtrlIDCOLOR8
       310 -> VisCtrlIDCOLOR9
       311 -> VisCtrlIDCOLOR10
       312 -> VisCtrlIDCOLOR11
       313 -> VisCtrlIDCOLOR12
       314 -> VisCtrlIDCOLOR13
       315 -> VisCtrlIDCOLOR14
       316 -> VisCtrlIDCOLOR15
       317 -> VisCtrlIDCOLOR16
       318 -> VisCtrlIDTRANSPARENT
       400 -> VisCtrlIDALLSTYLESLABEL
       401 -> VisCtrlIDTEXTSTYLELABEL
       402 -> VisCtrlIDLINESTYLELABEL
       403 -> VisCtrlIDFILLSTYLELABEL
       404 -> VisCtrlIDZOOMLABEL
       405 -> VisCtrlIDFONTLABEL
       406 -> VisCtrlIDPOINTSIZELABEL
       407 -> VisCtrlIDLEFTCOLORLABEL
       408 -> VisCtrlIDRIGHTCOLORLABEL
       409 -> VisCtrlIDSTATUSLABEL
       410 -> VisCtrlIDPREVIEWLABEL
       500 -> VisCtrlIDSTATUSREADOUT
       501 -> VisCtrlIDSTATUSMSG_1
       502 -> VisCtrlIDSTATUSMSG_2
       503 -> VisCtrlIDSTATUSMSG_3
       504 -> VisCtrlIDSTATUSMSG_4
       505 -> VisCtrlIDSTATUSMSG_5
       506 -> VisCtrlIDSTATUSMSG_6
       507 -> VisCtrlIDSTATUSMSG_7
       508 -> VisCtrlIDSTATUSMSG_8
       509 -> VisCtrlIDSTATUSMSG_9
       79 -> VisCtrlIDSPLINETOOL
       100 -> VisCtrlIDSPELLING
       101 -> VisCtrlIDFORMATPAINTER
       102 -> VisCtrlIDHELPMODE
       103 -> VisCtrlIDLAYERPROPERTIES
       104 -> VisCtrlIDLAYOUTSHAPES
       105 -> VisCtrlIDINSERTHYPERLINK
       106 -> VisCtrlIDSEARCHTHEWEB
       107 -> VisCtrlIDGOBACK
       108 -> VisCtrlIDGOFORWARD
       109 -> VisCtrlIDWEBTOOLBAR
       110 -> VisCtrlIDSHAPEEXPL
       111 -> VisCtrlIDCUSTPROP
       112 -> VisCtrlIDROTATETEXT
       113 -> VisCtrlIDBULLETS
       114 -> VisCtrlIDDECRINDENT
       115 -> VisCtrlIDINCRINDENT
       116 -> VisCtrlIDDECRPARA
       117 -> VisCtrlIDINCRPARA
       118 -> VisCtrlIDINSERTCONTROL
       119 -> VisCtrlIDDESIGNMODE
       120 -> VisCtrlIDSHAPESHEET
       247 -> VisCtrlIDSHAPELAYER
       207 -> VisCtrlIDGOTOPAGE
       241 -> VisCtrlIDLINECOLORS
       242 -> VisCtrlIDLINEWEIGHTS
       243 -> VisCtrlIDLINEPATTERNS
       244 -> VisCtrlIDFILLCOLORS
       245 -> VisCtrlIDFILLPATTERNS
       246 -> VisCtrlIDTEXTCOLORS
       121 -> VisCtrlIDMACROS
       122 -> VisCtrlIDVBEDITOR
       208 -> VisCtrlIDSHAPELAYERCOMBO
       228 -> VisCtrlIDSHAPELAYERLIST
       260 -> VisCtrlIDALIGNSHAPES
       261 -> VisCtrlIDDISTRIBUTESHAPES
       510 -> VisCtrlIDMSG_PAGES
       _ -> Prelude.error "unmarshallVisUICtrlIDs: illegal enum value "
  
data VisUICtrlAtts
 = VisCtrlAlignmentLEFT
 | VisCtrlAlignmentCENTER
 | VisCtrlAlignmentRIGHT
 | VisCtrlAlignmentBOX
 | VisCtrlAlignmentLEFTBOX
 | VisCtrlAlignmentCENTERBOX
 | VisCtrlAlignmentRIGHTBOX
 deriving ()
instance Prelude.Enum VisUICtrlAtts where
  fromEnum v =
    case v of
       VisCtrlAlignmentLEFT -> 1
       VisCtrlAlignmentCENTER -> 2
       VisCtrlAlignmentRIGHT -> 4
       VisCtrlAlignmentBOX -> 128
       VisCtrlAlignmentLEFTBOX -> 129
       VisCtrlAlignmentCENTERBOX -> 130
       VisCtrlAlignmentRIGHTBOX -> 132
  
  toEnum v =
    case v of
       1 -> VisCtrlAlignmentLEFT
       2 -> VisCtrlAlignmentCENTER
       4 -> VisCtrlAlignmentRIGHT
       128 -> VisCtrlAlignmentBOX
       129 -> VisCtrlAlignmentLEFTBOX
       130 -> VisCtrlAlignmentCENTERBOX
       132 -> VisCtrlAlignmentRIGHTBOX
       _ -> Prelude.error "unmarshallVisUICtrlAtts: illegal enum value "
  
data VisUICmds
 = VisCmdHierarchical
 | VisCmdFileNew
 | VisCmdFileOpen
 | VisCmdFileClose
 | VisCmdFileSave
 | VisCmdFileSaveAs
 | VisCmdFileSaveWorkspace
 | VisCmdFileImport
 | VisCmdFileSummaryInfoDlg
 | VisCmdFilePrint
 | VisCmdFileExit
 | VisCmdEditUndo
 | VisCmdEditRedo
 | VisCmdEditRepeat
 | VisCmdUFEditCut
 | VisCmdUFEditCopy
 | VisCmdUFEditPaste
 | VisCmdUFEditClear
 | VisCmdUFEditDuplicate
 | VisCmdUFEditSelectAll
 | VisCmdEditSelectSpecial
 | VisCmdEditPasteSpecial
 | VisCmdEditOpenObject
 | VisCmdEditLinks
 | VisCmdEditInsertObject
 | VisCmdEditInsertField
 | VisCmdViewFitInWindow
 | VisCmdView75
 | VisCmdView100
 | VisCmdView150
 | VisCmdView200
 | VisCmdViewCustom
 | VisCmdViewRulers
 | VisCmdViewGrid
 | VisCmdViewGuides
 | VisCmdViewConnections
 | VisCmdEditFind
 | VisCmdViewStatusBar
 | VisCmdObjectBringForward
 | VisCmdObjectBringToFront
 | VisCmdObjectSendBackward
 | VisCmdObjectSendToBack
 | VisCmdObjectAlignObjects
 | VisCmdObjectConnectObjects
 | VisCmdObjectGroup
 | VisCmdObjectUngroup
 | VisCmdObjectAddToGroup
 | VisCmdObjectRemoveFromGroup
 | VisCmdObjectConvertToGroup
 | VisCmdObjectRotate90
 | VisCmdObjectFlipVertical
 | VisCmdObjectFlipHorizontal
 | VisCmdObjectReverse
 | VisCmdObjectUnion
 | VisCmdObjectCombine
 | VisCmdObjectFragment
 | VisCmdFormatStyle
 | VisCmdFormatDefineStyles
 | VisCmdFormatLine
 | VisCmdFormatFill
 | VisCmdFormatText
 | VisCmdFormatFont
 | VisCmdFormatParagraph
 | VisCmdFormatTabs
 | VisCmdFormatBlock
 | VisCmdFormatBehavior
 | VisCmdFormatProtection
 | VisCmdFormatSpecial
 | VisCmdOptionsEditDrawing
 | VisCmdOptionsEditBackground
 | VisCmdOptionsPageSetup
 | VisCmdOptionsGoToDrawing
 | VisCmdOptionsNewPage
 | VisCmdOptionsDeletePages
 | VisCmdOptionsReorderPages
 | VisCmdOptionsPreferences
 | VisCmdOptionsColorPaletteDlg
 | VisCmdOptionsProtectDocument
 | VisCmdOptionsSnapGlueSetup
 | VisCmdWindowNewWindow
 | VisCmdWindowCascadeAll
 | VisCmdWindowTileAll
 | VisCmdWindowShowShapeSheet
 | VisCmdWindowShowMasterObjects
 | VisCmdRunAddOnMenu
 | VisCmdWindowShowDrawPage
 | VisCmdHelpContents
 | VisCmdDecreaseIndent
 | VisCmdIncreaseIndent
 | VisCmdDecreaseParaSpacing
 | VisCmdIncreaseParaSpacing
 | VisCmdTextRotate90
 | VisCmdHelpAboutVisio
 | VisCmdStenEditIcon
 | VisCmdStenEditDrawing
 | VisCmdStenNameMaster
 | VisCmdStenNewMaster
 | VisCmdStenImageMaster
 | VisCmdStenCleanup
 | VisCmdSWShowValues
 | VisCmdSWShowFormulas
 | VisCmdSWShowSectionsDlg
 | VisCmdSWPasteNameDlg
 | VisCmdSWPasteFunctionDlg
 | VisCmdSWInsertRow
 | VisCmdSWInsertRowAfter
 | VisCmdSWChangeRowTypeDlg
 | VisCmdSWDeleteRow
 | VisCmdSWAddSectionDlg
 | VisCmdSWDeleteSection
 | VisCmdFormatDoubleClick
 | VisCmdDrawLineStyle
 | VisCmdDrawFillStyle
 | VisCmdDrawSnap
 | VisCmdDrawGlue
 | VisCmdDrawZoom
 | VisCmdTextStyle
 | VisCmdTextFont
 | VisCmdTextSize
 | VisCmdTextBold
 | VisCmdTextItalic
 | VisCmdTextSmallCaps
 | VisCmdTextSuperscript
 | VisCmdTextSubscript
 | VisCmdTextUline
 | VisCmdSWCancel
 | VisCmdSWAccept
 | VisCmdSWFormula
 | VisCmdSWShowToggle
 | VisCmdIconLeftColor
 | VisCmdIconPencilTool
 | VisCmdRecalcObjectWH
 | VisCmdTurnToPrevPage
 | VisCmdTurnToNextPage
 | VisCmdEditReplace
 | VisCmdAlignObjectLeft
 | VisCmdAlignObjectCenter
 | VisCmdAlignObjectRight
 | VisCmdAlignObjectTop
 | VisCmdAlignObjectMiddle
 | VisCmdAlignObjectBottom
 | VisCmdCenterDrawing
 | VisCmdDeselectAll
 | VisCmdTextEditState
 | VisCmdZoomIn
 | VisCmdZoomOut
 | VisCmdDRPointerTool
 | VisCmdDRPencilTool
 | VisCmdDRLineTool
 | VisCmdDRQtrArcTool
 | VisCmdDRRectTool
 | VisCmdDROvalTool
 | VisCmdDRConnectorTool
 | VisCmdDRConnectionTool
 | VisCmdDRTextTool
 | VisCmdDRRotateTool
 | VisCmdObjectDistributeDlg
 | VisCmdDistributeHSpace
 | VisCmdDistributeCenter
 | VisCmdDistributeVSpace
 | VisCmdDistributeMiddle
 | VisCmdDlgLotusNotesFields
 | VisCmdToolsSpelling
 | VisCmdFormatPainter
 | VisCmdStenFloating
 | VisCmdView50
 | VisCmdView400
 | VisCmdSendAsMail
 | VisCmdShapeActions
 | VisCmdDRSplineTool
 | VisCmdFormatCustPropEdit
 | VisCmdRulerGridDlg
 | VisCmdFormatShadow
 | VisCmdFormatCorners
 | VisCmdToolsInventory
 | VisCmdPageSizeScale
 | VisCmdStenSwitchSides
 | VisCmdToolsArrayShapesAddOn
 | VisCmdSetLineWeight
 | VisCmdSetLinePattern
 | VisCmdSetLineEnds
 | VisCmdSetLineCornerStyle
 | VisCmdSetLineColor
 | VisCmdCloseWindow
 | VisCmdSetFillShadow
 | VisCmdSetFillColor
 | VisCmdHelpMode
 | VisCmdOffsetDlg
 | VisCmdDesignMode
 | VisCmdShapeExplorer
 | VisCmdSetFillPattern
 | VisCmdSetCharColor
 | VisCmdSetCharSizeUp
 | VisCmdSetCharSizeDown
 | VisCmdTextHAlignLeft
 | VisCmdTextHAlignCenter
 | VisCmdTextHAlignRight
 | VisCmdTextHAlignJustify
 | VisCmdTextVAlignTop
 | VisCmdTextVAlignMiddle
 | VisCmdTextVAlignBottom
 | VisCmdStampTool
 | VisCmdObjectInfoDlg
 | VisCmdObjectHelp
 | VisCmdFileOpenStencil
 | VisCmdPrintPage
 | VisCmdSWShapeActionDlg
 | VisCmdLayerDlg
 | VisCmdLayerSetupDlg
 | VisCmdCropTool
 | VisCmdTextBlockTool
 | VisCmdStenClose
 | VisCmdIntersect
 | VisCmdSubtract
 | VisCmdStenActivate
 | VisCmdStenIconAndName
 | VisCmdStenIconOnly
 | VisCmdStenNameOnly
 | VisCmdStenAutoArrange
 | VisCmdPrintPreview
 | VisCmdOpenInVisio
 | VisCmdFullScreenMode
 | VisCmdRotate90Clockwise
 | VisCmdZoomLast
 | VisCmdZoomPageWidth
 | VisCmdToolbarsDlg
 | VisCmdINETAddToFavorites
 | VisCmdViewPageBreaks
 | VisCmdZoomSingleTile
 | VisCmdPreviousTile
 | VisCmdNextTile
 | VisCmdFirstTile
 | VisCmdLastTile
 | VisCmdInsertAutoCADAddOn
 | VisCmdInsertControlDlg
 | VisCmdJoin
 | VisCmdTrim
 | VisCmdDlgCustomFit
 | VisCmdFitCurve
 | VisCmdIconBucketTool
 | VisCmdIconLassoTool
 | VisCmdIconSelectNet
 | VisCmdToolsLayoutShapesDlg
 | VisCmdToolsRunVBE
 | VisCmdToolsMacroDlg
 | VisCmdFileNewBlankDrawing
 | VisCmdFileNewBlankStencil
 | VisCmdProgRefHelp
 | VisCmdInsertHyperLink
 | VisCmdHelpTemplates
 | VisCmdEmailRouting
 | VisCmdSendToExchange
 | VisCmdINETUserSearchPage
 | VisCmdINETVisioHomePage
 | VisCmdINETGoForward
 | VisCmdINETGoBack
 | VisCmdOpenActiveObject
 | VisCmdCancelInPlaceEditing
 | VisCmdINETVisioSolutionsLibrary
 | VisCmdINETKnowledgeBase
 | VisCmdINETDiagrammingResources
 | VisCmdINETOpenHlink
 | VisCmdINETOpenHlinkNewWnd
 | VisCmdINETCopyHyperlink
 | VisCmdHyperlinkHier
 | VisCmdINETEditHyperlink
 | VisCmdINETPasteAsHyperlink
 | VisCmdBullets
 | VisCmdShapeLayerToolbar
 | VisCmdGoToPageToolbar
 | VisCmdFormatAllTextProps
 | VisCmdBrowseSampleDrawings
 deriving ()
instance Prelude.Enum VisUICmds where
  fromEnum v =
    case v of
       VisCmdHierarchical -> 200
       VisCmdFileNew -> 1001
       VisCmdFileOpen -> 1002
       VisCmdFileClose -> 1003
       VisCmdFileSave -> 1004
       VisCmdFileSaveAs -> 1005
       VisCmdFileSaveWorkspace -> 1006
       VisCmdFileImport -> 1007
       VisCmdFileSummaryInfoDlg -> 1009
       VisCmdFilePrint -> 1010
       VisCmdFileExit -> 1016
       VisCmdEditUndo -> 1017
       VisCmdEditRedo -> 1018
       VisCmdEditRepeat -> 1019
       VisCmdUFEditCut -> 1020
       VisCmdUFEditCopy -> 1021
       VisCmdUFEditPaste -> 1022
       VisCmdUFEditClear -> 1023
       VisCmdUFEditDuplicate -> 1024
       VisCmdUFEditSelectAll -> 1025
       VisCmdEditSelectSpecial -> 1026
       VisCmdEditPasteSpecial -> 1027
       VisCmdEditOpenObject -> 1029
       VisCmdEditLinks -> 1030
       VisCmdEditInsertObject -> 1031
       VisCmdEditInsertField -> 1032
       VisCmdViewFitInWindow -> 1033
       VisCmdView75 -> 1034
       VisCmdView100 -> 1035
       VisCmdView150 -> 1036
       VisCmdView200 -> 1037
       VisCmdViewCustom -> 1038
       VisCmdViewRulers -> 1039
       VisCmdViewGrid -> 1040
       VisCmdViewGuides -> 1041
       VisCmdViewConnections -> 1042
       VisCmdEditFind -> 1043
       VisCmdViewStatusBar -> 1044
       VisCmdObjectBringForward -> 1045
       VisCmdObjectBringToFront -> 1046
       VisCmdObjectSendBackward -> 1047
       VisCmdObjectSendToBack -> 1048
       VisCmdObjectAlignObjects -> 1049
       VisCmdObjectConnectObjects -> 1050
       VisCmdObjectGroup -> 1051
       VisCmdObjectUngroup -> 1052
       VisCmdObjectAddToGroup -> 1053
       VisCmdObjectRemoveFromGroup -> 1054
       VisCmdObjectConvertToGroup -> 1055
       VisCmdObjectRotate90 -> 1056
       VisCmdObjectFlipVertical -> 1057
       VisCmdObjectFlipHorizontal -> 1058
       VisCmdObjectReverse -> 1059
       VisCmdObjectUnion -> 1060
       VisCmdObjectCombine -> 1061
       VisCmdObjectFragment -> 1062
       VisCmdFormatStyle -> 1063
       VisCmdFormatDefineStyles -> 1064
       VisCmdFormatLine -> 1065
       VisCmdFormatFill -> 1066
       VisCmdFormatText -> 1067
       VisCmdFormatFont -> 1067
       VisCmdFormatParagraph -> 1068
       VisCmdFormatTabs -> 1069
       VisCmdFormatBlock -> 1070
       VisCmdFormatBehavior -> 1071
       VisCmdFormatProtection -> 1072
       VisCmdFormatSpecial -> 1073
       VisCmdOptionsEditDrawing -> 1074
       VisCmdOptionsEditBackground -> 1075
       VisCmdOptionsPageSetup -> 1076
       VisCmdOptionsGoToDrawing -> 1077
       VisCmdOptionsNewPage -> 1078
       VisCmdOptionsDeletePages -> 1079
       VisCmdOptionsReorderPages -> 1080
       VisCmdOptionsPreferences -> 1081
       VisCmdOptionsColorPaletteDlg -> 1082
       VisCmdOptionsProtectDocument -> 1083
       VisCmdOptionsSnapGlueSetup -> 1084
       VisCmdWindowNewWindow -> 1085
       VisCmdWindowCascadeAll -> 1086
       VisCmdWindowTileAll -> 1087
       VisCmdWindowShowShapeSheet -> 1088
       VisCmdWindowShowMasterObjects -> 1089
       VisCmdRunAddOnMenu -> 1090
       VisCmdWindowShowDrawPage -> 1091
       VisCmdHelpContents -> 1092
       VisCmdDecreaseIndent -> 1093
       VisCmdIncreaseIndent -> 1094
       VisCmdDecreaseParaSpacing -> 1095
       VisCmdIncreaseParaSpacing -> 1096
       VisCmdTextRotate90 -> 1098
       VisCmdHelpAboutVisio -> 1100
       VisCmdStenEditIcon -> 1101
       VisCmdStenEditDrawing -> 1102
       VisCmdStenNameMaster -> 1103
       VisCmdStenNewMaster -> 1104
       VisCmdStenImageMaster -> 1105
       VisCmdStenCleanup -> 1106
       VisCmdSWShowValues -> 1107
       VisCmdSWShowFormulas -> 1108
       VisCmdSWShowSectionsDlg -> 1109
       VisCmdSWPasteNameDlg -> 1110
       VisCmdSWPasteFunctionDlg -> 1111
       VisCmdSWInsertRow -> 1112
       VisCmdSWInsertRowAfter -> 1113
       VisCmdSWChangeRowTypeDlg -> 1114
       VisCmdSWDeleteRow -> 1115
       VisCmdSWAddSectionDlg -> 1116
       VisCmdSWDeleteSection -> 1117
       VisCmdFormatDoubleClick -> 1118
       VisCmdDrawLineStyle -> 1122
       VisCmdDrawFillStyle -> 1123
       VisCmdDrawSnap -> 1124
       VisCmdDrawGlue -> 1125
       VisCmdDrawZoom -> 1126
       VisCmdTextStyle -> 1128
       VisCmdTextFont -> 1129
       VisCmdTextSize -> 1130
       VisCmdTextBold -> 1131
       VisCmdTextItalic -> 1132
       VisCmdTextSmallCaps -> 1133
       VisCmdTextSuperscript -> 1134
       VisCmdTextSubscript -> 1135
       VisCmdTextUline -> 1136
       VisCmdSWCancel -> 1139
       VisCmdSWAccept -> 1140
       VisCmdSWFormula -> 1141
       VisCmdSWShowToggle -> 1142
       VisCmdIconLeftColor -> 1143
       VisCmdIconPencilTool -> 1145
       VisCmdRecalcObjectWH -> 1146
       VisCmdTurnToPrevPage -> 1147
       VisCmdTurnToNextPage -> 1148
       VisCmdEditReplace -> 1179
       VisCmdAlignObjectLeft -> 1196
       VisCmdAlignObjectCenter -> 1197
       VisCmdAlignObjectRight -> 1198
       VisCmdAlignObjectTop -> 1199
       VisCmdAlignObjectMiddle -> 1200
       VisCmdAlignObjectBottom -> 1201
       VisCmdCenterDrawing -> 1202
       VisCmdDeselectAll -> 1213
       VisCmdTextEditState -> 1214
       VisCmdZoomIn -> 1216
       VisCmdZoomOut -> 1217
       VisCmdDRPointerTool -> 1219
       VisCmdDRPencilTool -> 1220
       VisCmdDRLineTool -> 1221
       VisCmdDRQtrArcTool -> 1222
       VisCmdDRRectTool -> 1223
       VisCmdDROvalTool -> 1224
       VisCmdDRConnectorTool -> 1225
       VisCmdDRConnectionTool -> 1226
       VisCmdDRTextTool -> 1227
       VisCmdDRRotateTool -> 1228
       VisCmdObjectDistributeDlg -> 1230
       VisCmdDistributeHSpace -> 1231
       VisCmdDistributeCenter -> 1233
       VisCmdDistributeVSpace -> 1235
       VisCmdDistributeMiddle -> 1237
       VisCmdDlgLotusNotesFields -> 1245
       VisCmdToolsSpelling -> 1270
       VisCmdFormatPainter -> 1271
       VisCmdStenFloating -> 1274
       VisCmdView50 -> 1279
       VisCmdView400 -> 1280
       VisCmdSendAsMail -> 1292
       VisCmdShapeActions -> 1309
       VisCmdDRSplineTool -> 1311
       VisCmdFormatCustPropEdit -> 1312
       VisCmdRulerGridDlg -> 1318
       VisCmdFormatShadow -> 1333
       VisCmdFormatCorners -> 1334
       VisCmdToolsInventory -> 1335
       VisCmdPageSizeScale -> 1076
       VisCmdStenSwitchSides -> 1342
       VisCmdToolsArrayShapesAddOn -> 1354
       VisCmdSetLineWeight -> 1355
       VisCmdSetLinePattern -> 1356
       VisCmdSetLineEnds -> 1357
       VisCmdSetLineCornerStyle -> 1358
       VisCmdSetLineColor -> 1359
       VisCmdCloseWindow -> 1361
       VisCmdSetFillShadow -> 1379
       VisCmdSetFillColor -> 1385
       VisCmdHelpMode -> 1386
       VisCmdOffsetDlg -> 1387
       VisCmdDesignMode -> 1388
       VisCmdShapeExplorer -> 1389
       VisCmdSetFillPattern -> 1399
       VisCmdSetCharColor -> 1404
       VisCmdSetCharSizeUp -> 1405
       VisCmdSetCharSizeDown -> 1406
       VisCmdTextHAlignLeft -> 1407
       VisCmdTextHAlignCenter -> 1408
       VisCmdTextHAlignRight -> 1409
       VisCmdTextHAlignJustify -> 1412
       VisCmdTextVAlignTop -> 1413
       VisCmdTextVAlignMiddle -> 1414
       VisCmdTextVAlignBottom -> 1422
       VisCmdStampTool -> 1424
       VisCmdObjectInfoDlg -> 1425
       VisCmdObjectHelp -> 1428
       VisCmdFileOpenStencil -> 1442
       VisCmdPrintPage -> 1443
       VisCmdSWShapeActionDlg -> 1444
       VisCmdLayerDlg -> 1446
       VisCmdLayerSetupDlg -> 1448
       VisCmdCropTool -> 1449
       VisCmdTextBlockTool -> 1451
       VisCmdStenClose -> 1452
       VisCmdIntersect -> 1453
       VisCmdSubtract -> 1454
       VisCmdStenActivate -> 1458
       VisCmdStenIconAndName -> 1480
       VisCmdStenIconOnly -> 1481
       VisCmdStenNameOnly -> 1482
       VisCmdStenAutoArrange -> 1483
       VisCmdPrintPreview -> 1490
       VisCmdOpenInVisio -> 1491
       VisCmdFullScreenMode -> 1492
       VisCmdRotate90Clockwise -> 1494
       VisCmdZoomLast -> 1495
       VisCmdZoomPageWidth -> 1496
       VisCmdToolbarsDlg -> 1500
       VisCmdINETAddToFavorites -> 1506
       VisCmdViewPageBreaks -> 1509
       VisCmdZoomSingleTile -> 1512
       VisCmdPreviousTile -> 1513
       VisCmdNextTile -> 1514
       VisCmdFirstTile -> 1515
       VisCmdLastTile -> 1516
       VisCmdInsertAutoCADAddOn -> 1521
       VisCmdInsertControlDlg -> 1522
       VisCmdJoin -> 1533
       VisCmdTrim -> 1534
       VisCmdDlgCustomFit -> 1536
       VisCmdFitCurve -> 1538
       VisCmdIconBucketTool -> 1543
       VisCmdIconLassoTool -> 1544
       VisCmdIconSelectNet -> 1545
       VisCmdToolsLayoutShapesDlg -> 1574
       VisCmdToolsRunVBE -> 1576
       VisCmdToolsMacroDlg -> 1577
       VisCmdFileNewBlankDrawing -> 1579
       VisCmdFileNewBlankStencil -> 1582
       VisCmdProgRefHelp -> 1584
       VisCmdInsertHyperLink -> 1585
       VisCmdHelpTemplates -> 1586
       VisCmdEmailRouting -> 1588
       VisCmdSendToExchange -> 1589
       VisCmdINETUserSearchPage -> 1595
       VisCmdINETVisioHomePage -> 1596
       VisCmdINETGoForward -> 1598
       VisCmdINETGoBack -> 1599
       VisCmdOpenActiveObject -> 1601
       VisCmdCancelInPlaceEditing -> 1602
       VisCmdINETVisioSolutionsLibrary -> 1604
       VisCmdINETKnowledgeBase -> 1605
       VisCmdINETDiagrammingResources -> 1606
       VisCmdINETOpenHlink -> 1607
       VisCmdINETOpenHlinkNewWnd -> 1608
       VisCmdINETCopyHyperlink -> 1610
       VisCmdHyperlinkHier -> 1611
       VisCmdINETEditHyperlink -> 1619
       VisCmdINETPasteAsHyperlink -> 1620
       VisCmdBullets -> 1633
       VisCmdShapeLayerToolbar -> 1634
       VisCmdGoToPageToolbar -> 1635
       VisCmdFormatAllTextProps -> 1642
       VisCmdBrowseSampleDrawings -> 1645
  
  toEnum v =
    case v of
       200 -> VisCmdHierarchical
       1001 -> VisCmdFileNew
       1002 -> VisCmdFileOpen
       1003 -> VisCmdFileClose
       1004 -> VisCmdFileSave
       1005 -> VisCmdFileSaveAs
       1006 -> VisCmdFileSaveWorkspace
       1007 -> VisCmdFileImport
       1009 -> VisCmdFileSummaryInfoDlg
       1010 -> VisCmdFilePrint
       1016 -> VisCmdFileExit
       1017 -> VisCmdEditUndo
       1018 -> VisCmdEditRedo
       1019 -> VisCmdEditRepeat
       1020 -> VisCmdUFEditCut
       1021 -> VisCmdUFEditCopy
       1022 -> VisCmdUFEditPaste
       1023 -> VisCmdUFEditClear
       1024 -> VisCmdUFEditDuplicate
       1025 -> VisCmdUFEditSelectAll
       1026 -> VisCmdEditSelectSpecial
       1027 -> VisCmdEditPasteSpecial
       1029 -> VisCmdEditOpenObject
       1030 -> VisCmdEditLinks
       1031 -> VisCmdEditInsertObject
       1032 -> VisCmdEditInsertField
       1033 -> VisCmdViewFitInWindow
       1034 -> VisCmdView75
       1035 -> VisCmdView100
       1036 -> VisCmdView150
       1037 -> VisCmdView200
       1038 -> VisCmdViewCustom
       1039 -> VisCmdViewRulers
       1040 -> VisCmdViewGrid
       1041 -> VisCmdViewGuides
       1042 -> VisCmdViewConnections
       1043 -> VisCmdEditFind
       1044 -> VisCmdViewStatusBar
       1045 -> VisCmdObjectBringForward
       1046 -> VisCmdObjectBringToFront
       1047 -> VisCmdObjectSendBackward
       1048 -> VisCmdObjectSendToBack
       1049 -> VisCmdObjectAlignObjects
       1050 -> VisCmdObjectConnectObjects
       1051 -> VisCmdObjectGroup
       1052 -> VisCmdObjectUngroup
       1053 -> VisCmdObjectAddToGroup
       1054 -> VisCmdObjectRemoveFromGroup
       1055 -> VisCmdObjectConvertToGroup
       1056 -> VisCmdObjectRotate90
       1057 -> VisCmdObjectFlipVertical
       1058 -> VisCmdObjectFlipHorizontal
       1059 -> VisCmdObjectReverse
       1060 -> VisCmdObjectUnion
       1061 -> VisCmdObjectCombine
       1062 -> VisCmdObjectFragment
       1063 -> VisCmdFormatStyle
       1064 -> VisCmdFormatDefineStyles
       1065 -> VisCmdFormatLine
       1066 -> VisCmdFormatFill
       1067 -> VisCmdFormatText
       1067 -> VisCmdFormatFont
       1068 -> VisCmdFormatParagraph
       1069 -> VisCmdFormatTabs
       1070 -> VisCmdFormatBlock
       1071 -> VisCmdFormatBehavior
       1072 -> VisCmdFormatProtection
       1073 -> VisCmdFormatSpecial
       1074 -> VisCmdOptionsEditDrawing
       1075 -> VisCmdOptionsEditBackground
       1076 -> VisCmdOptionsPageSetup
       1077 -> VisCmdOptionsGoToDrawing
       1078 -> VisCmdOptionsNewPage
       1079 -> VisCmdOptionsDeletePages
       1080 -> VisCmdOptionsReorderPages
       1081 -> VisCmdOptionsPreferences
       1082 -> VisCmdOptionsColorPaletteDlg
       1083 -> VisCmdOptionsProtectDocument
       1084 -> VisCmdOptionsSnapGlueSetup
       1085 -> VisCmdWindowNewWindow
       1086 -> VisCmdWindowCascadeAll
       1087 -> VisCmdWindowTileAll
       1088 -> VisCmdWindowShowShapeSheet
       1089 -> VisCmdWindowShowMasterObjects
       1090 -> VisCmdRunAddOnMenu
       1091 -> VisCmdWindowShowDrawPage
       1092 -> VisCmdHelpContents
       1093 -> VisCmdDecreaseIndent
       1094 -> VisCmdIncreaseIndent
       1095 -> VisCmdDecreaseParaSpacing
       1096 -> VisCmdIncreaseParaSpacing
       1098 -> VisCmdTextRotate90
       1100 -> VisCmdHelpAboutVisio
       1101 -> VisCmdStenEditIcon
       1102 -> VisCmdStenEditDrawing
       1103 -> VisCmdStenNameMaster
       1104 -> VisCmdStenNewMaster
       1105 -> VisCmdStenImageMaster
       1106 -> VisCmdStenCleanup
       1107 -> VisCmdSWShowValues
       1108 -> VisCmdSWShowFormulas
       1109 -> VisCmdSWShowSectionsDlg
       1110 -> VisCmdSWPasteNameDlg
       1111 -> VisCmdSWPasteFunctionDlg
       1112 -> VisCmdSWInsertRow
       1113 -> VisCmdSWInsertRowAfter
       1114 -> VisCmdSWChangeRowTypeDlg
       1115 -> VisCmdSWDeleteRow
       1116 -> VisCmdSWAddSectionDlg
       1117 -> VisCmdSWDeleteSection
       1118 -> VisCmdFormatDoubleClick
       1122 -> VisCmdDrawLineStyle
       1123 -> VisCmdDrawFillStyle
       1124 -> VisCmdDrawSnap
       1125 -> VisCmdDrawGlue
       1126 -> VisCmdDrawZoom
       1128 -> VisCmdTextStyle
       1129 -> VisCmdTextFont
       1130 -> VisCmdTextSize
       1131 -> VisCmdTextBold
       1132 -> VisCmdTextItalic
       1133 -> VisCmdTextSmallCaps
       1134 -> VisCmdTextSuperscript
       1135 -> VisCmdTextSubscript
       1136 -> VisCmdTextUline
       1139 -> VisCmdSWCancel
       1140 -> VisCmdSWAccept
       1141 -> VisCmdSWFormula
       1142 -> VisCmdSWShowToggle
       1143 -> VisCmdIconLeftColor
       1145 -> VisCmdIconPencilTool
       1146 -> VisCmdRecalcObjectWH
       1147 -> VisCmdTurnToPrevPage
       1148 -> VisCmdTurnToNextPage
       1179 -> VisCmdEditReplace
       1196 -> VisCmdAlignObjectLeft
       1197 -> VisCmdAlignObjectCenter
       1198 -> VisCmdAlignObjectRight
       1199 -> VisCmdAlignObjectTop
       1200 -> VisCmdAlignObjectMiddle
       1201 -> VisCmdAlignObjectBottom
       1202 -> VisCmdCenterDrawing
       1213 -> VisCmdDeselectAll
       1214 -> VisCmdTextEditState
       1216 -> VisCmdZoomIn
       1217 -> VisCmdZoomOut
       1219 -> VisCmdDRPointerTool
       1220 -> VisCmdDRPencilTool
       1221 -> VisCmdDRLineTool
       1222 -> VisCmdDRQtrArcTool
       1223 -> VisCmdDRRectTool
       1224 -> VisCmdDROvalTool
       1225 -> VisCmdDRConnectorTool
       1226 -> VisCmdDRConnectionTool
       1227 -> VisCmdDRTextTool
       1228 -> VisCmdDRRotateTool
       1230 -> VisCmdObjectDistributeDlg
       1231 -> VisCmdDistributeHSpace
       1233 -> VisCmdDistributeCenter
       1235 -> VisCmdDistributeVSpace
       1237 -> VisCmdDistributeMiddle
       1245 -> VisCmdDlgLotusNotesFields
       1270 -> VisCmdToolsSpelling
       1271 -> VisCmdFormatPainter
       1274 -> VisCmdStenFloating
       1279 -> VisCmdView50
       1280 -> VisCmdView400
       1292 -> VisCmdSendAsMail
       1309 -> VisCmdShapeActions
       1311 -> VisCmdDRSplineTool
       1312 -> VisCmdFormatCustPropEdit
       1318 -> VisCmdRulerGridDlg
       1333 -> VisCmdFormatShadow
       1334 -> VisCmdFormatCorners
       1335 -> VisCmdToolsInventory
       1076 -> VisCmdPageSizeScale
       1342 -> VisCmdStenSwitchSides
       1354 -> VisCmdToolsArrayShapesAddOn
       1355 -> VisCmdSetLineWeight
       1356 -> VisCmdSetLinePattern
       1357 -> VisCmdSetLineEnds
       1358 -> VisCmdSetLineCornerStyle
       1359 -> VisCmdSetLineColor
       1361 -> VisCmdCloseWindow
       1379 -> VisCmdSetFillShadow
       1385 -> VisCmdSetFillColor
       1386 -> VisCmdHelpMode
       1387 -> VisCmdOffsetDlg
       1388 -> VisCmdDesignMode
       1389 -> VisCmdShapeExplorer
       1399 -> VisCmdSetFillPattern
       1404 -> VisCmdSetCharColor
       1405 -> VisCmdSetCharSizeUp
       1406 -> VisCmdSetCharSizeDown
       1407 -> VisCmdTextHAlignLeft
       1408 -> VisCmdTextHAlignCenter
       1409 -> VisCmdTextHAlignRight
       1412 -> VisCmdTextHAlignJustify
       1413 -> VisCmdTextVAlignTop
       1414 -> VisCmdTextVAlignMiddle
       1422 -> VisCmdTextVAlignBottom
       1424 -> VisCmdStampTool
       1425 -> VisCmdObjectInfoDlg
       1428 -> VisCmdObjectHelp
       1442 -> VisCmdFileOpenStencil
       1443 -> VisCmdPrintPage
       1444 -> VisCmdSWShapeActionDlg
       1446 -> VisCmdLayerDlg
       1448 -> VisCmdLayerSetupDlg
       1449 -> VisCmdCropTool
       1451 -> VisCmdTextBlockTool
       1452 -> VisCmdStenClose
       1453 -> VisCmdIntersect
       1454 -> VisCmdSubtract
       1458 -> VisCmdStenActivate
       1480 -> VisCmdStenIconAndName
       1481 -> VisCmdStenIconOnly
       1482 -> VisCmdStenNameOnly
       1483 -> VisCmdStenAutoArrange
       1490 -> VisCmdPrintPreview
       1491 -> VisCmdOpenInVisio
       1492 -> VisCmdFullScreenMode
       1494 -> VisCmdRotate90Clockwise
       1495 -> VisCmdZoomLast
       1496 -> VisCmdZoomPageWidth
       1500 -> VisCmdToolbarsDlg
       1506 -> VisCmdINETAddToFavorites
       1509 -> VisCmdViewPageBreaks
       1512 -> VisCmdZoomSingleTile
       1513 -> VisCmdPreviousTile
       1514 -> VisCmdNextTile
       1515 -> VisCmdFirstTile
       1516 -> VisCmdLastTile
       1521 -> VisCmdInsertAutoCADAddOn
       1522 -> VisCmdInsertControlDlg
       1533 -> VisCmdJoin
       1534 -> VisCmdTrim
       1536 -> VisCmdDlgCustomFit
       1538 -> VisCmdFitCurve
       1543 -> VisCmdIconBucketTool
       1544 -> VisCmdIconLassoTool
       1545 -> VisCmdIconSelectNet
       1574 -> VisCmdToolsLayoutShapesDlg
       1576 -> VisCmdToolsRunVBE
       1577 -> VisCmdToolsMacroDlg
       1579 -> VisCmdFileNewBlankDrawing
       1582 -> VisCmdFileNewBlankStencil
       1584 -> VisCmdProgRefHelp
       1585 -> VisCmdInsertHyperLink
       1586 -> VisCmdHelpTemplates
       1588 -> VisCmdEmailRouting
       1589 -> VisCmdSendToExchange
       1595 -> VisCmdINETUserSearchPage
       1596 -> VisCmdINETVisioHomePage
       1598 -> VisCmdINETGoForward
       1599 -> VisCmdINETGoBack
       1601 -> VisCmdOpenActiveObject
       1602 -> VisCmdCancelInPlaceEditing
       1604 -> VisCmdINETVisioSolutionsLibrary
       1605 -> VisCmdINETKnowledgeBase
       1606 -> VisCmdINETDiagrammingResources
       1607 -> VisCmdINETOpenHlink
       1608 -> VisCmdINETOpenHlinkNewWnd
       1610 -> VisCmdINETCopyHyperlink
       1611 -> VisCmdHyperlinkHier
       1619 -> VisCmdINETEditHyperlink
       1620 -> VisCmdINETPasteAsHyperlink
       1633 -> VisCmdBullets
       1634 -> VisCmdShapeLayerToolbar
       1635 -> VisCmdGoToPageToolbar
       1642 -> VisCmdFormatAllTextProps
       1645 -> VisCmdBrowseSampleDrawings
       _ -> Prelude.error "unmarshallVisUICmds: illegal enum value "
  
data VisTraceFlags
 = VisTraceEvents
 | VisTraceAdvises
 | VisTraceAddonInvokes
 | VisTraceCallsToVBA
 deriving ()
instance Prelude.Enum VisTraceFlags where
  fromEnum v =
    case v of
       VisTraceEvents -> 1
       VisTraceAdvises -> 2
       VisTraceAddonInvokes -> 4
       VisTraceCallsToVBA -> 8
  
  toEnum v =
    case v of
       1 -> VisTraceEvents
       2 -> VisTraceAdvises
       4 -> VisTraceAddonInvokes
       8 -> VisTraceCallsToVBA
       _ -> Prelude.error "unmarshallVisTraceFlags: illegal enum value "
  
data VisToolbarFlavors
 = VisToolBarNone
 | VisToolBarOn
 | VisToolBarMSOffice
 | VisToolBarLotusSS
 deriving ()
instance Prelude.Enum VisToolbarFlavors where
  fromEnum v =
    case v of
       VisToolBarNone -> (-1)
       VisToolBarOn -> 0
       VisToolBarMSOffice -> 0
       VisToolBarLotusSS -> 0
  
  toEnum v =
    case v of
       (-1) -> VisToolBarNone
       0 -> VisToolBarOn
       0 -> VisToolBarMSOffice
       0 -> VisToolBarLotusSS
       _ -> Prelude.error "unmarshallVisToolbarFlavors: illegal enum value "
  
data VisToParts
 = VisConnectToError
 | VisToNone
 | VisGuideX
 | VisGuideY
 | VisWholeShape
 | VisConnectionPoint
 | VisConnectError
 | VisNone
 deriving ()
instance Prelude.Enum VisToParts where
  fromEnum v =
    case v of
       VisConnectToError -> (-1)
       VisToNone -> 0
       VisGuideX -> 1
       VisGuideY -> 2
       VisWholeShape -> 3
       VisConnectionPoint -> 100
       VisConnectError -> (-1)
       VisNone -> 0
  
  toEnum v =
    case v of
       (-1) -> VisConnectToError
       0 -> VisToNone
       1 -> VisGuideX
       2 -> VisGuideY
       3 -> VisWholeShape
       100 -> VisConnectionPoint
       (-1) -> VisConnectError
       0 -> VisNone
       _ -> Prelude.error "unmarshallVisToParts: illegal enum value "
  
data VisStatCodes
 = VisStatNormal
 | VisStatAppHasShutdown
 | VisStatDeleted
 | VisStatTouched
 | VisStatClosed
 | VisStatSuspended
 deriving ()
instance Prelude.Enum VisStatCodes where
  fromEnum v =
    case v of
       VisStatNormal -> 0
       VisStatAppHasShutdown -> 1
       VisStatDeleted -> 2
       VisStatTouched -> 4
       VisStatClosed -> 8
       VisStatSuspended -> 16
  
  toEnum v =
    case v of
       0 -> VisStatNormal
       1 -> VisStatAppHasShutdown
       2 -> VisStatDeleted
       4 -> VisStatTouched
       8 -> VisStatClosed
       16 -> VisStatSuspended
       _ -> Prelude.error "unmarshallVisStatCodes: illegal enum value "
  
data VisShapeTypes
 = VisTypePage
 | VisTypeGroup
 | VisTypeShape
 | VisTypeForeignObject
 | VisTypeGuide
 | VisTypeMetafile
 | VisTypeBitmap
 | VisTypeIsLinked
 | VisTypeIsEmbedded
 | VisTypeIsControl
 | VisTypeIsOLE2
 deriving ()
instance Prelude.Enum VisShapeTypes where
  fromEnum v =
    case v of
       VisTypePage -> 1
       VisTypeGroup -> 2
       VisTypeShape -> 3
       VisTypeForeignObject -> 4
       VisTypeGuide -> 5
       VisTypeMetafile -> 16
       VisTypeBitmap -> 32
       VisTypeIsLinked -> 256
       VisTypeIsEmbedded -> 512
       VisTypeIsControl -> 1024
       VisTypeIsOLE2 -> 32768
  
  toEnum v =
    case v of
       1 -> VisTypePage
       2 -> VisTypeGroup
       3 -> VisTypeShape
       4 -> VisTypeForeignObject
       5 -> VisTypeGuide
       16 -> VisTypeMetafile
       32 -> VisTypeBitmap
       256 -> VisTypeIsLinked
       512 -> VisTypeIsEmbedded
       1024 -> VisTypeIsControl
       32768 -> VisTypeIsOLE2
       _ -> Prelude.error "unmarshallVisShapeTypes: illegal enum value "
  
data VisShapeIDs
 = VisInvalShapeID
 | VisPageSheetID
 deriving ()
instance Prelude.Enum VisShapeIDs where
  fromEnum v =
    case v of
       VisInvalShapeID -> (-1)
       VisPageSheetID -> 0
  
  toEnum v =
    case v of
       (-1) -> VisInvalShapeID
       0 -> VisPageSheetID
       _ -> Prelude.error "unmarshallVisShapeIDs: illegal enum value "
  
data VisSelectArgs
 = VisDeselect
 | VisSelect
 | VisSubSelect
 | VisSelectAll
 | VisDeselectAll
 deriving ()
instance Prelude.Enum VisSelectArgs where
  fromEnum v =
    case v of
       VisDeselect -> 1
       VisSelect -> 2
       VisSubSelect -> 3
       VisSelectAll -> 4
       VisDeselectAll -> 256
  
  toEnum v =
    case v of
       1 -> VisDeselect
       2 -> VisSelect
       3 -> VisSubSelect
       4 -> VisSelectAll
       256 -> VisDeselectAll
       _ -> Prelude.error "unmarshallVisSelectArgs: illegal enum value "
  
data VisSectionIndices
 = VisSectionInval
 | VisSectionFirst
 | VisSectionLast
 | VisSectionNone
 | VisSectionObject
 | VisSectionMember
 | VisSectionCharacter
 | VisSectionParagraph
 | VisSectionTab
 | VisSectionScratch
 | VisSectionExport
 | VisSectionConnectionPts
 | VisSectionTextField
 | VisSectionControls
 | VisSectionFirstComponent
 | VisSectionLastComponent
 | VisSectionAction
 | VisSectionLayer
 | VisSectionUser
 | VisSectionProp
 | VisSectionLastReal
 deriving ()
instance Prelude.Enum VisSectionIndices where
  fromEnum v =
    case v of
       VisSectionInval -> 255
       VisSectionFirst -> 0
       VisSectionLast -> 252
       VisSectionNone -> 255
       VisSectionObject -> 1
       VisSectionMember -> 2
       VisSectionCharacter -> 3
       VisSectionParagraph -> 4
       VisSectionTab -> 5
       VisSectionScratch -> 6
       VisSectionExport -> 7
       VisSectionConnectionPts -> 7
       VisSectionTextField -> 8
       VisSectionControls -> 9
       VisSectionFirstComponent -> 10
       VisSectionLastComponent -> 239
       VisSectionAction -> 240
       VisSectionLayer -> 241
       VisSectionUser -> 242
       VisSectionProp -> 243
       VisSectionLastReal -> 243
  
  toEnum v =
    case v of
       255 -> VisSectionInval
       0 -> VisSectionFirst
       252 -> VisSectionLast
       255 -> VisSectionNone
       1 -> VisSectionObject
       2 -> VisSectionMember
       3 -> VisSectionCharacter
       4 -> VisSectionParagraph
       5 -> VisSectionTab
       6 -> VisSectionScratch
       7 -> VisSectionExport
       7 -> VisSectionConnectionPts
       8 -> VisSectionTextField
       9 -> VisSectionControls
       10 -> VisSectionFirstComponent
       239 -> VisSectionLastComponent
       240 -> VisSectionAction
       241 -> VisSectionLayer
       242 -> VisSectionUser
       243 -> VisSectionProp
       243 -> VisSectionLastReal
       _ -> Prelude.error "unmarshallVisSectionIndices: illegal enum value "
  
data VisScrollbarStates
 = VisScrollBarNeither
 | VisScrollBarHoriz
 | VisScrollBarVert
 | VisScrollBarBoth
 deriving ()
instance Prelude.Enum VisScrollbarStates where
  fromEnum v =
    case v of
       VisScrollBarNeither -> 0
       VisScrollBarHoriz -> 1
       VisScrollBarVert -> 4
       VisScrollBarBoth -> 5
  
  toEnum v =
    case v of
       0 -> VisScrollBarNeither
       1 -> VisScrollBarHoriz
       4 -> VisScrollBarVert
       5 -> VisScrollBarBoth
       _ -> Prelude.error "unmarshallVisScrollbarStates: illegal enum value "
  
data VisRunTypes
 = VisCharPropRow
 | VisParaPropRow
 | VisTabPropRow
 | VisWordRun
 | VisParaRun
 | VisFieldRun
 deriving ()
instance Prelude.Enum VisRunTypes where
  fromEnum v =
    case v of
       VisCharPropRow -> 1
       VisParaPropRow -> 2
       VisTabPropRow -> 3
       VisWordRun -> 10
       VisParaRun -> 11
       VisFieldRun -> 20
  
  toEnum v =
    case v of
       1 -> VisCharPropRow
       2 -> VisParaPropRow
       3 -> VisTabPropRow
       10 -> VisWordRun
       11 -> VisParaRun
       20 -> VisFieldRun
       _ -> Prelude.error "unmarshallVisRunTypes: illegal enum value "
  
data VisRowTags
 = VisTagBase
 | VisTagRowVoid
 | VisTagInvalid
 | VisTagComponent
 | VisTagMoveTo
 | VisTagLineTo
 | VisTagArcTo
 | VisTagEllipticalArcTo
 | VisTagSplineBeg
 | VisTagSplineSpan
 | VisTagTab0
 | VisTagTab2
 | VisTagTab10
 | VisTagCtlPt
 | VisTagCtlPtTip
 | VisTagCnnctPt
 | VisTagCnnctNamed
 | VisTagCnnctPtABCD
 | VisTagCnnctNamedABCD
 deriving ()
instance Prelude.Enum VisRowTags where
  fromEnum v =
    case v of
       VisTagBase -> 130
       VisTagRowVoid -> 180
       VisTagInvalid -> (-1)
       VisTagComponent -> 137
       VisTagMoveTo -> 138
       VisTagLineTo -> 139
       VisTagArcTo -> 140
       VisTagEllipticalArcTo -> 144
       VisTagSplineBeg -> 165
       VisTagSplineSpan -> 166
       VisTagTab0 -> 136
       VisTagTab2 -> 150
       VisTagTab10 -> 151
       VisTagCtlPt -> 162
       VisTagCtlPtTip -> 170
       VisTagCnnctPt -> 153
       VisTagCnnctNamed -> 185
       VisTagCnnctPtABCD -> 186
       VisTagCnnctNamedABCD -> 187
  
  toEnum v =
    case v of
       130 -> VisTagBase
       180 -> VisTagRowVoid
       (-1) -> VisTagInvalid
       137 -> VisTagComponent
       138 -> VisTagMoveTo
       139 -> VisTagLineTo
       140 -> VisTagArcTo
       144 -> VisTagEllipticalArcTo
       165 -> VisTagSplineBeg
       166 -> VisTagSplineSpan
       136 -> VisTagTab0
       150 -> VisTagTab2
       151 -> VisTagTab10
       162 -> VisTagCtlPt
       170 -> VisTagCtlPtTip
       153 -> VisTagCnnctPt
       185 -> VisTagCnnctNamed
       186 -> VisTagCnnctPtABCD
       187 -> VisTagCnnctNamedABCD
       _ -> Prelude.error "unmarshallVisRowTags: illegal enum value "
  
data VisRowIndices
 = VisRowFirst
 | VisRowLast
 | VisRowNone
 | VisRowXFormOut
 | VisRowXFormIn
 | VisRowLine
 | VisRowFill
 | VisRowXForm1D
 | VisRowEvent
 | VisRowLayerMem
 | VisRowGuide
 | VisRowStyle
 | VisRowForeign
 | VisRowPage
 | VisRowText
 | VisRowTextXForm
 | VisRowAlign
 | VisRowLock
 | VisRowData123
 | VisRowMisc
 | VisRowRulerGrid
 | VisRowHyperlink
 | VisRowComponent
 | VisRowVertex
 | VisRowMember
 | VisRowCharacter
 | VisRowParagraph
 | VisRowTab
 | VisRowScratch
 | VisRowExport
 | VisRowConnectionPts
 | VisRowField
 | VisRowControl
 | VisRowAction
 | VisRowLayer
 | VisRowUser
 | VisRowProp
 | VisRowFormat
 deriving ()
instance Prelude.Enum VisRowIndices where
  fromEnum v =
    case v of
       VisRowFirst -> 0
       VisRowLast -> (-2)
       VisRowNone -> (-1)
       VisRowXFormOut -> 1
       VisRowXFormIn -> 1
       VisRowLine -> 2
       VisRowFill -> 3
       VisRowXForm1D -> 4
       VisRowEvent -> 5
       VisRowLayerMem -> 6
       VisRowGuide -> 7
       VisRowStyle -> 8
       VisRowForeign -> 9
       VisRowPage -> 10
       VisRowText -> 11
       VisRowTextXForm -> 12
       VisRowAlign -> 14
       VisRowLock -> 15
       VisRowData123 -> 16
       VisRowMisc -> 17
       VisRowRulerGrid -> 18
       VisRowHyperlink -> 19
       VisRowComponent -> 0
       VisRowVertex -> 1
       VisRowMember -> 0
       VisRowCharacter -> 0
       VisRowParagraph -> 0
       VisRowTab -> 0
       VisRowScratch -> 0
       VisRowExport -> 0
       VisRowConnectionPts -> 0
       VisRowField -> 0
       VisRowControl -> 0
       VisRowAction -> 0
       VisRowLayer -> 0
       VisRowUser -> 0
       VisRowProp -> 0
       VisRowFormat -> 0
  
  toEnum v =
    case v of
       0 -> VisRowFirst
       (-2) -> VisRowLast
       (-1) -> VisRowNone
       1 -> VisRowXFormOut
       1 -> VisRowXFormIn
       2 -> VisRowLine
       3 -> VisRowFill
       4 -> VisRowXForm1D
       5 -> VisRowEvent
       6 -> VisRowLayerMem
       7 -> VisRowGuide
       8 -> VisRowStyle
       9 -> VisRowForeign
       10 -> VisRowPage
       11 -> VisRowText
       12 -> VisRowTextXForm
       14 -> VisRowAlign
       15 -> VisRowLock
       16 -> VisRowData123
       17 -> VisRowMisc
       18 -> VisRowRulerGrid
       19 -> VisRowHyperlink
       0 -> VisRowComponent
       1 -> VisRowVertex
       0 -> VisRowMember
       0 -> VisRowCharacter
       0 -> VisRowParagraph
       0 -> VisRowTab
       0 -> VisRowScratch
       0 -> VisRowExport
       0 -> VisRowConnectionPts
       0 -> VisRowField
       0 -> VisRowControl
       0 -> VisRowAction
       0 -> VisRowLayer
       0 -> VisRowUser
       0 -> VisRowProp
       0 -> VisRowFormat
       _ -> Prelude.error "unmarshallVisRowIndices: illegal enum value "
  
data VisRoundFlags
 = VisTruncate
 | VisRound
 deriving ()
instance Prelude.Enum VisRoundFlags where
  fromEnum v =
    case v of
       VisTruncate -> 0
       VisRound -> 1
  
  toEnum v =
    case v of
       0 -> VisTruncate
       1 -> VisRound
       _ -> Prelude.error "unmarshallVisRoundFlags: illegal enum value "
  
data VisOpenSaveArgs
 = VisOpenCopy
 | VisOpenRO
 | VisOpenDocked
 | VisOpenDontList
 | VisSaveAsRO
 | VisSaveAsWS
 | VisSavePrevNone
 | VisSavePrevDraft1st
 | VisSavePrevDetailed1st
 | VisSavePrevDraftAll
 | VisSavePrevDetailedAll
 deriving ()
instance Prelude.Enum VisOpenSaveArgs where
  fromEnum v =
    case v of
       VisOpenCopy -> 1
       VisOpenRO -> 2
       VisOpenDocked -> 4
       VisOpenDontList -> 8
       VisSaveAsRO -> 1
       VisSaveAsWS -> 2
       VisSavePrevNone -> 0
       VisSavePrevDraft1st -> 1
       VisSavePrevDetailed1st -> 2
       VisSavePrevDraftAll -> 4
       VisSavePrevDetailedAll -> 8
  
  toEnum v =
    case v of
       1 -> VisOpenCopy
       2 -> VisOpenRO
       4 -> VisOpenDocked
       8 -> VisOpenDontList
       1 -> VisSaveAsRO
       2 -> VisSaveAsWS
       0 -> VisSavePrevNone
       1 -> VisSavePrevDraft1st
       2 -> VisSavePrevDetailed1st
       4 -> VisSavePrevDraftAll
       8 -> VisSavePrevDetailedAll
       _ -> Prelude.error "unmarshallVisOpenSaveArgs: illegal enum value "
  
data VisObjectTypes
 = VisObjTypeUnknown
 | VisObjTypeApp
 | VisObjTypeCell
 | VisObjTypeChars
 | VisObjTypeConnect
 | VisObjTypeConnects
 | VisObjTypeDoc
 | VisObjTypeDocs
 | VisObjTypeMaster
 | VisObjTypeMasters
 | VisObjTypePage
 | VisObjTypePages
 | VisObjTypeSelection
 | VisObjTypeShape
 | VisObjTypeShapes
 | VisObjTypeStyle
 | VisObjTypeStyles
 | VisObjTypeWindow
 | VisObjTypeWindows
 | VisObjTypeLayer
 | VisObjTypeLayers
 | VisObjTypeFont
 | VisObjTypeFonts
 | VisObjTypeColor
 | VisObjTypeColors
 | VisObjTypeAddon
 | VisObjTypeAddons
 | VisObjTypeEvent
 | VisObjTypeEventList
 | VisObjTypeGlobal
 | VisObjTypeHyperlink
 | VisObjTypeOLEObjects
 | VisObjTypeOLEObject
 | VisObjTypePaths
 | VisObjTypePath
 | VisObjTypeCurve
 deriving ()
instance Prelude.Enum VisObjectTypes where
  fromEnum v =
    case v of
       VisObjTypeUnknown -> 1
       VisObjTypeApp -> 3
       VisObjTypeCell -> 4
       VisObjTypeChars -> 5
       VisObjTypeConnect -> 8
       VisObjTypeConnects -> 9
       VisObjTypeDoc -> 10
       VisObjTypeDocs -> 11
       VisObjTypeMaster -> 12
       VisObjTypeMasters -> 13
       VisObjTypePage -> 14
       VisObjTypePages -> 15
       VisObjTypeSelection -> 16
       VisObjTypeShape -> 17
       VisObjTypeShapes -> 18
       VisObjTypeStyle -> 19
       VisObjTypeStyles -> 20
       VisObjTypeWindow -> 21
       VisObjTypeWindows -> 22
       VisObjTypeLayer -> 25
       VisObjTypeLayers -> 26
       VisObjTypeFont -> 27
       VisObjTypeFonts -> 28
       VisObjTypeColor -> 29
       VisObjTypeColors -> 30
       VisObjTypeAddon -> 31
       VisObjTypeAddons -> 32
       VisObjTypeEvent -> 33
       VisObjTypeEventList -> 34
       VisObjTypeGlobal -> 36
       VisObjTypeHyperlink -> 37
       VisObjTypeOLEObjects -> 38
       VisObjTypeOLEObject -> 39
       VisObjTypePaths -> 40
       VisObjTypePath -> 41
       VisObjTypeCurve -> 42
  
  toEnum v =
    case v of
       1 -> VisObjTypeUnknown
       3 -> VisObjTypeApp
       4 -> VisObjTypeCell
       5 -> VisObjTypeChars
       8 -> VisObjTypeConnect
       9 -> VisObjTypeConnects
       10 -> VisObjTypeDoc
       11 -> VisObjTypeDocs
       12 -> VisObjTypeMaster
       13 -> VisObjTypeMasters
       14 -> VisObjTypePage
       15 -> VisObjTypePages
       16 -> VisObjTypeSelection
       17 -> VisObjTypeShape
       18 -> VisObjTypeShapes
       19 -> VisObjTypeStyle
       20 -> VisObjTypeStyles
       21 -> VisObjTypeWindow
       22 -> VisObjTypeWindows
       25 -> VisObjTypeLayer
       26 -> VisObjTypeLayers
       27 -> VisObjTypeFont
       28 -> VisObjTypeFonts
       29 -> VisObjTypeColor
       30 -> VisObjTypeColors
       31 -> VisObjTypeAddon
       32 -> VisObjTypeAddons
       33 -> VisObjTypeEvent
       34 -> VisObjTypeEventList
       36 -> VisObjTypeGlobal
       37 -> VisObjTypeHyperlink
       38 -> VisObjTypeOLEObjects
       39 -> VisObjTypeOLEObject
       40 -> VisObjTypePaths
       41 -> VisObjTypePath
       42 -> VisObjTypeCurve
       _ -> Prelude.error "unmarshallVisObjectTypes: illegal enum value "
  
data VisMasterProperties
 = VisLeft
 | VisCenter
 | VisRight
 | VisIconFormatVisio
 | VisIconFormatBMP
 | VisNormal
 | VisTall
 | VisWide
 | VisDouble
 | VisAutomatic
 | VisManual
 | VisMasIsLinePat
 | VisMasIsLineEnd
 | VisMasIsFillPat
 | VisMasLPTileDeform
 | VisMasLPTile
 | VisMasLPStretch
 | VisMasLPAnnotate
 | VisMasLPScale
 | VisMasLEDefault
 | VisMasLEUpright
 | VisMasLEScale
 | VisMasFPTile
 | VisMasFPCenter
 | VisMasFPStretch
 | VisMasFPScale
 deriving ()
instance Prelude.Enum VisMasterProperties where
  fromEnum v =
    case v of
       VisLeft -> 1
       VisCenter -> 2
       VisRight -> 3
       VisIconFormatVisio -> 0
       VisIconFormatBMP -> 2
       VisNormal -> 1
       VisTall -> 2
       VisWide -> 3
       VisDouble -> 4
       VisAutomatic -> 1
       VisManual -> 0
       VisMasIsLinePat -> 1
       VisMasIsLineEnd -> 2
       VisMasIsFillPat -> 4
       VisMasLPTileDeform -> 0
       VisMasLPTile -> 16
       VisMasLPStretch -> 32
       VisMasLPAnnotate -> 48
       VisMasLPScale -> 64
       VisMasLEDefault -> 0
       VisMasLEUpright -> 256
       VisMasLEScale -> 1024
       VisMasFPTile -> 0
       VisMasFPCenter -> 4096
       VisMasFPStretch -> 8192
       VisMasFPScale -> 16384
  
  toEnum v =
    case v of
       1 -> VisLeft
       2 -> VisCenter
       3 -> VisRight
       0 -> VisIconFormatVisio
       2 -> VisIconFormatBMP
       1 -> VisNormal
       2 -> VisTall
       3 -> VisWide
       4 -> VisDouble
       1 -> VisAutomatic
       0 -> VisManual
       1 -> VisMasIsLinePat
       2 -> VisMasIsLineEnd
       4 -> VisMasIsFillPat
       0 -> VisMasLPTileDeform
       16 -> VisMasLPTile
       32 -> VisMasLPStretch
       48 -> VisMasLPAnnotate
       64 -> VisMasLPScale
       0 -> VisMasLEDefault
       256 -> VisMasLEUpright
       1024 -> VisMasLEScale
       0 -> VisMasFPTile
       4096 -> VisMasFPCenter
       8192 -> VisMasFPStretch
       16384 -> VisMasFPScale
       _ -> Prelude.error "unmarshallVisMasterProperties: illegal enum value "
  
data VisInsertObjArgs
 = VisInsertLink
 | VisInsertIcon
 | VisInsertDontShow
 | VisInsertAsControl
 | VisInsertAsEmbed
 deriving ()
instance Prelude.Enum VisInsertObjArgs where
  fromEnum v =
    case v of
       VisInsertLink -> 8
       VisInsertIcon -> 16
       VisInsertDontShow -> 4096
       VisInsertAsControl -> 8192
       VisInsertAsEmbed -> 16384
  
  toEnum v =
    case v of
       8 -> VisInsertLink
       16 -> VisInsertIcon
       4096 -> VisInsertDontShow
       8192 -> VisInsertAsControl
       16384 -> VisInsertAsEmbed
       _ -> Prelude.error "unmarshallVisInsertObjArgs: illegal enum value "
  
data VisHitTestResults
 = VisHitOutside
 | VisHitOnBoundary
 | VisHitInside
 deriving ()
instance Prelude.Enum VisHitTestResults where
  fromEnum v =
    case v of
       VisHitOutside -> 0
       VisHitOnBoundary -> 1
       VisHitInside -> 2
  
  toEnum v =
    case v of
       0 -> VisHitOutside
       1 -> VisHitOnBoundary
       2 -> VisHitInside
       _ -> Prelude.error "unmarshallVisHitTestResults: illegal enum value "
  
data VisGuideTypes
 = VisPoint
 | VisHorz
 | VisVert
 deriving ()
instance Prelude.Enum VisGuideTypes where
  fromEnum v =
    case v of
       VisPoint -> 1
       VisHorz -> 2
       VisVert -> 3
  
  toEnum v =
    case v of
       1 -> VisPoint
       2 -> VisHorz
       3 -> VisVert
       _ -> Prelude.error "unmarshallVisGuideTypes: illegal enum value "
  
data VisGetSetArgs
 = VisGetFloats
 | VisGetTruncatedInts
 | VisGetRoundedInts
 | VisGetStrings
 | VisGetFormulas
 | VisSetFormulas
 | VisSetBlastGuards
 | VisSetTestCircular
 deriving ()
instance Prelude.Enum VisGetSetArgs where
  fromEnum v =
    case v of
       VisGetFloats -> 0
       VisGetTruncatedInts -> 1
       VisGetRoundedInts -> 2
       VisGetStrings -> 3
       VisGetFormulas -> 4
       VisSetFormulas -> 1
       VisSetBlastGuards -> 2
       VisSetTestCircular -> 4
  
  toEnum v =
    case v of
       0 -> VisGetFloats
       1 -> VisGetTruncatedInts
       2 -> VisGetRoundedInts
       3 -> VisGetStrings
       4 -> VisGetFormulas
       1 -> VisSetFormulas
       2 -> VisSetBlastGuards
       4 -> VisSetTestCircular
       _ -> Prelude.error "unmarshallVisGetSetArgs: illegal enum value "
  
data VisFromParts
 = VisConnectFromError
 | VisFromNone
 | VisLeftEdge
 | VisCenterEdge
 | VisRightEdge
 | VisBottomEdge
 | VisMiddleEdge
 | VisTopEdge
 | VisBeginX
 | VisBeginY
 | VisBegin
 | VisEndX
 | VisEndY
 | VisEnd
 | VisControlPoint
 deriving ()
instance Prelude.Enum VisFromParts where
  fromEnum v =
    case v of
       VisConnectFromError -> (-1)
       VisFromNone -> 0
       VisLeftEdge -> 1
       VisCenterEdge -> 2
       VisRightEdge -> 3
       VisBottomEdge -> 4
       VisMiddleEdge -> 5
       VisTopEdge -> 6
       VisBeginX -> 7
       VisBeginY -> 8
       VisBegin -> 9
       VisEndX -> 10
       VisEndY -> 11
       VisEnd -> 12
       VisControlPoint -> 100
  
  toEnum v =
    case v of
       (-1) -> VisConnectFromError
       0 -> VisFromNone
       1 -> VisLeftEdge
       2 -> VisCenterEdge
       3 -> VisRightEdge
       4 -> VisBottomEdge
       5 -> VisMiddleEdge
       6 -> VisTopEdge
       7 -> VisBeginX
       8 -> VisBeginY
       9 -> VisBegin
       10 -> VisEndX
       11 -> VisEndY
       12 -> VisEnd
       100 -> VisControlPoint
       _ -> Prelude.error "unmarshallVisFromParts: illegal enum value "
  
data VisFontAttributes
 = VisFontRaster
 | VisFontDevice
 | VisFontScalable
 | VisFont0Alias
 deriving ()
instance Prelude.Enum VisFontAttributes where
  fromEnum v =
    case v of
       VisFontRaster -> 16
       VisFontDevice -> 32
       VisFontScalable -> 64
       VisFont0Alias -> 128
  
  toEnum v =
    case v of
       16 -> VisFontRaster
       32 -> VisFontDevice
       64 -> VisFontScalable
       128 -> VisFont0Alias
       _ -> Prelude.error "unmarshallVisFontAttributes: illegal enum value "
  
data VisFieldFormats
 = VisFmtNumGenNoUnits
 | VisFmtNumGenDefUnits
 | VisFmt0PlNoUnits
 | VisFmt0PlDefUnits
 | VisFmt1PlNoUnits
 | VisFmt1PlDefUnits
 | VisFmt2PlNoUnits
 | VisFmt2PlDefUnits
 | VisFmt3PlNoUnits
 | VisFmt3PlDefUnits
 | VisFmtFeetAndInches
 | VisFmtRadians
 | VisFmtDegrees
 | VisFmtFeetAndInches1Pl
 | VisFmtFeetAndInches2Pl
 | VisFmtFraction1PlNoUnits
 | VisFmtFraction1PlDefUnits
 | VisFmtFraction2PlNoUnits
 | VisFmtFraction2PlDefUnits
 | VisFmtDateShort
 | VisFmtDateLong
 | VisFmtDateMDYY
 | VisFmtDateMMDDYY
 | VisFmtDateMmmDYYYY
 | VisFmtDateMmmmDYYYY
 | VisFmtDateDMYY
 | VisFmtDateDDMMYY
 | VisFmtDateDMMMYYYY
 | VisFmtDateDMMMMYYYY
 | VisFmtTimeGen
 | VisFmtTimeHMM
 | VisFmtTimeHHMM
 | VisFmtTimeHMM24
 | VisFmtTimeHHMM24
 | VisFmtTimeHMMAMPM
 | VisFmtTimeHHMMAMPM
 | VisFmtStrNormal
 | VisFmtStrLower
 | VisFmtStrUpper
 | VisFmtJDategggeXmXdXww
 | VisFmtJDateyyyyXmXdXww
 | VisFmtJDategggeXmXdX
 | VisFmtJDateyyyyXmXdX
 | VisFmtJDateyyyymd
 | VisFmtJDateyymmdd
 | VisFmtJDatehmmaxpx
 | VisFmtJDateaxpxhmm
 | VisFmtJDateaxpxhXmmX
 | VisFmtJDatehXmmX
 | VisFmtCDategggeXmmmmXdddd
 | VisFmtCDateggeXmmmmXdddd
 | VisFmtCDategeXmmmmXdddd
 deriving ()
instance Prelude.Enum VisFieldFormats where
  fromEnum v =
    case v of
       VisFmtNumGenNoUnits -> 0
       VisFmtNumGenDefUnits -> 1
       VisFmt0PlNoUnits -> 2
       VisFmt0PlDefUnits -> 3
       VisFmt1PlNoUnits -> 4
       VisFmt1PlDefUnits -> 5
       VisFmt2PlNoUnits -> 6
       VisFmt2PlDefUnits -> 7
       VisFmt3PlNoUnits -> 8
       VisFmt3PlDefUnits -> 9
       VisFmtFeetAndInches -> 10
       VisFmtRadians -> 11
       VisFmtDegrees -> 12
       VisFmtFeetAndInches1Pl -> 13
       VisFmtFeetAndInches2Pl -> 14
       VisFmtFraction1PlNoUnits -> 15
       VisFmtFraction1PlDefUnits -> 16
       VisFmtFraction2PlNoUnits -> 17
       VisFmtFraction2PlDefUnits -> 18
       VisFmtDateShort -> 20
       VisFmtDateLong -> 21
       VisFmtDateMDYY -> 22
       VisFmtDateMMDDYY -> 23
       VisFmtDateMmmDYYYY -> 24
       VisFmtDateMmmmDYYYY -> 25
       VisFmtDateDMYY -> 26
       VisFmtDateDDMMYY -> 27
       VisFmtDateDMMMYYYY -> 28
       VisFmtDateDMMMMYYYY -> 29
       VisFmtTimeGen -> 30
       VisFmtTimeHMM -> 31
       VisFmtTimeHHMM -> 32
       VisFmtTimeHMM24 -> 33
       VisFmtTimeHHMM24 -> 34
       VisFmtTimeHMMAMPM -> 35
       VisFmtTimeHHMMAMPM -> 36
       VisFmtStrNormal -> 37
       VisFmtStrLower -> 38
       VisFmtStrUpper -> 39
       VisFmtJDategggeXmXdXww -> 40
       VisFmtJDateyyyyXmXdXww -> 41
       VisFmtJDategggeXmXdX -> 42
       VisFmtJDateyyyyXmXdX -> 43
       VisFmtJDateyyyymd -> 44
       VisFmtJDateyymmdd -> 45
       VisFmtJDatehmmaxpx -> 46
       VisFmtJDateaxpxhmm -> 47
       VisFmtJDateaxpxhXmmX -> 48
       VisFmtJDatehXmmX -> 49
       VisFmtCDategggeXmmmmXdddd -> 50
       VisFmtCDateggeXmmmmXdddd -> 51
       VisFmtCDategeXmmmmXdddd -> 52
  
  toEnum v =
    case v of
       0 -> VisFmtNumGenNoUnits
       1 -> VisFmtNumGenDefUnits
       2 -> VisFmt0PlNoUnits
       3 -> VisFmt0PlDefUnits
       4 -> VisFmt1PlNoUnits
       5 -> VisFmt1PlDefUnits
       6 -> VisFmt2PlNoUnits
       7 -> VisFmt2PlDefUnits
       8 -> VisFmt3PlNoUnits
       9 -> VisFmt3PlDefUnits
       10 -> VisFmtFeetAndInches
       11 -> VisFmtRadians
       12 -> VisFmtDegrees
       13 -> VisFmtFeetAndInches1Pl
       14 -> VisFmtFeetAndInches2Pl
       15 -> VisFmtFraction1PlNoUnits
       16 -> VisFmtFraction1PlDefUnits
       17 -> VisFmtFraction2PlNoUnits
       18 -> VisFmtFraction2PlDefUnits
       20 -> VisFmtDateShort
       21 -> VisFmtDateLong
       22 -> VisFmtDateMDYY
       23 -> VisFmtDateMMDDYY
       24 -> VisFmtDateMmmDYYYY
       25 -> VisFmtDateMmmmDYYYY
       26 -> VisFmtDateDMYY
       27 -> VisFmtDateDDMMYY
       28 -> VisFmtDateDMMMYYYY
       29 -> VisFmtDateDMMMMYYYY
       30 -> VisFmtTimeGen
       31 -> VisFmtTimeHMM
       32 -> VisFmtTimeHHMM
       33 -> VisFmtTimeHMM24
       34 -> VisFmtTimeHHMM24
       35 -> VisFmtTimeHMMAMPM
       36 -> VisFmtTimeHHMMAMPM
       37 -> VisFmtStrNormal
       38 -> VisFmtStrLower
       39 -> VisFmtStrUpper
       40 -> VisFmtJDategggeXmXdXww
       41 -> VisFmtJDateyyyyXmXdXww
       42 -> VisFmtJDategggeXmXdX
       43 -> VisFmtJDateyyyyXmXdX
       44 -> VisFmtJDateyyyymd
       45 -> VisFmtJDateyymmdd
       46 -> VisFmtJDatehmmaxpx
       47 -> VisFmtJDateaxpxhmm
       48 -> VisFmtJDateaxpxhXmmX
       49 -> VisFmtJDatehXmmX
       50 -> VisFmtCDategggeXmmmmXdddd
       51 -> VisFmtCDateggeXmmmmXdddd
       52 -> VisFmtCDategeXmmmmXdddd
       _ -> Prelude.error "unmarshallVisFieldFormats: illegal enum value "
  
data VisFieldCodes
 = VisFCodeCreateDate
 | VisFCodeCreateTime
 | VisFCodeCurrentDate
 | VisFCodeCurrentTime
 | VisFCodeEditDate
 | VisFCodeEditTime
 | VisFCodePrintDate
 | VisFCodePrintTime
 | VisFCodeCreator
 | VisFCodeDescription
 | VisFCodeDirectory
 | VisFCodeFileName
 | VisFCodeKeyWords
 | VisFCodeSubject
 | VisFCodeTitle
 | VisFCodeManager
 | VisFCodeCompany
 | VisFCodeCategory
 | VisFCodeHyperlinkBase
 | VisFCodeWidth
 | VisFCodeHeight
 | VisFCodeAngle
 | VisFCodeData1
 | VisFCodeData2
 | VisFCodeData3
 | VisFCodeObjectID
 | VisFCodeMasterName
 | VisFCodeObjectName
 | VisFCodeObjectType
 | VisFCodeBackgroundName
 | VisFCodePageName
 | VisFCodeNumberOfPages
 | VisFCodePageNumber
 deriving ()
instance Prelude.Enum VisFieldCodes where
  fromEnum v =
    case v of
       VisFCodeCreateDate -> 0
       VisFCodeCreateTime -> 1
       VisFCodeCurrentDate -> 2
       VisFCodeCurrentTime -> 3
       VisFCodeEditDate -> 4
       VisFCodeEditTime -> 5
       VisFCodePrintDate -> 6
       VisFCodePrintTime -> 7
       VisFCodeCreator -> 0
       VisFCodeDescription -> 1
       VisFCodeDirectory -> 2
       VisFCodeFileName -> 3
       VisFCodeKeyWords -> 4
       VisFCodeSubject -> 5
       VisFCodeTitle -> 6
       VisFCodeManager -> 7
       VisFCodeCompany -> 8
       VisFCodeCategory -> 9
       VisFCodeHyperlinkBase -> 10
       VisFCodeWidth -> 0
       VisFCodeHeight -> 1
       VisFCodeAngle -> 2
       VisFCodeData1 -> 0
       VisFCodeData2 -> 1
       VisFCodeData3 -> 2
       VisFCodeObjectID -> 3
       VisFCodeMasterName -> 4
       VisFCodeObjectName -> 5
       VisFCodeObjectType -> 6
       VisFCodeBackgroundName -> 0
       VisFCodePageName -> 1
       VisFCodeNumberOfPages -> 2
       VisFCodePageNumber -> 3
  
  toEnum v =
    case v of
       0 -> VisFCodeCreateDate
       1 -> VisFCodeCreateTime
       2 -> VisFCodeCurrentDate
       3 -> VisFCodeCurrentTime
       4 -> VisFCodeEditDate
       5 -> VisFCodeEditTime
       6 -> VisFCodePrintDate
       7 -> VisFCodePrintTime
       0 -> VisFCodeCreator
       1 -> VisFCodeDescription
       2 -> VisFCodeDirectory
       3 -> VisFCodeFileName
       4 -> VisFCodeKeyWords
       5 -> VisFCodeSubject
       6 -> VisFCodeTitle
       7 -> VisFCodeManager
       8 -> VisFCodeCompany
       9 -> VisFCodeCategory
       10 -> VisFCodeHyperlinkBase
       0 -> VisFCodeWidth
       1 -> VisFCodeHeight
       2 -> VisFCodeAngle
       0 -> VisFCodeData1
       1 -> VisFCodeData2
       2 -> VisFCodeData3
       3 -> VisFCodeObjectID
       4 -> VisFCodeMasterName
       5 -> VisFCodeObjectName
       6 -> VisFCodeObjectType
       0 -> VisFCodeBackgroundName
       1 -> VisFCodePageName
       2 -> VisFCodeNumberOfPages
       3 -> VisFCodePageNumber
       _ -> Prelude.error "unmarshallVisFieldCodes: illegal enum value "
  
data VisFieldCategories
 = VisFCatCustom
 | VisFCatDateTime
 | VisFCatDocument
 | VisFCatGeometry
 | VisFCatObject
 | VisFCatPage
 | VisFCatNotes
 deriving ()
instance Prelude.Enum VisFieldCategories where
  fromEnum v =
    case v of
       VisFCatCustom -> 0
       VisFCatDateTime -> 1
       VisFCatDocument -> 2
       VisFCatGeometry -> 3
       VisFCatObject -> 4
       VisFCatPage -> 5
       VisFCatNotes -> 6
  
  toEnum v =
    case v of
       0 -> VisFCatCustom
       1 -> VisFCatDateTime
       2 -> VisFCatDocument
       3 -> VisFCatGeometry
       4 -> VisFCatObject
       5 -> VisFCatPage
       6 -> VisFCatNotes
       _ -> Prelude.error "unmarshallVisFieldCategories: illegal enum value "
  
data VisExistsFlags
 = VisExistsLocally
 | VisExistsAnywhere
 deriving ()
instance Prelude.Enum VisExistsFlags where
  fromEnum v =
    case v of
       VisExistsLocally -> 1
       VisExistsAnywhere -> 0
  
  toEnum v =
    case v of
       1 -> VisExistsLocally
       0 -> VisExistsAnywhere
       _ -> Prelude.error "unmarshallVisExistsFlags: illegal enum value "
  
data VisEventCodes
 = VisEvtIDInval
 | VisEvtCodeInval
 | VisEvtCodeDocCreate
 | VisEvtCodeDocOpen
 | VisEvtCodeDocSave
 | VisEvtCodeDocSaveAs
 | VisEvtCodeDocRunning
 | VisEvtCodeDocDesign
 | VisEvtCodeBefDocSave
 | VisEvtCodeBefDocSaveAs
 | VisEvtCodeBefForcedFlush
 | VisEvtCodeAfterForcedFlush
 | VisEvtCodeWinSelChange
 | VisEvtCodeBefWinSelDel
 | VisEvtCodeBefWinPageTurn
 | VisEvtCodeWinPageTurn
 | VisEvtCodeShapeDelete
 | VisEvtCodeBefSelDel
 | VisEvtCodeSelAdded
 | VisEvtAdd
 | VisEvtDel
 | VisEvtMod
 | VisEvtWindow
 | VisEvtDoc
 | VisEvtStyle
 | VisEvtMaster
 | VisEvtPage
 | VisEvtLayer
 | VisEvtShape
 | VisEvtText
 | VisEvtConnect
 | VisEvtSection
 | VisEvtRow
 | VisEvtCell
 | VisEvtFormula
 | VisEvtApp
 | VisEvtAppActivate
 | VisEvtAppDeactivate
 | VisEvtObjActivate
 | VisEvtObjDeactivate
 | VisEvtBeforeQuit
 | VisEvtBeforeModal
 | VisEvtAfterModal
 | VisEvtWinActivate
 | VisEvtMarker
 | VisEvtNonePending
 | VisEvtIdle
 | VisEvtCode1stUser
 | VisEvtCodeLastUser
 | VisEvtCodeCreate
 | VisEvtCodeOpen
 | VisActCodeRunAddon
 | VisActCodeAdvise
 | VisEvtIdMostRecent
 deriving ()
instance Prelude.Enum VisEventCodes where
  fromEnum v =
    case v of
       VisEvtIDInval -> (-1)
       VisEvtCodeInval -> 0
       VisEvtCodeDocCreate -> 1
       VisEvtCodeDocOpen -> 2
       VisEvtCodeDocSave -> 3
       VisEvtCodeDocSaveAs -> 4
       VisEvtCodeDocRunning -> 5
       VisEvtCodeDocDesign -> 6
       VisEvtCodeBefDocSave -> 7
       VisEvtCodeBefDocSaveAs -> 8
       VisEvtCodeBefForcedFlush -> 200
       VisEvtCodeAfterForcedFlush -> 201
       VisEvtCodeWinSelChange -> 701
       VisEvtCodeBefWinSelDel -> 702
       VisEvtCodeBefWinPageTurn -> 703
       VisEvtCodeWinPageTurn -> 704
       VisEvtCodeShapeDelete -> 801
       VisEvtCodeBefSelDel -> 901
       VisEvtCodeSelAdded -> 902
       VisEvtAdd -> 32768
       VisEvtDel -> 16384
       VisEvtMod -> 8192
       VisEvtWindow -> 1
       VisEvtDoc -> 2
       VisEvtStyle -> 4
       VisEvtMaster -> 8
       VisEvtPage -> 16
       VisEvtLayer -> 32
       VisEvtShape -> 64
       VisEvtText -> 128
       VisEvtConnect -> 256
       VisEvtSection -> 512
       VisEvtRow -> 1024
       VisEvtCell -> 2048
       VisEvtFormula -> 4096
       VisEvtApp -> 4096
       VisEvtAppActivate -> 1
       VisEvtAppDeactivate -> 2
       VisEvtObjActivate -> 4
       VisEvtObjDeactivate -> 8
       VisEvtBeforeQuit -> 16
       VisEvtBeforeModal -> 32
       VisEvtAfterModal -> 64
       VisEvtWinActivate -> 128
       VisEvtMarker -> 256
       VisEvtNonePending -> 512
       VisEvtIdle -> 1024
       VisEvtCode1stUser -> 28672
       VisEvtCodeLastUser -> 32767
       VisEvtCodeCreate -> 1
       VisEvtCodeOpen -> 2
       VisActCodeRunAddon -> 1
       VisActCodeAdvise -> 2
       VisEvtIdMostRecent -> 0
  
  toEnum v =
    case v of
       (-1) -> VisEvtIDInval
       0 -> VisEvtCodeInval
       1 -> VisEvtCodeDocCreate
       2 -> VisEvtCodeDocOpen
       3 -> VisEvtCodeDocSave
       4 -> VisEvtCodeDocSaveAs
       5 -> VisEvtCodeDocRunning
       6 -> VisEvtCodeDocDesign
       7 -> VisEvtCodeBefDocSave
       8 -> VisEvtCodeBefDocSaveAs
       200 -> VisEvtCodeBefForcedFlush
       201 -> VisEvtCodeAfterForcedFlush
       701 -> VisEvtCodeWinSelChange
       702 -> VisEvtCodeBefWinSelDel
       703 -> VisEvtCodeBefWinPageTurn
       704 -> VisEvtCodeWinPageTurn
       801 -> VisEvtCodeShapeDelete
       901 -> VisEvtCodeBefSelDel
       902 -> VisEvtCodeSelAdded
       32768 -> VisEvtAdd
       16384 -> VisEvtDel
       8192 -> VisEvtMod
       1 -> VisEvtWindow
       2 -> VisEvtDoc
       4 -> VisEvtStyle
       8 -> VisEvtMaster
       16 -> VisEvtPage
       32 -> VisEvtLayer
       64 -> VisEvtShape
       128 -> VisEvtText
       256 -> VisEvtConnect
       512 -> VisEvtSection
       1024 -> VisEvtRow
       2048 -> VisEvtCell
       4096 -> VisEvtFormula
       4096 -> VisEvtApp
       1 -> VisEvtAppActivate
       2 -> VisEvtAppDeactivate
       4 -> VisEvtObjActivate
       8 -> VisEvtObjDeactivate
       16 -> VisEvtBeforeQuit
       32 -> VisEvtBeforeModal
       64 -> VisEvtAfterModal
       128 -> VisEvtWinActivate
       256 -> VisEvtMarker
       512 -> VisEvtNonePending
       1024 -> VisEvtIdle
       28672 -> VisEvtCode1stUser
       32767 -> VisEvtCodeLastUser
       1 -> VisEvtCodeCreate
       2 -> VisEvtCodeOpen
       1 -> VisActCodeRunAddon
       2 -> VisActCodeAdvise
       0 -> VisEvtIdMostRecent
       _ -> Prelude.error "unmarshallVisEventCodes: illegal enum value "
  
data VisDrawSplineFlags
 = VisSplinePeriodic
 | VisSplineDoCircles
 | VisSplineAbrupt
 | VisSpline1D
 deriving ()
instance Prelude.Enum VisDrawSplineFlags where
  fromEnum v =
    case v of
       VisSplinePeriodic -> 1
       VisSplineDoCircles -> 2
       VisSplineAbrupt -> 4
       VisSpline1D -> 8
  
  toEnum v =
    case v of
       1 -> VisSplinePeriodic
       2 -> VisSplineDoCircles
       4 -> VisSplineAbrupt
       8 -> VisSpline1D
       _ -> Prelude.error "unmarshallVisDrawSplineFlags: illegal enum value "
  
data VisDocVersions
 = VisVersionUnsaved
 | VisVersion10
 | VisVersion20
 | VisVersion30
 | VisVersion40
 | VisVersion50
 deriving ()
instance Prelude.Enum VisDocVersions where
  fromEnum v =
    case v of
       VisVersionUnsaved -> 0
       VisVersion10 -> 65571
       VisVersion20 -> 131072
       VisVersion30 -> 196611
       VisVersion40 -> 262144
       VisVersion50 -> 327680
  
  toEnum v =
    case v of
       0 -> VisVersionUnsaved
       65571 -> VisVersion10
       131072 -> VisVersion20
       196611 -> VisVersion30
       262144 -> VisVersion40
       327680 -> VisVersion50
       _ -> Prelude.error "unmarshallVisDocVersions: illegal enum value "
  
data VisDocModeArgs
 = VisDocModeRun
 | VisDocModeDesign
 deriving ()
instance Prelude.Enum VisDocModeArgs where
  fromEnum v =
    case v of
       VisDocModeRun -> 0
       VisDocModeDesign -> 1
  
  toEnum v =
    case v of
       0 -> VisDocModeRun
       1 -> VisDocModeDesign
       _ -> Prelude.error "unmarshallVisDocModeArgs: illegal enum value "
  
data VisDefaultColors
 = VisTransparent
 | VisBlack
 | VisWhite
 | VisRed
 | VisGreen
 | VisBlue
 | VisYellow
 | VisMagenta
 | VisCyan
 | VisDarkRed
 | VisDarkGreen
 | VisDarkBlue
 | VisDarkYellow
 | VisPurple
 | VisDarkCyan
 | VisGray
 | VisGray10
 | VisGray20
 | VisGray30
 | VisGray40
 | VisDarkGray
 | VisGray50
 | VisGray60
 | VisGray70
 | VisGray80
 | VisGray90
 deriving ()
instance Prelude.Enum VisDefaultColors where
  fromEnum v =
    case v of
       VisTransparent -> 0
       VisBlack -> 0
       VisWhite -> 1
       VisRed -> 2
       VisGreen -> 3
       VisBlue -> 4
       VisYellow -> 5
       VisMagenta -> 6
       VisCyan -> 7
       VisDarkRed -> 8
       VisDarkGreen -> 9
       VisDarkBlue -> 10
       VisDarkYellow -> 11
       VisPurple -> 12
       VisDarkCyan -> 13
       VisGray -> 14
       VisGray10 -> 15
       VisGray20 -> 16
       VisGray30 -> 17
       VisGray40 -> 18
       VisDarkGray -> 19
       VisGray50 -> 19
       VisGray60 -> 20
       VisGray70 -> 21
       VisGray80 -> 22
       VisGray90 -> 23
  
  toEnum v =
    case v of
       0 -> VisTransparent
       0 -> VisBlack
       1 -> VisWhite
       2 -> VisRed
       3 -> VisGreen
       4 -> VisBlue
       5 -> VisYellow
       6 -> VisMagenta
       7 -> VisCyan
       8 -> VisDarkRed
       9 -> VisDarkGreen
       10 -> VisDarkBlue
       11 -> VisDarkYellow
       12 -> VisPurple
       13 -> VisDarkCyan
       14 -> VisGray
       15 -> VisGray10
       16 -> VisGray20
       17 -> VisGray30
       18 -> VisGray40
       19 -> VisDarkGray
       19 -> VisGray50
       20 -> VisGray60
       21 -> VisGray70
       22 -> VisGray80
       23 -> VisGray90
       _ -> Prelude.error "unmarshallVisDefaultColors: illegal enum value "
  
data VisCharsBias
 = VisBiasLetVisioChoose
 | VisBiasLeft
 | VisBiasRight
 deriving ()
instance Prelude.Enum VisCharsBias where
  fromEnum v =
    case v of
       VisBiasLetVisioChoose -> 0
       VisBiasLeft -> 1
       VisBiasRight -> 2
  
  toEnum v =
    case v of
       0 -> VisBiasLetVisioChoose
       1 -> VisBiasLeft
       2 -> VisBiasRight
       _ -> Prelude.error "unmarshallVisCharsBias: illegal enum value "
  
data VisCellVals
 = VisXFormResizeDontCare
 | VisXFormResizeSpread
 | VisXFormResizeScale
 | VisNoFill
 | VisSolid
 | VisWideUpDiagonal
 | VisWideCross
 | VisWideDiagonalCross
 | VisWideDownDiagonal
 | VisWideHorz
 | VisWideVert
 | VisBackDotsMini
 | VisHalfAndHalf
 | VisForeDotsMini
 | VisForeDotsNarrow
 | VisForeDotsWide
 | VisThickHorz
 | VisThickVertical
 | VisThickDownDiagonal
 | VisThickUpDiagonal
 | VisThickDiagonalCross
 | VisBackDotsWide
 | VisThinHorz
 | VisThinVert
 | VisThinDownDiagonal
 | VisThinUpDiagonal
 | VisThinCross
 | VisThinDiagonalCross
 | VisGuideXActive
 | VisGuideYActive
 | VisPrintSetup
 | VisTight
 | VisStandard
 | VisCustom
 | VisLogical
 | VisDSMetric
 | VisDSEngr
 | VisDSArch
 | VisNoScale
 | VisArchitectural
 | VisEngineering
 | VisScaleCustom
 | VisScaleMetric
 | VisScaleMechanical
 | VisVertTop
 | VisVertMiddle
 | VisVertBottom
 | VisTxtBlkOpaque
 | VisDynFBDefault
 | VisDynFBUCon3Leg
 | VisDynFBUCon5Leg
 | VisGlueTypeDefault
 | VisGlueTypeTrigger
 | VisGlueTypeWalking
 | VisWalkPrefBegNS
 | VisWalkPrefEndNS
 | VisLOFlagsVisDecides
 | VisLOFlagsPlacable
 | VisLOFlagsRoutable
 | VisLOFlagsDont
 | VisLOFlagsPNRGroup
 | VisLOIPlaceNormal
 | VisLOIRouteNormal
 | VisLOBPlaceNormal
 | VisLOBRouteNormal
 | VisLOBRouteRightAng
 | VisLOBRouteStraight
 | VisLOBRouteFlowNS
 | VisLOBRouteFlowWE
 | VisLOBRouteTreeNS
 | VisLOBRouteTreeWE
 | VisRulerFine
 | VisRulerNormal
 | VisRulerCoarse
 | VisRulerFixed
 | VisGridFine
 | VisGridNormal
 | VisGridCoarse
 | VisGridFixed
 | VisBold
 | VisItalic
 | VisUnderLine
 | VisSmallCaps
 | VisCaseNormal
 | VisCaseAllCaps
 | VisCaseInitialCaps
 | VisPosNormal
 | VisPosSuper
 | VisPosSub
 | VisHorzLeft
 | VisHorzCenter
 | VisHorzRight
 | VisHorzJustify
 | VisHorzForce
 | VisTabStopLeft
 | VisTabStopCenter
 | VisTabStopRight
 | VisTabStopDecimal
 | VisTabStopComma
 | VisCtlProportional
 | VisCtlLocked
 | VisCtlOffsetMin
 | VisCtlOffsetMid
 | VisCtlOffsetMax
 | VisCtlProportionalHidden
 | VisCtlLockedHidden
 | VisCtlOffsetMinHidden
 | VisCtlOffsetMidHidden
 | VisCtlOffsetMaxHidden
 | VisNoLayerColor
 | VisLayerValid
 | VisLayerDeleted
 | VisLayerAvailable
 | VisPropTypeString
 | VisPropTypeListFix
 | VisPropTypeNumber
 | VisPropTypeBool
 | VisPropTypeListVar
 deriving ()
instance Prelude.Enum VisCellVals where
  fromEnum v =
    case v of
       VisXFormResizeDontCare -> 0
       VisXFormResizeSpread -> 1
       VisXFormResizeScale -> 2
       VisNoFill -> 0
       VisSolid -> 1
       VisWideUpDiagonal -> 2
       VisWideCross -> 3
       VisWideDiagonalCross -> 4
       VisWideDownDiagonal -> 5
       VisWideHorz -> 6
       VisWideVert -> 7
       VisBackDotsMini -> 8
       VisHalfAndHalf -> 9
       VisForeDotsMini -> 10
       VisForeDotsNarrow -> 11
       VisForeDotsWide -> 12
       VisThickHorz -> 13
       VisThickVertical -> 14
       VisThickDownDiagonal -> 15
       VisThickUpDiagonal -> 16
       VisThickDiagonalCross -> 17
       VisBackDotsWide -> 18
       VisThinHorz -> 19
       VisThinVert -> 20
       VisThinDownDiagonal -> 21
       VisThinUpDiagonal -> 22
       VisThinCross -> 23
       VisThinDiagonalCross -> 24
       VisGuideXActive -> 1024
       VisGuideYActive -> 2048
       VisPrintSetup -> 0
       VisTight -> 1
       VisStandard -> 2
       VisCustom -> 3
       VisLogical -> 4
       VisDSMetric -> 5
       VisDSEngr -> 6
       VisDSArch -> 7
       VisNoScale -> 0
       VisArchitectural -> 1
       VisEngineering -> 2
       VisScaleCustom -> 3
       VisScaleMetric -> 4
       VisScaleMechanical -> 5
       VisVertTop -> 0
       VisVertMiddle -> 1
       VisVertBottom -> 2
       VisTxtBlkOpaque -> 255
       VisDynFBDefault -> 0
       VisDynFBUCon3Leg -> 1
       VisDynFBUCon5Leg -> 2
       VisGlueTypeDefault -> 0
       VisGlueTypeTrigger -> 1
       VisGlueTypeWalking -> 2
       VisWalkPrefBegNS -> 1
       VisWalkPrefEndNS -> 2
       VisLOFlagsVisDecides -> 0
       VisLOFlagsPlacable -> 1
       VisLOFlagsRoutable -> 2
       VisLOFlagsDont -> 4
       VisLOFlagsPNRGroup -> 8
       VisLOIPlaceNormal -> 0
       VisLOIRouteNormal -> 0
       VisLOBPlaceNormal -> 0
       VisLOBRouteNormal -> 0
       VisLOBRouteRightAng -> 1
       VisLOBRouteStraight -> 2
       VisLOBRouteFlowNS -> 5
       VisLOBRouteFlowWE -> 6
       VisLOBRouteTreeNS -> 7
       VisLOBRouteTreeWE -> 8
       VisRulerFine -> 32
       VisRulerNormal -> 16
       VisRulerCoarse -> 8
       VisRulerFixed -> 0
       VisGridFine -> 8
       VisGridNormal -> 4
       VisGridCoarse -> 2
       VisGridFixed -> 0
       VisBold -> 1
       VisItalic -> 2
       VisUnderLine -> 4
       VisSmallCaps -> 8
       VisCaseNormal -> 0
       VisCaseAllCaps -> 1
       VisCaseInitialCaps -> 2
       VisPosNormal -> 0
       VisPosSuper -> 1
       VisPosSub -> 2
       VisHorzLeft -> 0
       VisHorzCenter -> 1
       VisHorzRight -> 2
       VisHorzJustify -> 3
       VisHorzForce -> 4
       VisTabStopLeft -> 0
       VisTabStopCenter -> 1
       VisTabStopRight -> 2
       VisTabStopDecimal -> 3
       VisTabStopComma -> 4
       VisCtlProportional -> 0
       VisCtlLocked -> 1
       VisCtlOffsetMin -> 2
       VisCtlOffsetMid -> 3
       VisCtlOffsetMax -> 4
       VisCtlProportionalHidden -> 5
       VisCtlLockedHidden -> 6
       VisCtlOffsetMinHidden -> 7
       VisCtlOffsetMidHidden -> 8
       VisCtlOffsetMaxHidden -> 9
       VisNoLayerColor -> 255
       VisLayerValid -> 0
       VisLayerDeleted -> 1
       VisLayerAvailable -> 2
       VisPropTypeString -> 0
       VisPropTypeListFix -> 1
       VisPropTypeNumber -> 2
       VisPropTypeBool -> 3
       VisPropTypeListVar -> 4
  
  toEnum v =
    case v of
       0 -> VisXFormResizeDontCare
       1 -> VisXFormResizeSpread
       2 -> VisXFormResizeScale
       0 -> VisNoFill
       1 -> VisSolid
       2 -> VisWideUpDiagonal
       3 -> VisWideCross
       4 -> VisWideDiagonalCross
       5 -> VisWideDownDiagonal
       6 -> VisWideHorz
       7 -> VisWideVert
       8 -> VisBackDotsMini
       9 -> VisHalfAndHalf
       10 -> VisForeDotsMini
       11 -> VisForeDotsNarrow
       12 -> VisForeDotsWide
       13 -> VisThickHorz
       14 -> VisThickVertical
       15 -> VisThickDownDiagonal
       16 -> VisThickUpDiagonal
       17 -> VisThickDiagonalCross
       18 -> VisBackDotsWide
       19 -> VisThinHorz
       20 -> VisThinVert
       21 -> VisThinDownDiagonal
       22 -> VisThinUpDiagonal
       23 -> VisThinCross
       24 -> VisThinDiagonalCross
       1024 -> VisGuideXActive
       2048 -> VisGuideYActive
       0 -> VisPrintSetup
       1 -> VisTight
       2 -> VisStandard
       3 -> VisCustom
       4 -> VisLogical
       5 -> VisDSMetric
       6 -> VisDSEngr
       7 -> VisDSArch
       0 -> VisNoScale
       1 -> VisArchitectural
       2 -> VisEngineering
       3 -> VisScaleCustom
       4 -> VisScaleMetric
       5 -> VisScaleMechanical
       0 -> VisVertTop
       1 -> VisVertMiddle
       2 -> VisVertBottom
       255 -> VisTxtBlkOpaque
       0 -> VisDynFBDefault
       1 -> VisDynFBUCon3Leg
       2 -> VisDynFBUCon5Leg
       0 -> VisGlueTypeDefault
       1 -> VisGlueTypeTrigger
       2 -> VisGlueTypeWalking
       1 -> VisWalkPrefBegNS
       2 -> VisWalkPrefEndNS
       0 -> VisLOFlagsVisDecides
       1 -> VisLOFlagsPlacable
       2 -> VisLOFlagsRoutable
       4 -> VisLOFlagsDont
       8 -> VisLOFlagsPNRGroup
       0 -> VisLOIPlaceNormal
       0 -> VisLOIRouteNormal
       0 -> VisLOBPlaceNormal
       0 -> VisLOBRouteNormal
       1 -> VisLOBRouteRightAng
       2 -> VisLOBRouteStraight
       5 -> VisLOBRouteFlowNS
       6 -> VisLOBRouteFlowWE
       7 -> VisLOBRouteTreeNS
       8 -> VisLOBRouteTreeWE
       32 -> VisRulerFine
       16 -> VisRulerNormal
       8 -> VisRulerCoarse
       0 -> VisRulerFixed
       8 -> VisGridFine
       4 -> VisGridNormal
       2 -> VisGridCoarse
       0 -> VisGridFixed
       1 -> VisBold
       2 -> VisItalic
       4 -> VisUnderLine
       8 -> VisSmallCaps
       0 -> VisCaseNormal
       1 -> VisCaseAllCaps
       2 -> VisCaseInitialCaps
       0 -> VisPosNormal
       1 -> VisPosSuper
       2 -> VisPosSub
       0 -> VisHorzLeft
       1 -> VisHorzCenter
       2 -> VisHorzRight
       3 -> VisHorzJustify
       4 -> VisHorzForce
       0 -> VisTabStopLeft
       1 -> VisTabStopCenter
       2 -> VisTabStopRight
       3 -> VisTabStopDecimal
       4 -> VisTabStopComma
       0 -> VisCtlProportional
       1 -> VisCtlLocked
       2 -> VisCtlOffsetMin
       3 -> VisCtlOffsetMid
       4 -> VisCtlOffsetMax
       5 -> VisCtlProportionalHidden
       6 -> VisCtlLockedHidden
       7 -> VisCtlOffsetMinHidden
       8 -> VisCtlOffsetMidHidden
       9 -> VisCtlOffsetMaxHidden
       255 -> VisNoLayerColor
       0 -> VisLayerValid
       1 -> VisLayerDeleted
       2 -> VisLayerAvailable
       0 -> VisPropTypeString
       1 -> VisPropTypeListFix
       2 -> VisPropTypeNumber
       3 -> VisPropTypeBool
       4 -> VisPropTypeListVar
       _ -> Prelude.error "unmarshallVisCellVals: illegal enum value "
  
data VisCellIndices
 = VisXFormPinX
 | VisXFormPinY
 | VisXFormWidth
 | VisXFormHeight
 | VisXFormLocPinX
 | VisXFormLocPinY
 | VisXFormAngle
 | VisXFormFlipX
 | VisXFormFlipY
 | VisXFormResizeMode
 | VisLineWeight
 | VisLineColor
 | VisLinePattern
 | VisLineRounding
 | VisLineArrowSize
 | VisLineBeginArrow
 | VisLineEndArrow
 | VisLineEndCap
 | VisFillForegnd
 | VisFillBkgnd
 | VisFillPattern
 | VisFillShdwForegnd
 | VisFillShdwBkgnd
 | VisFillShdwPattern
 | Vis1DBeginX
 | Vis1DBeginY
 | Vis1DEndX
 | Vis1DEndY
 | VisEvtCellTheData
 | VisEvtCellTheText
 | VisEvtCellDblClick
 | VisEvtCellXFMod
 | VisEvtCellDrop
 | VisLayerMember
 | VisGuideFlags
 | VisStyleIncludesLine
 | VisStyleIncludesFill
 | VisStyleIncludesText
 | VisFrgnImgOffsetX
 | VisFrgnImgOffsetY
 | VisFrgnImgWidth
 | VisFrgnImgHeight
 | VisPageWidth
 | VisPageHeight
 | VisPageShdwOffsetX
 | VisPageShdwOffsetY
 | VisPageScale
 | VisPageDrawingScale
 | VisPageDrawSizeType
 | VisPageDrawScaleType
 | VisTxtBlkLeftMargin
 | VisTxtBlkRightMargin
 | VisTxtBlkTopMargin
 | VisTxtBlkBottomMargin
 | VisTxtBlkVerticalAlign
 | VisTxtBlkBkgnd
 | VisAlignLeft
 | VisAlignCenter
 | VisAlignRight
 | VisAlignTop
 | VisAlignMiddle
 | VisAlignBottom
 | VisLockWidth
 | VisLockHeight
 | VisLockMoveX
 | VisLockMoveY
 | VisLockAspect
 | VisLockDelete
 | VisLockBegin
 | VisLockEnd
 | VisLockRotate
 | VisLockCrop
 | VisLockVtxEdit
 | VisLockTextEdit
 | VisLockFormat
 | VisLockGroup
 | VisLockCalcWH
 | VisLockSelect
 | VisObjHelp
 | VisCopyRight
 | VisNoObjHandles
 | VisNonPrinting
 | VisNoCtlHandles
 | VisNoAlignBox
 | VisUpdateAlignBox
 | VisHideText
 | VisDynFeedback
 | VisGlueType
 | VisWalkPref
 | VisBegTrigger
 | VisEndTrigger
 | VisLOFlags
 | VisLOInteraction
 | VisLOBehavior
 | VisXRulerDensity
 | VisYRulerDensity
 | VisXRulerOrigin
 | VisYRulerOrigin
 | VisXGridDensity
 | VisYGridDensity
 | VisXGridSpacing
 | VisYGridSpacing
 | VisXGridOrigin
 | VisYGridOrigin
 | VisHLinkDescription
 | VisHLinkAddress
 | VisHLinkSubAddress
 | VisHLinkExtraInfo
 | VisHLinkFrame
 | VisHLinkNewWin
 | VisCompNoFill
 | VisCompNoShow
 | VisX
 | VisY
 | VisBow
 | VisControlX
 | VisControlY
 | VisEccentricityAngle
 | VisAspectRatio
 | VisSplineKnot
 | VisSplineKnot2
 | VisSplineKnot3
 | VisSplineDegree
 | VisFieldCell
 | VisCharacterFont
 | VisCharacterColor
 | VisCharacterStyle
 | VisCharacterCase
 | VisCharacterPos
 | VisCharacterSize
 | VisIndentFirst
 | VisIndentLeft
 | VisIndentRight
 | VisSpaceLine
 | VisSpaceBefore
 | VisSpaceAfter
 | VisHorzAlign
 | VisTabStopCount
 | VisTabPos
 | VisTabAlign
 | VisScratchX
 | VisScratchY
 | VisScratchA
 | VisScratchB
 | VisScratchC
 | VisScratchD
 | VisCnnctA
 | VisCnnctB
 | VisCnnctC
 | VisCnnctD
 | VisCtlX
 | VisCtlY
 | VisCtlXDyn
 | VisCtlYDyn
 | VisCtlXCon
 | VisCtlYCon
 | VisCtlGlue
 | VisCtlType
 | VisCtlTip
 | VisActionMenu
 | VisActionPrompt
 | VisActionHelp
 | VisActionAction
 | VisActionChecked
 | VisActionDisabled
 | VisLayerName
 | VisLayerColor
 | VisLayerStatus
 | VisLayerVisible
 | VisLayerPrint
 | VisLayerActive
 | VisLayerLock
 | VisLayerSnap
 | VisLayerGlue
 | VisUserValue
 | VisUserPrompt
 | VisCustPropsValue
 | VisCustPropsPrompt
 | VisCustPropsLabel
 | VisCustPropsFormat
 | VisCustPropsSortKey
 | VisCustPropsType
 | VisCustPropsInvis
 | VisCustPropsAsk
 deriving ()
instance Prelude.Enum VisCellIndices where
  fromEnum v =
    case v of
       VisXFormPinX -> 0
       VisXFormPinY -> 1
       VisXFormWidth -> 2
       VisXFormHeight -> 3
       VisXFormLocPinX -> 4
       VisXFormLocPinY -> 5
       VisXFormAngle -> 6
       VisXFormFlipX -> 7
       VisXFormFlipY -> 8
       VisXFormResizeMode -> 9
       VisLineWeight -> 0
       VisLineColor -> 1
       VisLinePattern -> 2
       VisLineRounding -> 3
       VisLineArrowSize -> 4
       VisLineBeginArrow -> 5
       VisLineEndArrow -> 6
       VisLineEndCap -> 7
       VisFillForegnd -> 0
       VisFillBkgnd -> 1
       VisFillPattern -> 2
       VisFillShdwForegnd -> 3
       VisFillShdwBkgnd -> 4
       VisFillShdwPattern -> 5
       Vis1DBeginX -> 0
       Vis1DBeginY -> 1
       Vis1DEndX -> 2
       Vis1DEndY -> 3
       VisEvtCellTheData -> 0
       VisEvtCellTheText -> 1
       VisEvtCellDblClick -> 2
       VisEvtCellXFMod -> 3
       VisEvtCellDrop -> 4
       VisLayerMember -> 0
       VisGuideFlags -> 2
       VisStyleIncludesLine -> 0
       VisStyleIncludesFill -> 1
       VisStyleIncludesText -> 2
       VisFrgnImgOffsetX -> 0
       VisFrgnImgOffsetY -> 1
       VisFrgnImgWidth -> 2
       VisFrgnImgHeight -> 3
       VisPageWidth -> 0
       VisPageHeight -> 1
       VisPageShdwOffsetX -> 2
       VisPageShdwOffsetY -> 3
       VisPageScale -> 4
       VisPageDrawingScale -> 5
       VisPageDrawSizeType -> 6
       VisPageDrawScaleType -> 7
       VisTxtBlkLeftMargin -> 0
       VisTxtBlkRightMargin -> 1
       VisTxtBlkTopMargin -> 2
       VisTxtBlkBottomMargin -> 3
       VisTxtBlkVerticalAlign -> 4
       VisTxtBlkBkgnd -> 5
       VisAlignLeft -> 0
       VisAlignCenter -> 1
       VisAlignRight -> 2
       VisAlignTop -> 3
       VisAlignMiddle -> 4
       VisAlignBottom -> 5
       VisLockWidth -> 0
       VisLockHeight -> 1
       VisLockMoveX -> 2
       VisLockMoveY -> 3
       VisLockAspect -> 4
       VisLockDelete -> 5
       VisLockBegin -> 6
       VisLockEnd -> 7
       VisLockRotate -> 8
       VisLockCrop -> 9
       VisLockVtxEdit -> 10
       VisLockTextEdit -> 11
       VisLockFormat -> 12
       VisLockGroup -> 13
       VisLockCalcWH -> 14
       VisLockSelect -> 15
       VisObjHelp -> 0
       VisCopyRight -> 1
       VisNoObjHandles -> 0
       VisNonPrinting -> 1
       VisNoCtlHandles -> 2
       VisNoAlignBox -> 3
       VisUpdateAlignBox -> 4
       VisHideText -> 5
       VisDynFeedback -> 8
       VisGlueType -> 9
       VisWalkPref -> 10
       VisBegTrigger -> 11
       VisEndTrigger -> 12
       VisLOFlags -> 13
       VisLOInteraction -> 14
       VisLOBehavior -> 15
       VisXRulerDensity -> 0
       VisYRulerDensity -> 1
       VisXRulerOrigin -> 4
       VisYRulerOrigin -> 5
       VisXGridDensity -> 6
       VisYGridDensity -> 7
       VisXGridSpacing -> 8
       VisYGridSpacing -> 9
       VisXGridOrigin -> 10
       VisYGridOrigin -> 11
       VisHLinkDescription -> 0
       VisHLinkAddress -> 1
       VisHLinkSubAddress -> 2
       VisHLinkExtraInfo -> 3
       VisHLinkFrame -> 4
       VisHLinkNewWin -> 5
       VisCompNoFill -> 0
       VisCompNoShow -> 2
       VisX -> 0
       VisY -> 1
       VisBow -> 2
       VisControlX -> 2
       VisControlY -> 3
       VisEccentricityAngle -> 4
       VisAspectRatio -> 5
       VisSplineKnot -> 2
       VisSplineKnot2 -> 3
       VisSplineKnot3 -> 4
       VisSplineDegree -> 5
       VisFieldCell -> 0
       VisCharacterFont -> 0
       VisCharacterColor -> 1
       VisCharacterStyle -> 2
       VisCharacterCase -> 3
       VisCharacterPos -> 4
       VisCharacterSize -> 7
       VisIndentFirst -> 0
       VisIndentLeft -> 1
       VisIndentRight -> 2
       VisSpaceLine -> 3
       VisSpaceBefore -> 4
       VisSpaceAfter -> 5
       VisHorzAlign -> 6
       VisTabStopCount -> 0
       VisTabPos -> 1
       VisTabAlign -> 2
       VisScratchX -> 0
       VisScratchY -> 1
       VisScratchA -> 2
       VisScratchB -> 3
       VisScratchC -> 4
       VisScratchD -> 5
       VisCnnctA -> 2
       VisCnnctB -> 3
       VisCnnctC -> 4
       VisCnnctD -> 5
       VisCtlX -> 0
       VisCtlY -> 1
       VisCtlXDyn -> 2
       VisCtlYDyn -> 3
       VisCtlXCon -> 4
       VisCtlYCon -> 5
       VisCtlGlue -> 6
       VisCtlType -> 7
       VisCtlTip -> 8
       VisActionMenu -> 0
       VisActionPrompt -> 1
       VisActionHelp -> 2
       VisActionAction -> 3
       VisActionChecked -> 4
       VisActionDisabled -> 5
       VisLayerName -> 0
       VisLayerColor -> 2
       VisLayerStatus -> 3
       VisLayerVisible -> 4
       VisLayerPrint -> 5
       VisLayerActive -> 6
       VisLayerLock -> 7
       VisLayerSnap -> 8
       VisLayerGlue -> 9
       VisUserValue -> 0
       VisUserPrompt -> 1
       VisCustPropsValue -> 0
       VisCustPropsPrompt -> 1
       VisCustPropsLabel -> 2
       VisCustPropsFormat -> 3
       VisCustPropsSortKey -> 4
       VisCustPropsType -> 5
       VisCustPropsInvis -> 6
       VisCustPropsAsk -> 7
  
  toEnum v =
    case v of
       0 -> VisXFormPinX
       1 -> VisXFormPinY
       2 -> VisXFormWidth
       3 -> VisXFormHeight
       4 -> VisXFormLocPinX
       5 -> VisXFormLocPinY
       6 -> VisXFormAngle
       7 -> VisXFormFlipX
       8 -> VisXFormFlipY
       9 -> VisXFormResizeMode
       0 -> VisLineWeight
       1 -> VisLineColor
       2 -> VisLinePattern
       3 -> VisLineRounding
       4 -> VisLineArrowSize
       5 -> VisLineBeginArrow
       6 -> VisLineEndArrow
       7 -> VisLineEndCap
       0 -> VisFillForegnd
       1 -> VisFillBkgnd
       2 -> VisFillPattern
       3 -> VisFillShdwForegnd
       4 -> VisFillShdwBkgnd
       5 -> VisFillShdwPattern
       0 -> Vis1DBeginX
       1 -> Vis1DBeginY
       2 -> Vis1DEndX
       3 -> Vis1DEndY
       0 -> VisEvtCellTheData
       1 -> VisEvtCellTheText
       2 -> VisEvtCellDblClick
       3 -> VisEvtCellXFMod
       4 -> VisEvtCellDrop
       0 -> VisLayerMember
       2 -> VisGuideFlags
       0 -> VisStyleIncludesLine
       1 -> VisStyleIncludesFill
       2 -> VisStyleIncludesText
       0 -> VisFrgnImgOffsetX
       1 -> VisFrgnImgOffsetY
       2 -> VisFrgnImgWidth
       3 -> VisFrgnImgHeight
       0 -> VisPageWidth
       1 -> VisPageHeight
       2 -> VisPageShdwOffsetX
       3 -> VisPageShdwOffsetY
       4 -> VisPageScale
       5 -> VisPageDrawingScale
       6 -> VisPageDrawSizeType
       7 -> VisPageDrawScaleType
       0 -> VisTxtBlkLeftMargin
       1 -> VisTxtBlkRightMargin
       2 -> VisTxtBlkTopMargin
       3 -> VisTxtBlkBottomMargin
       4 -> VisTxtBlkVerticalAlign
       5 -> VisTxtBlkBkgnd
       0 -> VisAlignLeft
       1 -> VisAlignCenter
       2 -> VisAlignRight
       3 -> VisAlignTop
       4 -> VisAlignMiddle
       5 -> VisAlignBottom
       0 -> VisLockWidth
       1 -> VisLockHeight
       2 -> VisLockMoveX
       3 -> VisLockMoveY
       4 -> VisLockAspect
       5 -> VisLockDelete
       6 -> VisLockBegin
       7 -> VisLockEnd
       8 -> VisLockRotate
       9 -> VisLockCrop
       10 -> VisLockVtxEdit
       11 -> VisLockTextEdit
       12 -> VisLockFormat
       13 -> VisLockGroup
       14 -> VisLockCalcWH
       15 -> VisLockSelect
       0 -> VisObjHelp
       1 -> VisCopyRight
       0 -> VisNoObjHandles
       1 -> VisNonPrinting
       2 -> VisNoCtlHandles
       3 -> VisNoAlignBox
       4 -> VisUpdateAlignBox
       5 -> VisHideText
       8 -> VisDynFeedback
       9 -> VisGlueType
       10 -> VisWalkPref
       11 -> VisBegTrigger
       12 -> VisEndTrigger
       13 -> VisLOFlags
       14 -> VisLOInteraction
       15 -> VisLOBehavior
       0 -> VisXRulerDensity
       1 -> VisYRulerDensity
       4 -> VisXRulerOrigin
       5 -> VisYRulerOrigin
       6 -> VisXGridDensity
       7 -> VisYGridDensity
       8 -> VisXGridSpacing
       9 -> VisYGridSpacing
       10 -> VisXGridOrigin
       11 -> VisYGridOrigin
       0 -> VisHLinkDescription
       1 -> VisHLinkAddress
       2 -> VisHLinkSubAddress
       3 -> VisHLinkExtraInfo
       4 -> VisHLinkFrame
       5 -> VisHLinkNewWin
       0 -> VisCompNoFill
       2 -> VisCompNoShow
       0 -> VisX
       1 -> VisY
       2 -> VisBow
       2 -> VisControlX
       3 -> VisControlY
       4 -> VisEccentricityAngle
       5 -> VisAspectRatio
       2 -> VisSplineKnot
       3 -> VisSplineKnot2
       4 -> VisSplineKnot3
       5 -> VisSplineDegree
       0 -> VisFieldCell
       0 -> VisCharacterFont
       1 -> VisCharacterColor
       2 -> VisCharacterStyle
       3 -> VisCharacterCase
       4 -> VisCharacterPos
       7 -> VisCharacterSize
       0 -> VisIndentFirst
       1 -> VisIndentLeft
       2 -> VisIndentRight
       3 -> VisSpaceLine
       4 -> VisSpaceBefore
       5 -> VisSpaceAfter
       6 -> VisHorzAlign
       0 -> VisTabStopCount
       1 -> VisTabPos
       2 -> VisTabAlign
       0 -> VisScratchX
       1 -> VisScratchY
       2 -> VisScratchA
       3 -> VisScratchB
       4 -> VisScratchC
       5 -> VisScratchD
       2 -> VisCnnctA
       3 -> VisCnnctB
       4 -> VisCnnctC
       5 -> VisCnnctD
       0 -> VisCtlX
       1 -> VisCtlY
       2 -> VisCtlXDyn
       3 -> VisCtlYDyn
       4 -> VisCtlXCon
       5 -> VisCtlYCon
       6 -> VisCtlGlue
       7 -> VisCtlType
       8 -> VisCtlTip
       0 -> VisActionMenu
       1 -> VisActionPrompt
       2 -> VisActionHelp
       3 -> VisActionAction
       4 -> VisActionChecked
       5 -> VisActionDisabled
       0 -> VisLayerName
       2 -> VisLayerColor
       3 -> VisLayerStatus
       4 -> VisLayerVisible
       5 -> VisLayerPrint
       6 -> VisLayerActive
       7 -> VisLayerLock
       8 -> VisLayerSnap
       9 -> VisLayerGlue
       0 -> VisUserValue
       1 -> VisUserPrompt
       0 -> VisCustPropsValue
       1 -> VisCustPropsPrompt
       2 -> VisCustPropsLabel
       3 -> VisCustPropsFormat
       4 -> VisCustPropsSortKey
       5 -> VisCustPropsType
       6 -> VisCustPropsInvis
       7 -> VisCustPropsAsk
       _ -> Prelude.error "unmarshallVisCellIndices: illegal enum value "
  
data VisCellError
 = VisErrorSuccess
 | VisErrorDivideByZero
 | VisErrorValue
 | VisErrorReference
 | VisErrorName
 | VisErrorNumber
 | VisErrorNotAvailable
 deriving ()
instance Prelude.Enum VisCellError where
  fromEnum v =
    case v of
       VisErrorSuccess -> 0
       VisErrorDivideByZero -> 39
       VisErrorValue -> 47
       VisErrorReference -> 55
       VisErrorName -> 61
       VisErrorNumber -> 68
       VisErrorNotAvailable -> 74
  
  toEnum v =
    case v of
       0 -> VisErrorSuccess
       39 -> VisErrorDivideByZero
       47 -> VisErrorValue
       55 -> VisErrorReference
       61 -> VisErrorName
       68 -> VisErrorNumber
       74 -> VisErrorNotAvailable
       _ -> Prelude.error "unmarshallVisCellError: illegal enum value "
  
data VisBoundingBoxArgs
 = VisBBoxUprightWH
 | VisBBoxUprightText
 | VisBBoxExtents
 | VisBBoxIncludeGuides
 | VisBBoxDrawingCoords
 | VisBBoxNoNonPrint
 deriving ()
instance Prelude.Enum VisBoundingBoxArgs where
  fromEnum v =
    case v of
       VisBBoxUprightWH -> 1
       VisBBoxUprightText -> 2
       VisBBoxExtents -> 4
       VisBBoxIncludeGuides -> 4096
       VisBBoxDrawingCoords -> 8192
       VisBBoxNoNonPrint -> 16384
  
  toEnum v =
    case v of
       1 -> VisBBoxUprightWH
       2 -> VisBBoxUprightText
       4 -> VisBBoxExtents
       4096 -> VisBBoxIncludeGuides
       8192 -> VisBBoxDrawingCoords
       16384 -> VisBBoxNoNonPrint
       _ -> Prelude.error "unmarshallVisBoundingBoxArgs: illegal enum value "
  
-- --------------------------------------------------
-- 
-- interface IVAmbients
-- 
-- --------------------------------------------------
data IVAmbients_ a = IVAmbients__
                       
type IVAmbients a = Automation.IDispatch (IVAmbients_ a)
iidIVAmbients :: Com.IID (IVAmbients ())
iidIVAmbients = Com.mkIID "{000D0D10-0000-0000-C000-000000000046}"

getBackColorVA :: IVAmbients a
               -> Prelude.IO (Prelude.Int)
getBackColorVA =
  Automation.propertyGet "BackColor"
                         []
                         Automation.outInt

getDisplayNameVA :: IVAmbients a
                 -> Prelude.IO (Prelude.String)
getDisplayNameVA =
  Automation.propertyGet "DisplayName"
                         []
                         Automation.outString

getFontVA :: IVAmbients a
          -> Prelude.IO (Automation.IDispatch ())
getFontVA =
  Automation.propertyGet "Font"
                         []
                         Automation.outIDispatch

getForeColorVA :: IVAmbients a
               -> Prelude.IO (Prelude.Int)
getForeColorVA =
  Automation.propertyGet "ForeColor"
                         []
                         Automation.outInt

getLocaleIDVA :: IVAmbients a
              -> Prelude.IO (Prelude.Int)
getLocaleIDVA =
  Automation.propertyGet "LocaleID"
                         []
                         Automation.outInt

getMessageReflectVA :: IVAmbients a
                    -> Prelude.IO (Prelude.Bool)
getMessageReflectVA =
  Automation.propertyGet "MessageReflect"
                         []
                         Automation.outBool

getScaleUnitsVA :: IVAmbients a
                -> Prelude.IO (Prelude.String)
getScaleUnitsVA =
  Automation.propertyGet "ScaleUnits"
                         []
                         Automation.outString

getTextAlignVA :: IVAmbients a
               -> Prelude.IO (Prelude.Int)
getTextAlignVA =
  Automation.propertyGet "TextAlign"
                         []
                         Automation.outInt

getUserModeVA :: IVAmbients a
              -> Prelude.IO (Prelude.Bool)
getUserModeVA =
  Automation.propertyGet "UserMode"
                         []
                         Automation.outBool

getUIDeadVA :: IVAmbients a
            -> Prelude.IO (Prelude.Bool)
getUIDeadVA =
  Automation.propertyGet "UIDead"
                         []
                         Automation.outBool

getShowGrabHandlesVA :: IVAmbients a
                     -> Prelude.IO (Prelude.Bool)
getShowGrabHandlesVA =
  Automation.propertyGet "ShowGrabHandles"
                         []
                         Automation.outBool

getShowHatchingVA :: IVAmbients a
                  -> Prelude.IO (Prelude.Bool)
getShowHatchingVA =
  Automation.propertyGet "ShowHatching"
                         []
                         Automation.outBool

getDisplayAsDefaultVA :: IVAmbients a
                      -> Prelude.IO (Prelude.Bool)
getDisplayAsDefaultVA =
  Automation.propertyGet "DisplayAsDefault"
                         []
                         Automation.outBool

getSupportsMnemonicsVA :: IVAmbients a
                       -> Prelude.IO (Prelude.Bool)
getSupportsMnemonicsVA =
  Automation.propertyGet "SupportsMnemonics"
                         []
                         Automation.outBool

getAutoClipVA :: IVAmbients a
              -> Prelude.IO (Prelude.Bool)
getAutoClipVA =
  Automation.propertyGet "AutoClip"
                         []
                         Automation.outBool

getAppearanceVA :: IVAmbients a
                -> Prelude.IO (Prelude.Int)
getAppearanceVA =
  Automation.propertyGet "Appearance"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVAccelItem
-- 
-- --------------------------------------------------
data IVAccelItem_ a = IVAccelItem__
                        
type IVAccelItem a = Automation.IDispatch (IVAccelItem_ a)
iidIVAccelItem :: Com.IID (IVAccelItem ())
iidIVAccelItem = Com.mkIID "{000D0292-0000-0000-C000-000000000046}"

delete :: IVAccelItem a
       -> Prelude.IO ()
delete =
  Automation.method0 "Delete"
                     []

getDefaultVAI :: IVAccelItem a
              -> Prelude.IO (Prelude.Int)
getDefaultVAI =
  Automation.propertyGet "Default"
                         []
                         Automation.outInt

setCmdNumVAI :: Prelude.Int
             -> IVAccelItem a
             -> Prelude.IO ()
setCmdNumVAI pwCmd =
  Automation.propertySet "CmdNum"
                         [Automation.inInt pwCmd]

getCmdNumVAI :: IVAccelItem a
             -> Prelude.IO (Prelude.Int)
getCmdNumVAI =
  Automation.propertyGet "CmdNum"
                         []
                         Automation.outInt

setKeyVAI :: Prelude.Int
          -> IVAccelItem a
          -> Prelude.IO ()
setKeyVAI pKey =
  Automation.propertySet "Key"
                         [Automation.inInt pKey]

getKeyVAI :: IVAccelItem a
          -> Prelude.IO (Prelude.Int)
getKeyVAI =
  Automation.propertyGet "Key"
                         []
                         Automation.outInt

setAltVAI :: Prelude.Int
          -> IVAccelItem a
          -> Prelude.IO ()
setAltVAI pAlt =
  Automation.propertySet "Alt"
                         [Automation.inInt pAlt]

getAltVAI :: IVAccelItem a
          -> Prelude.IO (Prelude.Int)
getAltVAI =
  Automation.propertyGet "Alt"
                         []
                         Automation.outInt

setShiftVAI :: Prelude.Int
            -> IVAccelItem a
            -> Prelude.IO ()
setShiftVAI pShift =
  Automation.propertySet "Shift"
                         [Automation.inInt pShift]

getShiftVAI :: IVAccelItem a
            -> Prelude.IO (Prelude.Int)
getShiftVAI =
  Automation.propertyGet "Shift"
                         []
                         Automation.outInt

setControlVAI :: Prelude.Int
              -> IVAccelItem a
              -> Prelude.IO ()
setControlVAI pControl =
  Automation.propertySet "Control"
                         [Automation.inInt pControl]

getControlVAI :: IVAccelItem a
              -> Prelude.IO (Prelude.Int)
getControlVAI =
  Automation.propertyGet "Control"
                         []
                         Automation.outInt

getParentVAI :: IVAccelItem a
             -> Prelude.IO (IVAccelItems ())
getParentVAI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVAccelItems
-- 
-- --------------------------------------------------
data IVAccelItems_ a = IVAccelItems__
                         
type IVAccelItems a = Automation.IDispatch (IVAccelItems_ a)
iidIVAccelItems :: Com.IID (IVAccelItems ())
iidIVAccelItems =
  Com.mkIID "{000D0295-0000-0000-C000-000000000046}"

getNewEnumVAI :: IVAccelItems a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVAI =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVAI :: Prelude.Int
           -> IVAccelItems a
           -> Prelude.IO (IVAccelItem ())
getItemVAI lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

add :: IVAccelItems a
    -> Prelude.IO (IVAccelItem ())
add =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

getCountVAI :: IVAccelItems a
            -> Prelude.IO (Prelude.Int)
getCountVAI =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

parentVAI :: IVAccelItems a
          -> Prelude.IO (IVAccelTable ())
parentVAI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVAccelTable
-- 
-- --------------------------------------------------
data IVAccelTable_ a = IVAccelTable__
                         
type IVAccelTable a = Automation.IDispatch (IVAccelTable_ a)
iidIVAccelTable :: Com.IID (IVAccelTable ())
iidIVAccelTable =
  Com.mkIID "{000D02A2-0000-0000-C000-000000000046}"

deleteVAT :: IVAccelTable a
          -> Prelude.IO ()
deleteVAT =
  Automation.method0 "Delete"
                     []

getDefaultVAT :: IVAccelTable a
              -> Prelude.IO (Prelude.String)
getDefaultVAT =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setTableNameVAT :: Prelude.String
                -> IVAccelTable a
                -> Prelude.IO ()
setTableNameVAT pTableName =
  Automation.propertySet "TableName"
                         [Automation.inString pTableName]

getTableNameVAT :: IVAccelTable a
                -> Prelude.IO (Prelude.String)
getTableNameVAT =
  Automation.propertyGet "TableName"
                         []
                         Automation.outString

getSetIDVAT :: IVAccelTable a
            -> Prelude.IO (Prelude.Int)
getSetIDVAT =
  Automation.propertyGet "SetID"
                         []
                         Automation.outInt

getAccelItemsVAT :: IVAccelTable a
                 -> Prelude.IO (IVAccelItems ())
getAccelItemsVAT =
  Automation.propertyGet "AccelItems"
                         []
                         Automation.outIDispatch

getParentVAT :: IVAccelTable a
             -> Prelude.IO (IVAccelTables ())
getParentVAT =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVAccelTables
-- 
-- --------------------------------------------------
data IVAccelTables_ a = IVAccelTables__
                          
type IVAccelTables a = Automation.IDispatch (IVAccelTables_ a)
iidIVAccelTables :: Com.IID (IVAccelTables ())
iidIVAccelTables =
  Com.mkIID "{000D02A5-0000-0000-C000-000000000046}"

getNewEnumVAT :: IVAccelTables a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVAT =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVAT :: Prelude.Int
           -> IVAccelTables a
           -> Prelude.IO (IVAccelTable ())
getItemVAT lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

getItemAtIDVAT :: Prelude.Int
               -> IVAccelTables a
               -> Prelude.IO (IVAccelTable ())
getItemAtIDVAT lID =
  Automation.propertyGet "ItemAtID"
                         [Automation.inInt lID]
                         Automation.outIDispatch

addVAT :: IVAccelTables a
       -> Prelude.IO (IVAccelTable ())
addVAT =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtID :: Prelude.Int
        -> IVAccelTables a
        -> Prelude.IO (IVAccelTable ())
addAtID lID =
  Automation.function1 "AddAtID"
                       [Automation.inInt lID]
                       Automation.outIDispatch

getCountVAT :: IVAccelTables a
            -> Prelude.IO (Prelude.Int)
getCountVAT =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

parentVAT :: IVAccelTables a
          -> Prelude.IO (IVUIObject ())
parentVAT =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVUIObject
-- 
-- --------------------------------------------------
data IVUIObject_ a = IVUIObject__
                       
type IVUIObject a = Automation.IDispatch (IVUIObject_ a)
iidIVUIObject :: Com.IID (IVUIObject ())
iidIVUIObject = Com.mkIID "{000D0202-0000-0000-C000-000000000046}"

deleteVUIO :: IVUIObject a
           -> Prelude.IO ()
deleteVUIO =
  Automation.method0 "Delete"
                     []

getDefaultVUIO :: IVUIObject a
               -> Prelude.IO (Prelude.String)
getDefaultVUIO =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setNameVUIO :: Prelude.String
            -> IVUIObject a
            -> Prelude.IO ()
setNameVUIO pName =
  Automation.propertySet "Name"
                         [Automation.inString pName]

getNameVUIO :: IVUIObject a
            -> Prelude.IO (Prelude.String)
getNameVUIO =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setFlavorVUIO :: Prelude.Int
              -> IVUIObject a
              -> Prelude.IO ()
setFlavorVUIO pFlavor =
  Automation.propertySet "Flavor"
                         [Automation.inInt pFlavor]

getFlavorVUIO :: IVUIObject a
              -> Prelude.IO (Prelude.Int)
getFlavorVUIO =
  Automation.propertyGet "Flavor"
                         []
                         Automation.outInt

getMenuSetsVUIO :: IVUIObject a
                -> Prelude.IO (IVMenuSets ())
getMenuSetsVUIO =
  Automation.propertyGet "MenuSets"
                         []
                         Automation.outIDispatch

getToolbarSetsVUIO :: IVUIObject a
                   -> Prelude.IO (IVToolbarSets ())
getToolbarSetsVUIO =
  Automation.propertyGet "ToolbarSets"
                         []
                         Automation.outIDispatch

getStatusBarsVUIO :: IVUIObject a
                  -> Prelude.IO (IVStatusBars ())
getStatusBarsVUIO =
  Automation.propertyGet "StatusBars"
                         []
                         Automation.outIDispatch

getAccelTablesVUIO :: IVUIObject a
                   -> Prelude.IO (IVAccelTables ())
getAccelTablesVUIO =
  Automation.propertyGet "AccelTables"
                         []
                         Automation.outIDispatch

saveToFile :: Prelude.String
           -> IVUIObject a
           -> Prelude.IO ()
saveToFile fileName =
  Automation.method0 "SaveToFile"
                     [Automation.inString fileName]

loadFromFile :: Prelude.String
             -> IVUIObject a
             -> Prelude.IO ()
loadFromFile fileName =
  Automation.method0 "LoadFromFile"
                     [Automation.inString fileName]

updateUI :: IVUIObject a
         -> Prelude.IO ()
updateUI =
  Automation.method0 "UpdateUI"
                     []

-- --------------------------------------------------
-- 
-- interface IVMenuSets
-- 
-- --------------------------------------------------
data IVMenuSets_ a = IVMenuSets__
                       
type IVMenuSets a = Automation.IDispatch (IVMenuSets_ a)
iidIVMenuSets :: Com.IID (IVMenuSets ())
iidIVMenuSets = Com.mkIID "{000D0236-0000-0000-C000-000000000046}"

getNewEnumVMS :: IVMenuSets a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVMS =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVMS :: Prelude.Int
           -> IVMenuSets a
           -> Prelude.IO (IVMenuSet ())
getItemVMS lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

getItemAtIDVMS :: Prelude.Int
               -> IVMenuSets a
               -> Prelude.IO (IVMenuSet ())
getItemAtIDVMS lID =
  Automation.propertyGet "ItemAtID"
                         [Automation.inInt lID]
                         Automation.outIDispatch

addVMS :: IVMenuSets a
       -> Prelude.IO (IVMenuSet ())
addVMS =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtIDVMS :: Prelude.Int
           -> IVMenuSets a
           -> Prelude.IO (IVMenuSet ())
addAtIDVMS lID =
  Automation.function1 "AddAtID"
                       [Automation.inInt lID]
                       Automation.outIDispatch

getCountVMS :: IVMenuSets a
            -> Prelude.IO (Prelude.Int)
getCountVMS =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVMS :: IVMenuSets a
             -> Prelude.IO (IVUIObject ())
getParentVMS =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenuSet
-- 
-- --------------------------------------------------
data IVMenuSet_ a = IVMenuSet__
                      
type IVMenuSet a = Automation.IDispatch (IVMenuSet_ a)
iidIVMenuSet :: Com.IID (IVMenuSet ())
iidIVMenuSet = Com.mkIID "{000D0232-0000-0000-C000-000000000046}"

deleteVMS :: IVMenuSet a
          -> Prelude.IO ()
deleteVMS =
  Automation.method0 "Delete"
                     []

getDefaultVMS :: IVMenuSet a
              -> Prelude.IO (Prelude.String)
getDefaultVMS =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setCaptionVMS :: Prelude.String
              -> IVMenuSet a
              -> Prelude.IO ()
setCaptionVMS pCaption =
  Automation.propertySet "Caption"
                         [Automation.inString pCaption]

getCaptionVMS :: IVMenuSet a
              -> Prelude.IO (Prelude.String)
getCaptionVMS =
  Automation.propertyGet "Caption"
                         []
                         Automation.outString

getSetIDVMS :: IVMenuSet a
            -> Prelude.IO (Prelude.Int)
getSetIDVMS =
  Automation.propertyGet "SetID"
                         []
                         Automation.outInt

getMenusVMS :: IVMenuSet a
            -> Prelude.IO (IVMenus ())
getMenusVMS =
  Automation.propertyGet "Menus"
                         []
                         Automation.outIDispatch

parentVMS :: IVMenuSet a
          -> Prelude.IO (IVMenuSets ())
parentVMS =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenus
-- 
-- --------------------------------------------------
data IVMenus_ a = IVMenus__
                    
type IVMenus a = Automation.IDispatch (IVMenus_ a)
iidIVMenus :: Com.IID (IVMenus ())
iidIVMenus = Com.mkIID "{000D0225-0000-0000-C000-000000000046}"

getNewEnumVM :: IVMenus a
             -> Prelude.IO (Com.IUnknown ())
getNewEnumVM =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVM :: Prelude.Int
          -> IVMenus a
          -> Prelude.IO (IVMenu ())
getItemVM lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

addVM :: IVMenus a
      -> Prelude.IO (IVMenu ())
addVM =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAt :: Prelude.Int
      -> IVMenus a
      -> Prelude.IO (IVMenu ())
addAt lIndex =
  Automation.function1 "AddAt"
                       [Automation.inInt lIndex]
                       Automation.outIDispatch

getCountVM :: IVMenus a
           -> Prelude.IO (Prelude.Int)
getCountVM =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVM :: IVMenus a
            -> Prelude.IO (IVMenuSet ())
getParentVM =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenu
-- 
-- --------------------------------------------------
data IVMenu_ a = IVMenu__
                   
type IVMenu a = Automation.IDispatch (IVMenu_ a)
iidIVMenu :: Com.IID (IVMenu ())
iidIVMenu = Com.mkIID "{000D0222-0000-0000-C000-000000000046}"

deleteVM :: IVMenu a
         -> Prelude.IO ()
deleteVM =
  Automation.method0 "Delete"
                     []

getDefaultVM :: IVMenu a
             -> Prelude.IO (Prelude.String)
getDefaultVM =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setCaptionVM :: Prelude.String
             -> IVMenu a
             -> Prelude.IO ()
setCaptionVM pCaption =
  Automation.propertySet "Caption"
                         [Automation.inString pCaption]

getCaptionVM :: IVMenu a
             -> Prelude.IO (Prelude.String)
getCaptionVM =
  Automation.propertyGet "Caption"
                         []
                         Automation.outString

getIndexVM :: IVMenu a
           -> Prelude.IO (Prelude.Int)
getIndexVM =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

setMDIWindowMenuVM :: Prelude.Int
                   -> IVMenu a
                   -> Prelude.IO ()
setMDIWindowMenuVM pMDIWindowMenu =
  Automation.propertySet "MDIWindowMenu"
                         [Automation.inInt pMDIWindowMenu]

getMDIWindowMenuVM :: IVMenu a
                   -> Prelude.IO (Prelude.Int)
getMDIWindowMenuVM =
  Automation.propertyGet "MDIWindowMenu"
                         []
                         Automation.outInt

getMenuItemsVM :: IVMenu a
               -> Prelude.IO (IVMenuItems ())
getMenuItemsVM =
  Automation.propertyGet "MenuItems"
                         []
                         Automation.outIDispatch

parentVM :: IVMenu a
         -> Prelude.IO (IVMenus ())
parentVM =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenuItems
-- 
-- --------------------------------------------------
data IVMenuItems_ a = IVMenuItems__
                        
type IVMenuItems a = Automation.IDispatch (IVMenuItems_ a)
iidIVMenuItems :: Com.IID (IVMenuItems ())
iidIVMenuItems = Com.mkIID "{000D0216-0000-0000-C000-000000000046}"

getNewEnumVMI :: IVMenuItems a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVMI =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVMI :: Prelude.Int
           -> IVMenuItems a
           -> Prelude.IO (IVMenuItem ())
getItemVMI lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

addVMI :: IVMenuItems a
       -> Prelude.IO (IVMenuItem ())
addVMI =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtVMI :: Prelude.Int
         -> IVMenuItems a
         -> Prelude.IO (IVMenuItem ())
addAtVMI lIndex =
  Automation.function1 "AddAt"
                       [Automation.inInt lIndex]
                       Automation.outIDispatch

getCountVMI :: IVMenuItems a
            -> Prelude.IO (Prelude.Int)
getCountVMI =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVMI :: IVMenuItems a
             -> Prelude.IO (IVMenu ())
getParentVMI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMenuItem
-- 
-- --------------------------------------------------
data IVMenuItem_ a = IVMenuItem__
                       
type IVMenuItem a = Automation.IDispatch (IVMenuItem_ a)
iidIVMenuItem :: Com.IID (IVMenuItem ())
iidIVMenuItem = Com.mkIID "{000D0212-0000-0000-C000-000000000046}"

deleteVMI :: IVMenuItem a
          -> Prelude.IO ()
deleteVMI =
  Automation.method0 "Delete"
                     []

getDefaultVMI :: IVMenuItem a
              -> Prelude.IO (Prelude.String)
getDefaultVMI =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

getIndexVMI :: IVMenuItem a
            -> Prelude.IO (Prelude.Int)
getIndexVMI =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getMenuItemsVMI :: IVMenuItem a
                -> Prelude.IO (IVMenuItems ())
getMenuItemsVMI =
  Automation.propertyGet "MenuItems"
                         []
                         Automation.outIDispatch

parentVMI :: IVMenuItem a
          -> Prelude.IO (IVMenuItems ())
parentVMI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

setCmdNumVMI :: Prelude.Int
             -> IVMenuItem a
             -> Prelude.IO ()
setCmdNumVMI pwCmd =
  Automation.propertySet "CmdNum"
                         [Automation.inInt pwCmd]

getCmdNumVMI :: IVMenuItem a
             -> Prelude.IO (Prelude.Int)
getCmdNumVMI =
  Automation.propertyGet "CmdNum"
                         []
                         Automation.outInt

setHelpContextIDVMI :: Prelude.Int
                    -> IVMenuItem a
                    -> Prelude.IO ()
setHelpContextIDVMI pHelpContextID =
  Automation.propertySet "HelpContextID"
                         [Automation.inInt pHelpContextID]

getHelpContextIDVMI :: IVMenuItem a
                    -> Prelude.IO (Prelude.Int)
getHelpContextIDVMI =
  Automation.propertyGet "HelpContextID"
                         []
                         Automation.outInt

getIsSeparatorVMI :: IVMenuItem a
                  -> Prelude.IO (Prelude.Int)
getIsSeparatorVMI =
  Automation.propertyGet "IsSeparator"
                         []
                         Automation.outInt

getIsHierarchicalVMI :: IVMenuItem a
                     -> Prelude.IO (Prelude.Int)
getIsHierarchicalVMI =
  Automation.propertyGet "IsHierarchical"
                         []
                         Automation.outInt

setCaptionVMI :: Prelude.String
              -> IVMenuItem a
              -> Prelude.IO ()
setCaptionVMI pCaption =
  Automation.propertySet "Caption"
                         [Automation.inString pCaption]

getCaptionVMI :: IVMenuItem a
              -> Prelude.IO (Prelude.String)
getCaptionVMI =
  Automation.propertyGet "Caption"
                         []
                         Automation.outString

setActionTextVMI :: Prelude.String
                 -> IVMenuItem a
                 -> Prelude.IO ()
setActionTextVMI pActionText =
  Automation.propertySet "ActionText"
                         [Automation.inString pActionText]

getActionTextVMI :: IVMenuItem a
                 -> Prelude.IO (Prelude.String)
getActionTextVMI =
  Automation.propertyGet "ActionText"
                         []
                         Automation.outString

setMiniHelpVMI :: Prelude.String
               -> IVMenuItem a
               -> Prelude.IO ()
setMiniHelpVMI pMiniHelp =
  Automation.propertySet "MiniHelp"
                         [Automation.inString pMiniHelp]

getMiniHelpVMI :: IVMenuItem a
               -> Prelude.IO (Prelude.String)
getMiniHelpVMI =
  Automation.propertyGet "MiniHelp"
                         []
                         Automation.outString

setAddOnNameVMI :: Prelude.String
                -> IVMenuItem a
                -> Prelude.IO ()
setAddOnNameVMI pAddOnName =
  Automation.propertySet "AddOnName"
                         [Automation.inString pAddOnName]

getAddOnNameVMI :: IVMenuItem a
                -> Prelude.IO (Prelude.String)
getAddOnNameVMI =
  Automation.propertyGet "AddOnName"
                         []
                         Automation.outString

setAddOnArgsVMI :: Prelude.String
                -> IVMenuItem a
                -> Prelude.IO ()
setAddOnArgsVMI pAddOnArgs =
  Automation.propertySet "AddOnArgs"
                         [Automation.inString pAddOnArgs]

getAddOnArgsVMI :: IVMenuItem a
                -> Prelude.IO (Prelude.String)
getAddOnArgsVMI =
  Automation.propertyGet "AddOnArgs"
                         []
                         Automation.outString

setHelpFileVMI :: Prelude.String
               -> IVMenuItem a
               -> Prelude.IO ()
setHelpFileVMI pHelpFile =
  Automation.propertySet "HelpFile"
                         [Automation.inString pHelpFile]

getHelpFileVMI :: IVMenuItem a
               -> Prelude.IO (Prelude.String)
getHelpFileVMI =
  Automation.propertyGet "HelpFile"
                         []
                         Automation.outString

-- --------------------------------------------------
-- 
-- interface IVToolbarSets
-- 
-- --------------------------------------------------
data IVToolbarSets_ a = IVToolbarSets__
                          
type IVToolbarSets a = Automation.IDispatch (IVToolbarSets_ a)
iidIVToolbarSets :: Com.IID (IVToolbarSets ())
iidIVToolbarSets =
  Com.mkIID "{000D0266-0000-0000-C000-000000000046}"

getNewEnumVTS :: IVToolbarSets a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVTS =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVTS :: Prelude.Int
           -> IVToolbarSets a
           -> Prelude.IO (IVToolbarSet ())
getItemVTS lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

getItemAtIDVTS :: Prelude.Int
               -> IVToolbarSets a
               -> Prelude.IO (IVToolbarSet ())
getItemAtIDVTS lID =
  Automation.propertyGet "ItemAtID"
                         [Automation.inInt lID]
                         Automation.outIDispatch

addVTS :: IVToolbarSets a
       -> Prelude.IO (IVToolbarSet ())
addVTS =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtIDVTS :: Prelude.Int
           -> IVToolbarSets a
           -> Prelude.IO (IVToolbarSet ())
addAtIDVTS lID =
  Automation.function1 "AddAtID"
                       [Automation.inInt lID]
                       Automation.outIDispatch

getCountVTS :: IVToolbarSets a
            -> Prelude.IO (Prelude.Int)
getCountVTS =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVTS :: IVToolbarSets a
             -> Prelude.IO (IVUIObject ())
getParentVTS =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbarSet
-- 
-- --------------------------------------------------
data IVToolbarSet_ a = IVToolbarSet__
                         
type IVToolbarSet a = Automation.IDispatch (IVToolbarSet_ a)
iidIVToolbarSet :: Com.IID (IVToolbarSet ())
iidIVToolbarSet =
  Com.mkIID "{000D0262-0000-0000-C000-000000000046}"

deleteVTS :: IVToolbarSet a
          -> Prelude.IO ()
deleteVTS =
  Automation.method0 "Delete"
                     []

getDefaultVTS :: IVToolbarSet a
              -> Prelude.IO (Prelude.String)
getDefaultVTS =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setCaptionVTS :: Prelude.String
              -> IVToolbarSet a
              -> Prelude.IO ()
setCaptionVTS pCaption =
  Automation.propertySet "Caption"
                         [Automation.inString pCaption]

getCaptionVTS :: IVToolbarSet a
              -> Prelude.IO (Prelude.String)
getCaptionVTS =
  Automation.propertyGet "Caption"
                         []
                         Automation.outString

getSetIDVTS :: IVToolbarSet a
            -> Prelude.IO (Prelude.Int)
getSetIDVTS =
  Automation.propertyGet "SetID"
                         []
                         Automation.outInt

getToolbarsVTS :: IVToolbarSet a
               -> Prelude.IO (IVToolbars ())
getToolbarsVTS =
  Automation.propertyGet "Toolbars"
                         []
                         Automation.outIDispatch

parentVTS :: IVToolbarSet a
          -> Prelude.IO (IVToolbarSets ())
parentVTS =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbars
-- 
-- --------------------------------------------------
data IVToolbars_ a = IVToolbars__
                       
type IVToolbars a = Automation.IDispatch (IVToolbars_ a)
iidIVToolbars :: Com.IID (IVToolbars ())
iidIVToolbars = Com.mkIID "{000D0255-0000-0000-C000-000000000046}"

getNewEnumVT :: IVToolbars a
             -> Prelude.IO (Com.IUnknown ())
getNewEnumVT =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVT :: Prelude.Int
          -> IVToolbars a
          -> Prelude.IO (IVToolbar ())
getItemVT lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

addVT :: IVToolbars a
      -> Prelude.IO (IVToolbar ())
addVT =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtVT :: Prelude.Int
        -> IVToolbars a
        -> Prelude.IO (IVToolbar ())
addAtVT lIndex =
  Automation.function1 "AddAt"
                       [Automation.inInt lIndex]
                       Automation.outIDispatch

getCountVT :: IVToolbars a
           -> Prelude.IO (Prelude.Int)
getCountVT =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVT :: IVToolbars a
            -> Prelude.IO (IVToolbarSet ())
getParentVT =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbar
-- 
-- --------------------------------------------------
data IVToolbar_ a = IVToolbar__
                      
type IVToolbar a = Automation.IDispatch (IVToolbar_ a)
iidIVToolbar :: Com.IID (IVToolbar ())
iidIVToolbar = Com.mkIID "{000D0252-0000-0000-C000-000000000046}"

deleteVT :: IVToolbar a
         -> Prelude.IO ()
deleteVT =
  Automation.method0 "Delete"
                     []

getDefaultVT :: IVToolbar a
             -> Prelude.IO (Prelude.String)
getDefaultVT =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setCaptionVT :: Prelude.String
             -> IVToolbar a
             -> Prelude.IO ()
setCaptionVT pCaption =
  Automation.propertySet "Caption"
                         [Automation.inString pCaption]

getCaptionVT :: IVToolbar a
             -> Prelude.IO (Prelude.String)
getCaptionVT =
  Automation.propertyGet "Caption"
                         []
                         Automation.outString

getIndexVT :: IVToolbar a
           -> Prelude.IO (Prelude.Int)
getIndexVT =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getToolbarItemsVT :: IVToolbar a
                  -> Prelude.IO (IVToolbarItems ())
getToolbarItemsVT =
  Automation.propertyGet "ToolbarItems"
                         []
                         Automation.outIDispatch

parentVT :: IVToolbar a
         -> Prelude.IO (IVToolbars ())
parentVT =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbarItems
-- 
-- --------------------------------------------------
data IVToolbarItems_ a = IVToolbarItems__
                           
type IVToolbarItems a = Automation.IDispatch (IVToolbarItems_ a)
iidIVToolbarItems :: Com.IID (IVToolbarItems ())
iidIVToolbarItems =
  Com.mkIID "{000D0245-0000-0000-C000-000000000046}"

getNewEnumVTI :: IVToolbarItems a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVTI =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVTI :: Prelude.Int
           -> IVToolbarItems a
           -> Prelude.IO (IVToolbarItem ())
getItemVTI lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

addVTI :: IVToolbarItems a
       -> Prelude.IO (IVToolbarItem ())
addVTI =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtVTI :: Prelude.Int
         -> IVToolbarItems a
         -> Prelude.IO (IVToolbarItem ())
addAtVTI lIndex =
  Automation.function1 "AddAt"
                       [Automation.inInt lIndex]
                       Automation.outIDispatch

getCountVTI :: IVToolbarItems a
            -> Prelude.IO (Prelude.Int)
getCountVTI =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVTI :: IVToolbarItems a
             -> Prelude.IO (IVToolbar ())
getParentVTI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVToolbarItem
-- 
-- --------------------------------------------------
data IVToolbarItem_ a = IVToolbarItem__
                          
type IVToolbarItem a = Automation.IDispatch (IVToolbarItem_ a)
iidIVToolbarItem :: Com.IID (IVToolbarItem ())
iidIVToolbarItem =
  Com.mkIID "{000D0242-0000-0000-C000-000000000046}"

deleteVTI :: IVToolbarItem a
          -> Prelude.IO ()
deleteVTI =
  Automation.method0 "Delete"
                     []

iconFileName :: Prelude.String
             -> IVToolbarItem a
             -> Prelude.IO ()
iconFileName iconFileName =
  Automation.method0 "IconFileName"
                     [Automation.inString iconFileName]

getDefaultVTI :: IVToolbarItem a
              -> Prelude.IO (Prelude.String)
getDefaultVTI =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

getIndexVTI :: IVToolbarItem a
            -> Prelude.IO (Prelude.Int)
getIndexVTI =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

parentVTI :: IVToolbarItem a
          -> Prelude.IO (IVToolbarItems ())
parentVTI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

setCmdNumVTI :: Prelude.Int
             -> IVToolbarItem a
             -> Prelude.IO ()
setCmdNumVTI pwCmd =
  Automation.propertySet "CmdNum"
                         [Automation.inInt pwCmd]

getCmdNumVTI :: IVToolbarItem a
             -> Prelude.IO (Prelude.Int)
getCmdNumVTI =
  Automation.propertyGet "CmdNum"
                         []
                         Automation.outInt

setHelpContextIDVTI :: Prelude.Int
                    -> IVToolbarItem a
                    -> Prelude.IO ()
setHelpContextIDVTI pHelpContextID =
  Automation.propertySet "HelpContextID"
                         [Automation.inInt pHelpContextID]

getHelpContextIDVTI :: IVToolbarItem a
                    -> Prelude.IO (Prelude.Int)
getHelpContextIDVTI =
  Automation.propertyGet "HelpContextID"
                         []
                         Automation.outInt

setActionTextVTI :: Prelude.String
                 -> IVToolbarItem a
                 -> Prelude.IO ()
setActionTextVTI pActionText =
  Automation.propertySet "ActionText"
                         [Automation.inString pActionText]

getActionTextVTI :: IVToolbarItem a
                 -> Prelude.IO (Prelude.String)
getActionTextVTI =
  Automation.propertyGet "ActionText"
                         []
                         Automation.outString

setAddOnNameVTI :: Prelude.String
                -> IVToolbarItem a
                -> Prelude.IO ()
setAddOnNameVTI pAddOnName =
  Automation.propertySet "AddOnName"
                         [Automation.inString pAddOnName]

getAddOnNameVTI :: IVToolbarItem a
                -> Prelude.IO (Prelude.String)
getAddOnNameVTI =
  Automation.propertyGet "AddOnName"
                         []
                         Automation.outString

setAddOnArgsVTI :: Prelude.String
                -> IVToolbarItem a
                -> Prelude.IO ()
setAddOnArgsVTI pAddOnArgs =
  Automation.propertySet "AddOnArgs"
                         [Automation.inString pAddOnArgs]

getAddOnArgsVTI :: IVToolbarItem a
                -> Prelude.IO (Prelude.String)
getAddOnArgsVTI =
  Automation.propertyGet "AddOnArgs"
                         []
                         Automation.outString

setHelpFileVTI :: Prelude.String
               -> IVToolbarItem a
               -> Prelude.IO ()
setHelpFileVTI pHelpFile =
  Automation.propertySet "HelpFile"
                         [Automation.inString pHelpFile]

getHelpFileVTI :: IVToolbarItem a
               -> Prelude.IO (Prelude.String)
getHelpFileVTI =
  Automation.propertyGet "HelpFile"
                         []
                         Automation.outString

setCntrlTypeVTI :: Prelude.Int
                -> IVToolbarItem a
                -> Prelude.IO ()
setCntrlTypeVTI pwCntrlType =
  Automation.propertySet "CntrlType"
                         [Automation.inInt pwCntrlType]

getCntrlTypeVTI :: IVToolbarItem a
                -> Prelude.IO (Prelude.Int)
getCntrlTypeVTI =
  Automation.propertyGet "CntrlType"
                         []
                         Automation.outInt

setCntrlIDVTI :: Prelude.Int
              -> IVToolbarItem a
              -> Prelude.IO ()
setCntrlIDVTI pwCntrlID =
  Automation.propertySet "CntrlID"
                         [Automation.inInt pwCntrlID]

getCntrlIDVTI :: IVToolbarItem a
              -> Prelude.IO (Prelude.Int)
getCntrlIDVTI =
  Automation.propertyGet "CntrlID"
                         []
                         Automation.outInt

setTypeSpecific1VTI :: Prelude.Int
                    -> IVToolbarItem a
                    -> Prelude.IO ()
setTypeSpecific1VTI pwTypeSpecific =
  Automation.propertySet "TypeSpecific1"
                         [Automation.inInt pwTypeSpecific]

getTypeSpecific1VTI :: IVToolbarItem a
                    -> Prelude.IO (Prelude.Int)
getTypeSpecific1VTI =
  Automation.propertyGet "TypeSpecific1"
                         []
                         Automation.outInt

setPriorityVTI :: Prelude.Int
               -> IVToolbarItem a
               -> Prelude.IO ()
setPriorityVTI pwPriority =
  Automation.propertySet "Priority"
                         [Automation.inInt pwPriority]

getPriorityVTI :: IVToolbarItem a
               -> Prelude.IO (Prelude.Int)
getPriorityVTI =
  Automation.propertyGet "Priority"
                         []
                         Automation.outInt

setSpacingVTI :: Prelude.Int
              -> IVToolbarItem a
              -> Prelude.IO ()
setSpacingVTI pwSpacing =
  Automation.propertySet "Spacing"
                         [Automation.inInt pwSpacing]

getSpacingVTI :: IVToolbarItem a
              -> Prelude.IO (Prelude.Int)
getSpacingVTI =
  Automation.propertyGet "Spacing"
                         []
                         Automation.outInt

setTypeSpecific2VTI :: Prelude.Int
                    -> IVToolbarItem a
                    -> Prelude.IO ()
setTypeSpecific2VTI pwTypeSpecific =
  Automation.propertySet "TypeSpecific2"
                         [Automation.inInt pwTypeSpecific]

getTypeSpecific2VTI :: IVToolbarItem a
                    -> Prelude.IO (Prelude.Int)
getTypeSpecific2VTI =
  Automation.propertyGet "TypeSpecific2"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVStatusBars
-- 
-- --------------------------------------------------
data IVStatusBars_ a = IVStatusBars__
                         
type IVStatusBars a = Automation.IDispatch (IVStatusBars_ a)
iidIVStatusBars :: Com.IID (IVStatusBars ())
iidIVStatusBars =
  Com.mkIID "{000D0285-0000-0000-C000-000000000046}"

getNewEnumVSB :: IVStatusBars a
              -> Prelude.IO (Com.IUnknown ())
getNewEnumVSB =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVSB :: Prelude.Int
           -> IVStatusBars a
           -> Prelude.IO (IVStatusBar ())
getItemVSB lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

getItemAtIDVSB :: Prelude.Int
               -> IVStatusBars a
               -> Prelude.IO (IVStatusBar ())
getItemAtIDVSB lID =
  Automation.propertyGet "ItemAtID"
                         [Automation.inInt lID]
                         Automation.outIDispatch

addVSB :: IVStatusBars a
       -> Prelude.IO (IVStatusBar ())
addVSB =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtIDVSB :: Prelude.Int
           -> IVStatusBars a
           -> Prelude.IO (IVStatusBar ())
addAtIDVSB lID =
  Automation.function1 "AddAtID"
                       [Automation.inInt lID]
                       Automation.outIDispatch

getCountVSB :: IVStatusBars a
            -> Prelude.IO (Prelude.Int)
getCountVSB =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVSB :: IVStatusBars a
             -> Prelude.IO (IVUIObject ())
getParentVSB =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVStatusBar
-- 
-- --------------------------------------------------
data IVStatusBar_ a = IVStatusBar__
                        
type IVStatusBar a = Automation.IDispatch (IVStatusBar_ a)
iidIVStatusBar :: Com.IID (IVStatusBar ())
iidIVStatusBar = Com.mkIID "{000D0282-0000-0000-C000-000000000046}"

deleteVSB :: IVStatusBar a
          -> Prelude.IO ()
deleteVSB =
  Automation.method0 "Delete"
                     []

getDefaultVSB :: IVStatusBar a
              -> Prelude.IO (Prelude.String)
getDefaultVSB =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

setCaptionVSB :: Prelude.String
              -> IVStatusBar a
              -> Prelude.IO ()
setCaptionVSB pCaption =
  Automation.propertySet "Caption"
                         [Automation.inString pCaption]

getCaptionVSB :: IVStatusBar a
              -> Prelude.IO (Prelude.String)
getCaptionVSB =
  Automation.propertyGet "Caption"
                         []
                         Automation.outString

getSetIDVSB :: IVStatusBar a
            -> Prelude.IO (Prelude.Int)
getSetIDVSB =
  Automation.propertyGet "SetID"
                         []
                         Automation.outInt

getStatusBarItemsVSB :: IVStatusBar a
                     -> Prelude.IO (IVStatusBarItems ())
getStatusBarItemsVSB =
  Automation.propertyGet "StatusBarItems"
                         []
                         Automation.outIDispatch

parentVSB :: IVStatusBar a
          -> Prelude.IO (IVStatusBars ())
parentVSB =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVStatusBarItems
-- 
-- --------------------------------------------------
data IVStatusBarItems_ a = IVStatusBarItems__
                             
type IVStatusBarItems a = Automation.IDispatch (IVStatusBarItems_ a)
iidIVStatusBarItems :: Com.IID (IVStatusBarItems ())
iidIVStatusBarItems =
  Com.mkIID "{000D0275-0000-0000-C000-000000000046}"

getNewEnumVSBI :: IVStatusBarItems a
               -> Prelude.IO (Com.IUnknown ())
getNewEnumVSBI =
  Automation.propertyGet "_NewEnum"
                         []
                         Automation.outIUnknown

getItemVSBI :: Prelude.Int
            -> IVStatusBarItems a
            -> Prelude.IO (IVStatusBarItem ())
getItemVSBI lIndex =
  Automation.propertyGet "Item"
                         [Automation.inInt lIndex]
                         Automation.outIDispatch

addVSBI :: IVStatusBarItems a
        -> Prelude.IO (IVStatusBarItem ())
addVSBI =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

addAtVSBI :: Prelude.Int
          -> IVStatusBarItems a
          -> Prelude.IO (IVStatusBarItem ())
addAtVSBI lIndex =
  Automation.function1 "AddAt"
                       [Automation.inInt lIndex]
                       Automation.outIDispatch

getCountVSBI :: IVStatusBarItems a
             -> Prelude.IO (Prelude.Int)
getCountVSBI =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getParentVSBI :: IVStatusBarItems a
              -> Prelude.IO (IVStatusBar ())
getParentVSBI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVStatusBarItem
-- 
-- --------------------------------------------------
data IVStatusBarItem_ a = IVStatusBarItem__
                            
type IVStatusBarItem a = Automation.IDispatch (IVStatusBarItem_ a)
iidIVStatusBarItem :: Com.IID (IVStatusBarItem ())
iidIVStatusBarItem =
  Com.mkIID "{000D0272-0000-0000-C000-000000000046}"

deleteVSBI :: IVStatusBarItem a
           -> Prelude.IO ()
deleteVSBI =
  Automation.method0 "Delete"
                     []

iconFileNameVSBI :: Prelude.String
                 -> IVStatusBarItem a
                 -> Prelude.IO ()
iconFileNameVSBI iconFileName =
  Automation.method0 "IconFileName"
                     [Automation.inString iconFileName]

getDefaultVSBI :: IVStatusBarItem a
               -> Prelude.IO (Prelude.String)
getDefaultVSBI =
  Automation.propertyGet "Default"
                         []
                         Automation.outString

getIndexVSBI :: IVStatusBarItem a
             -> Prelude.IO (Prelude.Int)
getIndexVSBI =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

parentVSBI :: IVStatusBarItem a
           -> Prelude.IO (IVStatusBarItems ())
parentVSBI =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

setCmdNumVSBI :: Prelude.Int
              -> IVStatusBarItem a
              -> Prelude.IO ()
setCmdNumVSBI pwCmd =
  Automation.propertySet "CmdNum"
                         [Automation.inInt pwCmd]

getCmdNumVSBI :: IVStatusBarItem a
              -> Prelude.IO (Prelude.Int)
getCmdNumVSBI =
  Automation.propertyGet "CmdNum"
                         []
                         Automation.outInt

setHelpContextIDVSBI :: Prelude.Int
                     -> IVStatusBarItem a
                     -> Prelude.IO ()
setHelpContextIDVSBI pHelpContextID =
  Automation.propertySet "HelpContextID"
                         [Automation.inInt pHelpContextID]

getHelpContextIDVSBI :: IVStatusBarItem a
                     -> Prelude.IO (Prelude.Int)
getHelpContextIDVSBI =
  Automation.propertyGet "HelpContextID"
                         []
                         Automation.outInt

setActionTextVSBI :: Prelude.String
                  -> IVStatusBarItem a
                  -> Prelude.IO ()
setActionTextVSBI pActionText =
  Automation.propertySet "ActionText"
                         [Automation.inString pActionText]

getActionTextVSBI :: IVStatusBarItem a
                  -> Prelude.IO (Prelude.String)
getActionTextVSBI =
  Automation.propertyGet "ActionText"
                         []
                         Automation.outString

setAddOnNameVSBI :: Prelude.String
                 -> IVStatusBarItem a
                 -> Prelude.IO ()
setAddOnNameVSBI pAddOnName =
  Automation.propertySet "AddOnName"
                         [Automation.inString pAddOnName]

getAddOnNameVSBI :: IVStatusBarItem a
                 -> Prelude.IO (Prelude.String)
getAddOnNameVSBI =
  Automation.propertyGet "AddOnName"
                         []
                         Automation.outString

setAddOnArgsVSBI :: Prelude.String
                 -> IVStatusBarItem a
                 -> Prelude.IO ()
setAddOnArgsVSBI pAddOnArgs =
  Automation.propertySet "AddOnArgs"
                         [Automation.inString pAddOnArgs]

getAddOnArgsVSBI :: IVStatusBarItem a
                 -> Prelude.IO (Prelude.String)
getAddOnArgsVSBI =
  Automation.propertyGet "AddOnArgs"
                         []
                         Automation.outString

setHelpFileVSBI :: Prelude.String
                -> IVStatusBarItem a
                -> Prelude.IO ()
setHelpFileVSBI pHelpFile =
  Automation.propertySet "HelpFile"
                         [Automation.inString pHelpFile]

getHelpFileVSBI :: IVStatusBarItem a
                -> Prelude.IO (Prelude.String)
getHelpFileVSBI =
  Automation.propertyGet "HelpFile"
                         []
                         Automation.outString

setCntrlTypeVSBI :: Prelude.Int
                 -> IVStatusBarItem a
                 -> Prelude.IO ()
setCntrlTypeVSBI pwCntrlType =
  Automation.propertySet "CntrlType"
                         [Automation.inInt pwCntrlType]

getCntrlTypeVSBI :: IVStatusBarItem a
                 -> Prelude.IO (Prelude.Int)
getCntrlTypeVSBI =
  Automation.propertyGet "CntrlType"
                         []
                         Automation.outInt

setCntrlIDVSBI :: Prelude.Int
               -> IVStatusBarItem a
               -> Prelude.IO ()
setCntrlIDVSBI pwCntrlID =
  Automation.propertySet "CntrlID"
                         [Automation.inInt pwCntrlID]

getCntrlIDVSBI :: IVStatusBarItem a
               -> Prelude.IO (Prelude.Int)
getCntrlIDVSBI =
  Automation.propertyGet "CntrlID"
                         []
                         Automation.outInt

setTypeSpecific1VSBI :: Prelude.Int
                     -> IVStatusBarItem a
                     -> Prelude.IO ()
setTypeSpecific1VSBI pwTypeSpecific =
  Automation.propertySet "TypeSpecific1"
                         [Automation.inInt pwTypeSpecific]

getTypeSpecific1VSBI :: IVStatusBarItem a
                     -> Prelude.IO (Prelude.Int)
getTypeSpecific1VSBI =
  Automation.propertyGet "TypeSpecific1"
                         []
                         Automation.outInt

setPriorityVSBI :: Prelude.Int
                -> IVStatusBarItem a
                -> Prelude.IO ()
setPriorityVSBI pwPriority =
  Automation.propertySet "Priority"
                         [Automation.inInt pwPriority]

getPriorityVSBI :: IVStatusBarItem a
                -> Prelude.IO (Prelude.Int)
getPriorityVSBI =
  Automation.propertyGet "Priority"
                         []
                         Automation.outInt

setSpacingVSBI :: Prelude.Int
               -> IVStatusBarItem a
               -> Prelude.IO ()
setSpacingVSBI pwSpacing =
  Automation.propertySet "Spacing"
                         [Automation.inInt pwSpacing]

getSpacingVSBI :: IVStatusBarItem a
               -> Prelude.IO (Prelude.Int)
getSpacingVSBI =
  Automation.propertyGet "Spacing"
                         []
                         Automation.outInt

setTypeSpecific2VSBI :: Prelude.Int
                     -> IVStatusBarItem a
                     -> Prelude.IO ()
setTypeSpecific2VSBI pwTypeSpecific =
  Automation.propertySet "TypeSpecific2"
                         [Automation.inInt pwTypeSpecific]

getTypeSpecific2VSBI :: IVStatusBarItem a
                     -> Prelude.IO (Prelude.Int)
getTypeSpecific2VSBI =
  Automation.propertyGet "TypeSpecific2"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVDocument
-- 
-- --------------------------------------------------
data IVDocument_ a = IVDocument__
                       
type IVDocument a = Automation.IDispatch (IVDocument_ a)
iidIVDocument :: Com.IID (IVDocument ())
iidIVDocument = Com.mkIID "{000D0705-0000-0000-C000-000000000046}"

getApplicationVD :: IVDocument a
                 -> Prelude.IO (IVApplication ())
getApplicationVD =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getStatVD :: IVDocument a
          -> Prelude.IO (Prelude.Int)
getStatVD =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getObjectTypeVD :: IVDocument a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVD =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getInPlaceVD :: IVDocument a
             -> Prelude.IO (Prelude.Int)
getInPlaceVD =
  Automation.propertyGet "InPlace"
                         []
                         Automation.outInt

getMastersVD :: IVDocument a
             -> Prelude.IO (IVMasters ())
getMastersVD =
  Automation.propertyGet "Masters"
                         []
                         Automation.outIDispatch

getPagesVD :: IVDocument a
           -> Prelude.IO (IVPages ())
getPagesVD =
  Automation.propertyGet "Pages"
                         []
                         Automation.outIDispatch

getStylesVD :: IVDocument a
            -> Prelude.IO (IVStyles ())
getStylesVD =
  Automation.propertyGet "Styles"
                         []
                         Automation.outIDispatch

getNameVD :: IVDocument a
          -> Prelude.IO (Prelude.String)
getNameVD =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

getPathVD :: IVDocument a
          -> Prelude.IO (Prelude.String)
getPathVD =
  Automation.propertyGet "Path"
                         []
                         Automation.outString

getFullNameVD :: IVDocument a
              -> Prelude.IO (Prelude.String)
getFullNameVD =
  Automation.propertyGet "FullName"
                         []
                         Automation.outString

drop :: Com.IUnknown a0
     -> Prelude.Int
     -> Prelude.Int
     -> IVDocument a
     -> Prelude.IO (IVMaster ())
drop objectToDrop xPos yPos =
  Automation.function1 "Drop"
                       [ Automation.inIUnknown objectToDrop
                       , Automation.inInt xPos
                       , Automation.inInt yPos
                       ]
                       Automation.outIDispatch

getIndexVD :: IVDocument a
           -> Prelude.IO (Prelude.Int)
getIndexVD =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getSavedVD :: IVDocument a
           -> Prelude.IO (Prelude.Int)
getSavedVD =
  Automation.propertyGet "Saved"
                         []
                         Automation.outInt

setSavedVD :: Prelude.Int
           -> IVDocument a
           -> Prelude.IO ()
setSavedVD lpi2Ret =
  Automation.propertySet "Saved"
                         [Automation.inInt lpi2Ret]

getReadOnlyVD :: IVDocument a
              -> Prelude.IO (Prelude.Int)
getReadOnlyVD =
  Automation.propertyGet "ReadOnly"
                         []
                         Automation.outInt

save :: IVDocument a
     -> Prelude.IO (Prelude.Int)
save =
  Automation.function1 "Save"
                       []
                       Automation.outInt

saveAs :: Prelude.String
       -> IVDocument a
       -> Prelude.IO (Prelude.Int)
saveAs fileName =
  Automation.function1 "SaveAs"
                       [Automation.inString fileName]
                       Automation.outInt

getVersionVD :: IVDocument a
             -> Prelude.IO (Prelude.Int)
getVersionVD =
  Automation.propertyGet "Version"
                         []
                         Automation.outInt

setVersionVD :: Prelude.Int
             -> IVDocument a
             -> Prelude.IO ()
setVersionVD lpi4Ret =
  Automation.propertySet "Version"
                         [Automation.inInt lpi4Ret]

getTitleVD :: IVDocument a
           -> Prelude.IO (Prelude.String)
getTitleVD =
  Automation.propertyGet "Title"
                         []
                         Automation.outString

setTitleVD :: Prelude.String
           -> IVDocument a
           -> Prelude.IO ()
setTitleVD lpbstrRet =
  Automation.propertySet "Title"
                         [Automation.inString lpbstrRet]

getSubjectVD :: IVDocument a
             -> Prelude.IO (Prelude.String)
getSubjectVD =
  Automation.propertyGet "Subject"
                         []
                         Automation.outString

setSubjectVD :: Prelude.String
             -> IVDocument a
             -> Prelude.IO ()
setSubjectVD lpbstrRet =
  Automation.propertySet "Subject"
                         [Automation.inString lpbstrRet]

getCreatorVD :: IVDocument a
             -> Prelude.IO (Prelude.String)
getCreatorVD =
  Automation.propertyGet "Creator"
                         []
                         Automation.outString

setCreatorVD :: Prelude.String
             -> IVDocument a
             -> Prelude.IO ()
setCreatorVD lpbstrRet =
  Automation.propertySet "Creator"
                         [Automation.inString lpbstrRet]

getKeywordsVD :: IVDocument a
              -> Prelude.IO (Prelude.String)
getKeywordsVD =
  Automation.propertyGet "Keywords"
                         []
                         Automation.outString

setKeywordsVD :: Prelude.String
              -> IVDocument a
              -> Prelude.IO ()
setKeywordsVD lpbstrRet =
  Automation.propertySet "Keywords"
                         [Automation.inString lpbstrRet]

getDescriptionVD :: IVDocument a
                 -> Prelude.IO (Prelude.String)
getDescriptionVD =
  Automation.propertyGet "Description"
                         []
                         Automation.outString

setDescriptionVD :: Prelude.String
                 -> IVDocument a
                 -> Prelude.IO ()
setDescriptionVD lpbstrRet =
  Automation.propertySet "Description"
                         [Automation.inString lpbstrRet]

print :: IVDocument a
      -> Prelude.IO ()
print =
  Automation.method0 "Print"
                     []

close :: IVDocument a
      -> Prelude.IO ()
close =
  Automation.method0 "Close"
                     []

getCustomMenusVD :: IVDocument a
                 -> Prelude.IO (IVUIObject ())
getCustomMenusVD =
  Automation.propertyGet "CustomMenus"
                         []
                         Automation.outIDispatch

setCustomMenus :: IVUIObject a0
               -> IVDocument a
               -> Prelude.IO ()
setCustomMenus menusObject =
  Automation.method0 "SetCustomMenus"
                     [Automation.inIDispatch menusObject]

getCustomMenusFileVD :: IVDocument a
                     -> Prelude.IO (Prelude.String)
getCustomMenusFileVD =
  Automation.propertyGet "CustomMenusFile"
                         []
                         Automation.outString

setCustomMenusFileVD :: Prelude.String
                     -> IVDocument a
                     -> Prelude.IO ()
setCustomMenusFileVD lpbstrRet =
  Automation.propertySet "CustomMenusFile"
                         [Automation.inString lpbstrRet]

clearCustomMenus :: IVDocument a
                 -> Prelude.IO ()
clearCustomMenus =
  Automation.method0 "ClearCustomMenus"
                     []

getCustomToolbarsVD :: IVDocument a
                    -> Prelude.IO (IVUIObject ())
getCustomToolbarsVD =
  Automation.propertyGet "CustomToolbars"
                         []
                         Automation.outIDispatch

setCustomToolbars :: IVUIObject a0
                  -> IVDocument a
                  -> Prelude.IO ()
setCustomToolbars toolbarsObject =
  Automation.method0 "SetCustomToolbars"
                     [Automation.inIDispatch toolbarsObject]

getCustomToolbarsFileVD :: IVDocument a
                        -> Prelude.IO (Prelude.String)
getCustomToolbarsFileVD =
  Automation.propertyGet "CustomToolbarsFile"
                         []
                         Automation.outString

setCustomToolbarsFileVD :: Prelude.String
                        -> IVDocument a
                        -> Prelude.IO ()
setCustomToolbarsFileVD lpbstrRet =
  Automation.propertySet "CustomToolbarsFile"
                         [Automation.inString lpbstrRet]

clearCustomToolbars :: IVDocument a
                    -> Prelude.IO ()
clearCustomToolbars =
  Automation.method0 "ClearCustomToolbars"
                     []

getFontsVD :: IVDocument a
           -> Prelude.IO (IVFonts ())
getFontsVD =
  Automation.propertyGet "Fonts"
                         []
                         Automation.outIDispatch

getColorsVD :: IVDocument a
            -> Prelude.IO (IVColors ())
getColorsVD =
  Automation.propertyGet "Colors"
                         []
                         Automation.outIDispatch

getEventListVD :: IVDocument a
               -> Prelude.IO (IVEventList ())
getEventListVD =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getTemplateVD :: IVDocument a
              -> Prelude.IO (Prelude.String)
getTemplateVD =
  Automation.propertyGet "Template"
                         []
                         Automation.outString

saveAsEx :: Prelude.String
         -> Prelude.Int
         -> IVDocument a
         -> Prelude.IO ()
saveAsEx fileName saveFlags =
  Automation.method0 "SaveAsEx"
                     [ Automation.inString fileName
                     , Automation.inInt saveFlags
                     ]

getSavePreviewModeVD :: IVDocument a
                     -> Prelude.IO (Prelude.Int)
getSavePreviewModeVD =
  Automation.propertyGet "SavePreviewMode"
                         []
                         Automation.outInt

setSavePreviewModeVD :: Prelude.Int
                     -> IVDocument a
                     -> Prelude.IO ()
setSavePreviewModeVD lpi2Ret =
  Automation.propertySet "SavePreviewMode"
                         [Automation.inInt lpi2Ret]

getIcon :: Prelude.Int
        -> Prelude.String
        -> IVDocument a
        -> Prelude.IO ()
getIcon iD fileName =
  Automation.method0 "GetIcon"
                     [ Automation.inInt iD
                     , Automation.inString fileName
                     ]

setIcon :: Prelude.Int
        -> Prelude.Int
        -> Prelude.String
        -> IVDocument a
        -> Prelude.IO ()
setIcon iD index fileName =
  Automation.method0 "SetIcon"
                     [ Automation.inInt iD
                     , Automation.inInt index
                     , Automation.inString fileName
                     ]

getLeftMarginVD :: (Automation.Variant a0)
                => a0
                -> IVDocument a
                -> Prelude.IO (Prelude.Double)
getLeftMarginVD unitsNameOrCode =
  Automation.propertyGet "LeftMargin"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

setLeftMarginVD :: (Automation.Variant a0)
                => a0
                -> Prelude.Double
                -> IVDocument a
                -> Prelude.IO ()
setLeftMarginVD unitsNameOrCode lpr8Ret =
  Automation.propertySet "LeftMargin"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inDouble lpr8Ret
                         ]

getRightMarginVD :: (Automation.Variant a0)
                 => a0
                 -> IVDocument a
                 -> Prelude.IO (Prelude.Double)
getRightMarginVD unitsNameOrCode =
  Automation.propertyGet "RightMargin"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

setRightMarginVD :: (Automation.Variant a0)
                 => a0
                 -> Prelude.Double
                 -> IVDocument a
                 -> Prelude.IO ()
setRightMarginVD unitsNameOrCode lpr8Ret =
  Automation.propertySet "RightMargin"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inDouble lpr8Ret
                         ]

getTopMarginVD :: (Automation.Variant a0)
               => a0
               -> IVDocument a
               -> Prelude.IO (Prelude.Double)
getTopMarginVD unitsNameOrCode =
  Automation.propertyGet "TopMargin"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

setTopMarginVD :: (Automation.Variant a0)
               => a0
               -> Prelude.Double
               -> IVDocument a
               -> Prelude.IO ()
setTopMarginVD unitsNameOrCode lpr8Ret =
  Automation.propertySet "TopMargin"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inDouble lpr8Ret
                         ]

getBottomMarginVD :: (Automation.Variant a0)
                  => a0
                  -> IVDocument a
                  -> Prelude.IO (Prelude.Double)
getBottomMarginVD unitsNameOrCode =
  Automation.propertyGet "BottomMargin"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

setBottomMarginVD :: (Automation.Variant a0)
                  => a0
                  -> Prelude.Double
                  -> IVDocument a
                  -> Prelude.IO ()
setBottomMarginVD unitsNameOrCode lpr8Ret =
  Automation.propertySet "BottomMargin"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inDouble lpr8Ret
                         ]

getPrintLandscapeVD :: IVDocument a
                    -> Prelude.IO (Prelude.Int)
getPrintLandscapeVD =
  Automation.propertyGet "PrintLandscape"
                         []
                         Automation.outInt

setPrintLandscapeVD :: Prelude.Int
                    -> IVDocument a
                    -> Prelude.IO ()
setPrintLandscapeVD lpi2Ret =
  Automation.propertySet "PrintLandscape"
                         [Automation.inInt lpi2Ret]

getPrintCenteredHVD :: IVDocument a
                    -> Prelude.IO (Prelude.Int)
getPrintCenteredHVD =
  Automation.propertyGet "PrintCenteredH"
                         []
                         Automation.outInt

setPrintCenteredHVD :: Prelude.Int
                    -> IVDocument a
                    -> Prelude.IO ()
setPrintCenteredHVD lpi2Ret =
  Automation.propertySet "PrintCenteredH"
                         [Automation.inInt lpi2Ret]

getPrintCenteredVVD :: IVDocument a
                    -> Prelude.IO (Prelude.Int)
getPrintCenteredVVD =
  Automation.propertyGet "PrintCenteredV"
                         []
                         Automation.outInt

setPrintCenteredVVD :: Prelude.Int
                    -> IVDocument a
                    -> Prelude.IO ()
setPrintCenteredVVD lpi2Ret =
  Automation.propertySet "PrintCenteredV"
                         [Automation.inInt lpi2Ret]

getPrintScaleVD :: IVDocument a
                -> Prelude.IO (Prelude.Double)
getPrintScaleVD =
  Automation.propertyGet "PrintScale"
                         []
                         Automation.outDouble

setPrintScaleVD :: Prelude.Double
                -> IVDocument a
                -> Prelude.IO ()
setPrintScaleVD lpr8Ret =
  Automation.propertySet "PrintScale"
                         [Automation.inDouble lpr8Ret]

getPrintFitOnPagesVD :: IVDocument a
                     -> Prelude.IO (Prelude.Int)
getPrintFitOnPagesVD =
  Automation.propertyGet "PrintFitOnPages"
                         []
                         Automation.outInt

setPrintFitOnPagesVD :: Prelude.Int
                     -> IVDocument a
                     -> Prelude.IO ()
setPrintFitOnPagesVD lpi2Ret =
  Automation.propertySet "PrintFitOnPages"
                         [Automation.inInt lpi2Ret]

getPrintPagesAcrossVD :: IVDocument a
                      -> Prelude.IO (Prelude.Int)
getPrintPagesAcrossVD =
  Automation.propertyGet "PrintPagesAcross"
                         []
                         Automation.outInt

setPrintPagesAcrossVD :: Prelude.Int
                      -> IVDocument a
                      -> Prelude.IO ()
setPrintPagesAcrossVD lpi2Ret =
  Automation.propertySet "PrintPagesAcross"
                         [Automation.inInt lpi2Ret]

getPrintPagesDownVD :: IVDocument a
                    -> Prelude.IO (Prelude.Int)
getPrintPagesDownVD =
  Automation.propertyGet "PrintPagesDown"
                         []
                         Automation.outInt

setPrintPagesDownVD :: Prelude.Int
                    -> IVDocument a
                    -> Prelude.IO ()
setPrintPagesDownVD lpi2Ret =
  Automation.propertySet "PrintPagesDown"
                         [Automation.inInt lpi2Ret]

getDefaultStyleVD :: IVDocument a
                  -> Prelude.IO (Prelude.String)
getDefaultStyleVD =
  Automation.propertyGet "DefaultStyle"
                         []
                         Automation.outString

setDefaultStyleVD :: Prelude.String
                  -> IVDocument a
                  -> Prelude.IO ()
setDefaultStyleVD lpbstrRet =
  Automation.propertySet "DefaultStyle"
                         [Automation.inString lpbstrRet]

getDefaultLineStyleVD :: IVDocument a
                      -> Prelude.IO (Prelude.String)
getDefaultLineStyleVD =
  Automation.propertyGet "DefaultLineStyle"
                         []
                         Automation.outString

setDefaultLineStyleVD :: Prelude.String
                      -> IVDocument a
                      -> Prelude.IO ()
setDefaultLineStyleVD lpbstrRet =
  Automation.propertySet "DefaultLineStyle"
                         [Automation.inString lpbstrRet]

getDefaultFillStyleVD :: IVDocument a
                      -> Prelude.IO (Prelude.String)
getDefaultFillStyleVD =
  Automation.propertyGet "DefaultFillStyle"
                         []
                         Automation.outString

setDefaultFillStyleVD :: Prelude.String
                      -> IVDocument a
                      -> Prelude.IO ()
setDefaultFillStyleVD lpbstrRet =
  Automation.propertySet "DefaultFillStyle"
                         [Automation.inString lpbstrRet]

getDefaultTextStyleVD :: IVDocument a
                      -> Prelude.IO (Prelude.String)
getDefaultTextStyleVD =
  Automation.propertyGet "DefaultTextStyle"
                         []
                         Automation.outString

setDefaultTextStyleVD :: Prelude.String
                      -> IVDocument a
                      -> Prelude.IO ()
setDefaultTextStyleVD lpbstrRet =
  Automation.propertySet "DefaultTextStyle"
                         [Automation.inString lpbstrRet]

getPersistsEventsVD :: IVDocument a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVD =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

openStencilWindow :: IVDocument a
                  -> Prelude.IO (IVWindow ())
openStencilWindow =
  Automation.function1 "OpenStencilWindow"
                       []
                       Automation.outIDispatch

parseLine :: Prelude.String
          -> IVDocument a
          -> Prelude.IO ()
parseLine line =
  Automation.method0 "ParseLine"
                     [Automation.inString line]

executeLine :: Prelude.String
            -> IVDocument a
            -> Prelude.IO ()
executeLine line =
  Automation.method0 "ExecuteLine"
                     [Automation.inString line]

getVBProjectVD :: IVDocument a
               -> Prelude.IO (Automation.IDispatch ())
getVBProjectVD =
  Automation.propertyGet "VBProject"
                         []
                         Automation.outIDispatch

getPaperWidthVD :: (Automation.Variant a0)
                => a0
                -> IVDocument a
                -> Prelude.IO (Prelude.Double)
getPaperWidthVD unitsNameOrCode =
  Automation.propertyGet "PaperWidth"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

getPaperHeightVD :: (Automation.Variant a0)
                 => a0
                 -> IVDocument a
                 -> Prelude.IO (Prelude.Double)
getPaperHeightVD unitsNameOrCode =
  Automation.propertyGet "PaperHeight"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

getPaperSizeVD :: IVDocument a
               -> Prelude.IO (Prelude.Int)
getPaperSizeVD =
  Automation.propertyGet "PaperSize"
                         []
                         Automation.outInt

setPaperSizeVD :: Prelude.Int
               -> IVDocument a
               -> Prelude.IO ()
setPaperSizeVD lpi2Ret =
  Automation.propertySet "PaperSize"
                         [Automation.inInt lpi2Ret]

followHyperlink45 :: Prelude.String
                  -> Prelude.String
                  -> IVDocument a
                  -> Prelude.IO ()
followHyperlink45 target location =
  Automation.method0 "FollowHyperlink45"
                     [ Automation.inString target
                     , Automation.inString location
                     ]

getCodeNameVD :: IVDocument a
              -> Prelude.IO (Prelude.String)
getCodeNameVD =
  Automation.propertyGet "CodeName"
                         []
                         Automation.outString

getModeVD :: IVDocument a
          -> Prelude.IO (Prelude.Int)
getModeVD =
  Automation.propertyGet "Mode"
                         []
                         Automation.outInt

setModeVD :: Prelude.Int
          -> IVDocument a
          -> Prelude.IO ()
setModeVD lpi2Ret =
  Automation.propertySet "Mode"
                         [Automation.inInt lpi2Ret]

getOLEObjectsVD :: IVDocument a
                -> Prelude.IO (IVOLEObjects ())
getOLEObjectsVD =
  Automation.propertyGet "OLEObjects"
                         []
                         Automation.outIDispatch

getManagerVD :: IVDocument a
             -> Prelude.IO (Prelude.String)
getManagerVD =
  Automation.propertyGet "Manager"
                         []
                         Automation.outString

setManagerVD :: Prelude.String
             -> IVDocument a
             -> Prelude.IO ()
setManagerVD lpbstrRet =
  Automation.propertySet "Manager"
                         [Automation.inString lpbstrRet]

getCompanyVD :: IVDocument a
             -> Prelude.IO (Prelude.String)
getCompanyVD =
  Automation.propertyGet "Company"
                         []
                         Automation.outString

setCompanyVD :: Prelude.String
             -> IVDocument a
             -> Prelude.IO ()
setCompanyVD lpbstrRet =
  Automation.propertySet "Company"
                         [Automation.inString lpbstrRet]

getCategoryVD :: IVDocument a
              -> Prelude.IO (Prelude.String)
getCategoryVD =
  Automation.propertyGet "Category"
                         []
                         Automation.outString

setCategoryVD :: Prelude.String
              -> IVDocument a
              -> Prelude.IO ()
setCategoryVD lpbstrRet =
  Automation.propertySet "Category"
                         [Automation.inString lpbstrRet]

getHyperlinkBaseVD :: IVDocument a
                   -> Prelude.IO (Prelude.String)
getHyperlinkBaseVD =
  Automation.propertyGet "HyperlinkBase"
                         []
                         Automation.outString

setHyperlinkBaseVD :: Prelude.String
                   -> IVDocument a
                   -> Prelude.IO ()
setHyperlinkBaseVD lpbstrRet =
  Automation.propertySet "HyperlinkBase"
                         [Automation.inString lpbstrRet]

-- --------------------------------------------------
-- 
-- interface IVApplication
-- 
-- --------------------------------------------------
data IVApplication_ a = IVApplication__
                          
type IVApplication a = Automation.IDispatch (IVApplication_ a)
iidIVApplication :: Com.IID (IVApplication ())
iidIVApplication =
  Com.mkIID "{000D0700-0000-0000-C000-000000000046}"

getActiveDocumentVA :: IVApplication a
                    -> Prelude.IO (IVDocument ())
getActiveDocumentVA =
  Automation.propertyGet "ActiveDocument"
                         []
                         Automation.outIDispatch

getActivePageVA :: IVApplication a
                -> Prelude.IO (IVPage ())
getActivePageVA =
  Automation.propertyGet "ActivePage"
                         []
                         Automation.outIDispatch

getActiveWindowVA :: IVApplication a
                  -> Prelude.IO (IVWindow ())
getActiveWindowVA =
  Automation.propertyGet "ActiveWindow"
                         []
                         Automation.outIDispatch

getApplicationVA :: IVApplication a
                 -> Prelude.IO (IVApplication ())
getApplicationVA =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getDocumentsVA :: IVApplication a
               -> Prelude.IO (IVDocuments ())
getDocumentsVA =
  Automation.propertyGet "Documents"
                         []
                         Automation.outIDispatch

getObjectTypeVA :: IVApplication a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVA =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getOnDataChangeDelayVA :: IVApplication a
                       -> Prelude.IO (Prelude.Int)
getOnDataChangeDelayVA =
  Automation.propertyGet "OnDataChangeDelay"
                         []
                         Automation.outInt

setOnDataChangeDelayVA :: Prelude.Int
                       -> IVApplication a
                       -> Prelude.IO ()
setOnDataChangeDelayVA lpi4Ret =
  Automation.propertySet "OnDataChangeDelay"
                         [Automation.inInt lpi4Ret]

getProcessIDVA :: IVApplication a
               -> Prelude.IO (Prelude.Int)
getProcessIDVA =
  Automation.propertyGet "ProcessID"
                         []
                         Automation.outInt

quit :: IVApplication a
     -> Prelude.IO ()
quit =
  Automation.method0 "Quit"
                     []

redo :: IVApplication a
     -> Prelude.IO ()
redo =
  Automation.method0 "Redo"
                     []

getScreenUpdatingVA :: IVApplication a
                    -> Prelude.IO (Prelude.Int)
getScreenUpdatingVA =
  Automation.propertyGet "ScreenUpdating"
                         []
                         Automation.outInt

setScreenUpdatingVA :: Prelude.Int
                    -> IVApplication a
                    -> Prelude.IO ()
setScreenUpdatingVA lpi2Ret =
  Automation.propertySet "ScreenUpdating"
                         [Automation.inInt lpi2Ret]

getStatVA :: IVApplication a
          -> Prelude.IO (Prelude.Int)
getStatVA =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

undo :: IVApplication a
     -> Prelude.IO ()
undo =
  Automation.method0 "Undo"
                     []

getVersionVA :: IVApplication a
             -> Prelude.IO (Prelude.String)
getVersionVA =
  Automation.propertyGet "Version"
                         []
                         Automation.outString

getWindowHandleVA :: IVApplication a
                  -> Prelude.IO (Prelude.Int)
getWindowHandleVA =
  Automation.propertyGet "WindowHandle"
                         []
                         Automation.outInt

getWindowsVA :: IVApplication a
             -> Prelude.IO (IVWindows ())
getWindowsVA =
  Automation.propertyGet "Windows"
                         []
                         Automation.outIDispatch

getLanguageVA :: IVApplication a
              -> Prelude.IO (Prelude.Int)
getLanguageVA =
  Automation.propertyGet "Language"
                         []
                         Automation.outInt

getIsVisio16VA :: IVApplication a
               -> Prelude.IO (Prelude.Int)
getIsVisio16VA =
  Automation.propertyGet "IsVisio16"
                         []
                         Automation.outInt

getIsVisio32VA :: IVApplication a
               -> Prelude.IO (Prelude.Int)
getIsVisio32VA =
  Automation.propertyGet "IsVisio32"
                         []
                         Automation.outInt

getWindowHandle32VA :: IVApplication a
                    -> Prelude.IO (Prelude.Int)
getWindowHandle32VA =
  Automation.propertyGet "WindowHandle32"
                         []
                         Automation.outInt

getInstanceHandleVA :: IVApplication a
                    -> Prelude.IO (Prelude.Int)
getInstanceHandleVA =
  Automation.propertyGet "InstanceHandle"
                         []
                         Automation.outInt

getInstanceHandle32VA :: IVApplication a
                      -> Prelude.IO (Prelude.Int)
getInstanceHandle32VA =
  Automation.propertyGet "InstanceHandle32"
                         []
                         Automation.outInt

getBuiltInMenusVA :: IVApplication a
                  -> Prelude.IO (IVUIObject ())
getBuiltInMenusVA =
  Automation.propertyGet "BuiltInMenus"
                         []
                         Automation.outIDispatch

getBuiltInToolbarsVA :: Prelude.Int
                     -> IVApplication a
                     -> Prelude.IO (IVUIObject ())
getBuiltInToolbarsVA fIgnored =
  Automation.propertyGet "BuiltInToolbars"
                         [Automation.inInt fIgnored]
                         Automation.outIDispatch

getCustomMenusVA :: IVApplication a
                 -> Prelude.IO (IVUIObject ())
getCustomMenusVA =
  Automation.propertyGet "CustomMenus"
                         []
                         Automation.outIDispatch

setCustomMenusVA :: IVUIObject a0
                 -> IVApplication a
                 -> Prelude.IO ()
setCustomMenusVA menusObject =
  Automation.method0 "SetCustomMenus"
                     [Automation.inIDispatch menusObject]

getCustomMenusFileVA :: IVApplication a
                     -> Prelude.IO (Prelude.String)
getCustomMenusFileVA =
  Automation.propertyGet "CustomMenusFile"
                         []
                         Automation.outString

setCustomMenusFileVA :: Prelude.String
                     -> IVApplication a
                     -> Prelude.IO ()
setCustomMenusFileVA lpbstrRet =
  Automation.propertySet "CustomMenusFile"
                         [Automation.inString lpbstrRet]

clearCustomMenusVA :: IVApplication a
                   -> Prelude.IO ()
clearCustomMenusVA =
  Automation.method0 "ClearCustomMenus"
                     []

getCustomToolbarsVA :: IVApplication a
                    -> Prelude.IO (IVUIObject ())
getCustomToolbarsVA =
  Automation.propertyGet "CustomToolbars"
                         []
                         Automation.outIDispatch

setCustomToolbarsVA :: IVUIObject a0
                    -> IVApplication a
                    -> Prelude.IO ()
setCustomToolbarsVA toolbarsObject =
  Automation.method0 "SetCustomToolbars"
                     [Automation.inIDispatch toolbarsObject]

getCustomToolbarsFileVA :: IVApplication a
                        -> Prelude.IO (Prelude.String)
getCustomToolbarsFileVA =
  Automation.propertyGet "CustomToolbarsFile"
                         []
                         Automation.outString

setCustomToolbarsFileVA :: Prelude.String
                        -> IVApplication a
                        -> Prelude.IO ()
setCustomToolbarsFileVA lpbstrRet =
  Automation.propertySet "CustomToolbarsFile"
                         [Automation.inString lpbstrRet]

clearCustomToolbarsVA :: IVApplication a
                      -> Prelude.IO ()
clearCustomToolbarsVA =
  Automation.method0 "ClearCustomToolbars"
                     []

getAddonPathsVA :: IVApplication a
                -> Prelude.IO (Prelude.String)
getAddonPathsVA =
  Automation.propertyGet "AddonPaths"
                         []
                         Automation.outString

setAddonPathsVA :: Prelude.String
                -> IVApplication a
                -> Prelude.IO ()
setAddonPathsVA lpbstrRet =
  Automation.propertySet "AddonPaths"
                         [Automation.inString lpbstrRet]

getDrawingPathsVA :: IVApplication a
                  -> Prelude.IO (Prelude.String)
getDrawingPathsVA =
  Automation.propertyGet "DrawingPaths"
                         []
                         Automation.outString

setDrawingPathsVA :: Prelude.String
                  -> IVApplication a
                  -> Prelude.IO ()
setDrawingPathsVA lpbstrRet =
  Automation.propertySet "DrawingPaths"
                         [Automation.inString lpbstrRet]

getFilterPathsVA :: IVApplication a
                 -> Prelude.IO (Prelude.String)
getFilterPathsVA =
  Automation.propertyGet "FilterPaths"
                         []
                         Automation.outString

setFilterPathsVA :: Prelude.String
                 -> IVApplication a
                 -> Prelude.IO ()
setFilterPathsVA lpbstrRet =
  Automation.propertySet "FilterPaths"
                         [Automation.inString lpbstrRet]

getHelpPathsVA :: IVApplication a
               -> Prelude.IO (Prelude.String)
getHelpPathsVA =
  Automation.propertyGet "HelpPaths"
                         []
                         Automation.outString

setHelpPathsVA :: Prelude.String
               -> IVApplication a
               -> Prelude.IO ()
setHelpPathsVA lpbstrRet =
  Automation.propertySet "HelpPaths"
                         [Automation.inString lpbstrRet]

getStartupPathsVA :: IVApplication a
                  -> Prelude.IO (Prelude.String)
getStartupPathsVA =
  Automation.propertyGet "StartupPaths"
                         []
                         Automation.outString

setStartupPathsVA :: Prelude.String
                  -> IVApplication a
                  -> Prelude.IO ()
setStartupPathsVA lpbstrRet =
  Automation.propertySet "StartupPaths"
                         [Automation.inString lpbstrRet]

getStencilPathsVA :: IVApplication a
                  -> Prelude.IO (Prelude.String)
getStencilPathsVA =
  Automation.propertyGet "StencilPaths"
                         []
                         Automation.outString

setStencilPathsVA :: Prelude.String
                  -> IVApplication a
                  -> Prelude.IO ()
setStencilPathsVA lpbstrRet =
  Automation.propertySet "StencilPaths"
                         [Automation.inString lpbstrRet]

getTemplatePathsVA :: IVApplication a
                   -> Prelude.IO (Prelude.String)
getTemplatePathsVA =
  Automation.propertyGet "TemplatePaths"
                         []
                         Automation.outString

setTemplatePathsVA :: Prelude.String
                   -> IVApplication a
                   -> Prelude.IO ()
setTemplatePathsVA lpbstrRet =
  Automation.propertySet "TemplatePaths"
                         [Automation.inString lpbstrRet]

getUserNameVA :: IVApplication a
              -> Prelude.IO (Prelude.String)
getUserNameVA =
  Automation.propertyGet "UserName"
                         []
                         Automation.outString

setUserNameVA :: Prelude.String
              -> IVApplication a
              -> Prelude.IO ()
setUserNameVA lpbstrRet =
  Automation.propertySet "UserName"
                         [Automation.inString lpbstrRet]

getPromptForSummaryVA :: IVApplication a
                      -> Prelude.IO (Prelude.Int)
getPromptForSummaryVA =
  Automation.propertyGet "PromptForSummary"
                         []
                         Automation.outInt

setPromptForSummaryVA :: Prelude.Int
                      -> IVApplication a
                      -> Prelude.IO ()
setPromptForSummaryVA lpi2Ret =
  Automation.propertySet "PromptForSummary"
                         [Automation.inInt lpi2Ret]

getAddonsVA :: IVApplication a
            -> Prelude.IO (IVAddons ())
getAddonsVA =
  Automation.propertyGet "Addons"
                         []
                         Automation.outIDispatch

saveWorkspaceAs :: Prelude.String
                -> IVApplication a
                -> Prelude.IO ()
saveWorkspaceAs fileName =
  Automation.method0 "SaveWorkspaceAs"
                     [Automation.inString fileName]

doCmd :: Prelude.Int
      -> IVApplication a
      -> Prelude.IO ()
doCmd commandID =
  Automation.method0 "DoCmd"
                     [Automation.inInt commandID]

getProfileNameVA :: IVApplication a
                 -> Prelude.IO (Prelude.String)
getProfileNameVA =
  Automation.propertyGet "ProfileName"
                         []
                         Automation.outString

getEventInfoVA :: Prelude.Int
               -> IVApplication a
               -> Prelude.IO (Prelude.String)
getEventInfoVA reservedPass0 =
  Automation.propertyGet "EventInfo"
                         [Automation.inInt reservedPass0]
                         Automation.outString

getEventListVA :: IVApplication a
               -> Prelude.IO (IVEventList ())
getEventListVA =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVA :: IVApplication a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVA =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getActiveVA :: IVApplication a
            -> Prelude.IO (Prelude.Int)
getActiveVA =
  Automation.propertyGet "Active"
                         []
                         Automation.outInt

getDeferRecalcVA :: IVApplication a
                 -> Prelude.IO (Prelude.Int)
getDeferRecalcVA =
  Automation.propertyGet "DeferRecalc"
                         []
                         Automation.outInt

setDeferRecalcVA :: Prelude.Int
                 -> IVApplication a
                 -> Prelude.IO ()
setDeferRecalcVA lpi2Ret =
  Automation.propertySet "DeferRecalc"
                         [Automation.inInt lpi2Ret]

getAlertResponseVA :: IVApplication a
                   -> Prelude.IO (Prelude.Int)
getAlertResponseVA =
  Automation.propertyGet "AlertResponse"
                         []
                         Automation.outInt

setAlertResponseVA :: Prelude.Int
                   -> IVApplication a
                   -> Prelude.IO ()
setAlertResponseVA lpi2Ret =
  Automation.propertySet "AlertResponse"
                         [Automation.inInt lpi2Ret]

getShowProgressVA :: IVApplication a
                  -> Prelude.IO (Prelude.Int)
getShowProgressVA =
  Automation.propertyGet "ShowProgress"
                         []
                         Automation.outInt

setShowProgressVA :: Prelude.Int
                  -> IVApplication a
                  -> Prelude.IO ()
setShowProgressVA lpi2Ret =
  Automation.propertySet "ShowProgress"
                         [Automation.inInt lpi2Ret]

getVbeVA :: IVApplication a
         -> Prelude.IO (Automation.IDispatch ())
getVbeVA =
  Automation.propertyGet "Vbe"
                         []
                         Automation.outIDispatch

getShowMenusVA :: IVApplication a
               -> Prelude.IO (Prelude.Int)
getShowMenusVA =
  Automation.propertyGet "ShowMenus"
                         []
                         Automation.outInt

setShowMenusVA :: Prelude.Int
               -> IVApplication a
               -> Prelude.IO ()
setShowMenusVA lpi2Ret =
  Automation.propertySet "ShowMenus"
                         [Automation.inInt lpi2Ret]

getToolbarStyleVA :: IVApplication a
                  -> Prelude.IO (Prelude.Int)
getToolbarStyleVA =
  Automation.propertyGet "ToolbarStyle"
                         []
                         Automation.outInt

setToolbarStyleVA :: Prelude.Int
                  -> IVApplication a
                  -> Prelude.IO ()
setToolbarStyleVA lpi2Ret =
  Automation.propertySet "ToolbarStyle"
                         [Automation.inInt lpi2Ret]

getShowStatusBarVA :: IVApplication a
                   -> Prelude.IO (Prelude.Int)
getShowStatusBarVA =
  Automation.propertyGet "ShowStatusBar"
                         []
                         Automation.outInt

setShowStatusBarVA :: Prelude.Int
                   -> IVApplication a
                   -> Prelude.IO ()
setShowStatusBarVA lpi2Ret =
  Automation.propertySet "ShowStatusBar"
                         [Automation.inInt lpi2Ret]

getEventsEnabledVA :: IVApplication a
                   -> Prelude.IO (Prelude.Int)
getEventsEnabledVA =
  Automation.propertyGet "EventsEnabled"
                         []
                         Automation.outInt

setEventsEnabledVA :: Prelude.Int
                   -> IVApplication a
                   -> Prelude.IO ()
setEventsEnabledVA lpi2Ret =
  Automation.propertySet "EventsEnabled"
                         [Automation.inInt lpi2Ret]

formatResult :: (Automation.Variant a0, Automation.Variant a1, Automation.Variant a2)
             => a0
             -> a1
             -> a2
             -> Prelude.String
             -> IVApplication a
             -> Prelude.IO (Prelude.String)
formatResult stringOrNumber unitsIn unitsOut format =
  Automation.function1 "FormatResult"
                       [ Automation.inVariant stringOrNumber
                       , Automation.inVariant unitsIn
                       , Automation.inVariant unitsOut
                       , Automation.inString format
                       ]
                       Automation.outString

convertResult :: (Automation.Variant a0, Automation.Variant a1, Automation.Variant a2)
              => a0
              -> a1
              -> a2
              -> IVApplication a
              -> Prelude.IO (Prelude.Double)
convertResult stringOrNumber unitsIn unitsOut =
  Automation.function1 "ConvertResult"
                       [ Automation.inVariant stringOrNumber
                       , Automation.inVariant unitsIn
                       , Automation.inVariant unitsOut
                       ]
                       Automation.outDouble

getPathVA :: IVApplication a
          -> Prelude.IO (Prelude.String)
getPathVA =
  Automation.propertyGet "Path"
                         []
                         Automation.outString

enumDirectories :: Prelude.String
                -> IVApplication a
                -> Prelude.IO (SafeArray Prelude.String)
enumDirectories pathsString =
  Automation.method1 "EnumDirectories"
                     [Automation.inString pathsString]
                     outSafeArray

getTraceFlagsVA :: IVApplication a
                -> Prelude.IO (Prelude.Int)
getTraceFlagsVA =
  Automation.propertyGet "TraceFlags"
                         []
                         Automation.outInt

setTraceFlagsVA :: Prelude.Int
                -> IVApplication a
                -> Prelude.IO ()
setTraceFlagsVA lpi4Ret =
  Automation.propertySet "TraceFlags"
                         [Automation.inInt lpi4Ret]

purgeUndo :: IVApplication a
          -> Prelude.IO ()
purgeUndo =
  Automation.method0 "PurgeUndo"
                     []

queueMarkerEvent :: Prelude.String
                 -> IVApplication a
                 -> Prelude.IO (Prelude.Int)
queueMarkerEvent contextString =
  Automation.function1 "QueueMarkerEvent"
                       [Automation.inString contextString]
                       Automation.outInt

getShowToolbarVA :: IVApplication a
                 -> Prelude.IO (Prelude.Int)
getShowToolbarVA =
  Automation.propertyGet "ShowToolbar"
                         []
                         Automation.outInt

setShowToolbarVA :: Prelude.Int
                 -> IVApplication a
                 -> Prelude.IO ()
setShowToolbarVA lpi2Ret =
  Automation.propertySet "ShowToolbar"
                         [Automation.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVPage
-- 
-- --------------------------------------------------
data IVPage_ a = IVPage__
                   
type IVPage a = Automation.IDispatch (IVPage_ a)
iidIVPage :: Com.IID (IVPage ())
iidIVPage = Com.mkIID "{000D0709-0000-0000-C000-000000000046}"

getDocumentVP :: IVPage a
              -> Prelude.IO (IVDocument ())
getDocumentVP =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getApplicationVP :: IVPage a
                 -> Prelude.IO (IVApplication ())
getApplicationVP =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getStatVP :: IVPage a
          -> Prelude.IO (Prelude.Int)
getStatVP =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getBackgroundVP :: IVPage a
                -> Prelude.IO (Prelude.Int)
getBackgroundVP =
  Automation.propertyGet "Background"
                         []
                         Automation.outInt

setBackgroundVP :: Prelude.Int
                -> IVPage a
                -> Prelude.IO ()
setBackgroundVP lpi2Ret =
  Automation.propertySet "Background"
                         [Automation.inInt lpi2Ret]

paste :: IVPage a
      -> Prelude.IO ()
paste =
  Automation.method0 "Paste"
                     []

pasteSpecial :: Prelude.Int
             -> IVPage a
             -> Prelude.IO ()
pasteSpecial format =
  Automation.method0 "PasteSpecial"
                     [Automation.inInt format]

getObjectTypeVP :: IVPage a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVP =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

drawLine :: Prelude.Double
         -> Prelude.Double
         -> Prelude.Double
         -> Prelude.Double
         -> IVPage a
         -> Prelude.IO (IVShape ())
drawLine xLeft yTop xRight yBottom =
  Automation.function1 "DrawLine"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawRectangle :: Prelude.Double
              -> Prelude.Double
              -> Prelude.Double
              -> Prelude.Double
              -> IVPage a
              -> Prelude.IO (IVShape ())
drawRectangle xLeft yTop xRight yBottom =
  Automation.function1 "DrawRectangle"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawOval :: Prelude.Double
         -> Prelude.Double
         -> Prelude.Double
         -> Prelude.Double
         -> IVPage a
         -> Prelude.IO (IVShape ())
drawOval xLeft yTop xRight yBottom =
  Automation.function1 "DrawOval"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

getIndexVP :: IVPage a
           -> Prelude.IO (Prelude.Int)
getIndexVP =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getNameVP :: IVPage a
          -> Prelude.IO (Prelude.String)
getNameVP =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setNameVP :: Prelude.String
          -> IVPage a
          -> Prelude.IO ()
setNameVP lpbstrRet =
  Automation.propertySet "Name"
                         [Automation.inString lpbstrRet]

getShapesVP :: IVPage a
            -> Prelude.IO (IVShapes ())
getShapesVP =
  Automation.propertyGet "Shapes"
                         []
                         Automation.outIDispatch

dropVP :: Com.IUnknown a0
       -> Prelude.Double
       -> Prelude.Double
       -> IVPage a
       -> Prelude.IO (IVShape ())
dropVP objectToDrop xPos yPos =
  Automation.function1 "Drop"
                       [ Automation.inIUnknown objectToDrop
                       , Automation.inDouble xPos
                       , Automation.inDouble yPos
                       ]
                       Automation.outIDispatch

addGuide :: Prelude.Int
         -> Prelude.Double
         -> Prelude.Double
         -> IVPage a
         -> Prelude.IO (IVShape ())
addGuide type0 xPos yPos =
  Automation.function1 "AddGuide"
                       [ Automation.inInt type0
                       , Automation.inDouble xPos
                       , Automation.inDouble yPos
                       ]
                       Automation.outIDispatch

getBackPageAsObjVP :: IVPage a
                   -> Prelude.IO (IVPage ())
getBackPageAsObjVP =
  Automation.propertyGet "BackPageAsObj"
                         []
                         Automation.outIDispatch

setBackPageFromNameVP :: Prelude.String
                      -> IVPage a
                      -> Prelude.IO ()
setBackPageFromNameVP x0 =
  Automation.propertySet "BackPageFromName"
                         [Automation.inString x0]

printVP :: IVPage a
        -> Prelude.IO ()
printVP =
  Automation.method0 "Print"
                     []

importVP :: Prelude.String
         -> IVPage a
         -> Prelude.IO (IVShape ())
importVP fileName =
  Automation.function1 "Import"
                       [Automation.inString fileName]
                       Automation.outIDispatch

export :: Prelude.String
       -> IVPage a
       -> Prelude.IO ()
export fileName =
  Automation.method0 "Export"
                     [Automation.inString fileName]

getLayersVP :: IVPage a
            -> Prelude.IO (IVLayers ())
getLayersVP =
  Automation.propertyGet "Layers"
                         []
                         Automation.outIDispatch

getPageSheetVP :: IVPage a
               -> Prelude.IO (IVShape ())
getPageSheetVP =
  Automation.propertyGet "PageSheet"
                         []
                         Automation.outIDispatch

deleteVP :: Prelude.Int
         -> IVPage a
         -> Prelude.IO ()
deleteVP fRenumberPages =
  Automation.method0 "Delete"
                     [Automation.inInt fRenumberPages]

centerDrawing :: IVPage a
              -> Prelude.IO ()
centerDrawing =
  Automation.method0 "CenterDrawing"
                     []

getEventListVP :: IVPage a
               -> Prelude.IO (IVEventList ())
getEventListVP =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVP :: IVPage a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVP =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

drawSpline :: SafeArray Prelude.Double
           -> Prelude.Double
           -> Prelude.Int
           -> IVPage a
           -> Prelude.IO (IVShape ())
drawSpline xyArray tolerance flags =
  Automation.function1 "DrawSpline"
                       [ inSafeArray xyArray
                       , Automation.inDouble tolerance
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

drawBezier :: SafeArray Prelude.Double
           -> Prelude.Int
           -> Prelude.Int
           -> IVPage a
           -> Prelude.IO (IVShape ())
drawBezier xyArray degree flags =
  Automation.function1 "DrawBezier"
                       [ inSafeArray xyArray
                       , Automation.inInt degree
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

drawPolyline :: SafeArray Prelude.Double
             -> Prelude.Int
             -> IVPage a
             -> Prelude.IO (IVShape ())
drawPolyline xyArray flags =
  Automation.function1 "DrawPolyline"
                       [ inSafeArray xyArray
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

insertFromFile :: Prelude.String
               -> Prelude.Int
               -> IVPage a
               -> Prelude.IO (IVShape ())
insertFromFile fileName flags =
  Automation.function1 "InsertFromFile"
                       [ Automation.inString fileName
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

insertObject :: Prelude.String
             -> Prelude.Int
             -> IVPage a
             -> Prelude.IO (IVShape ())
insertObject classOrProgID flags =
  Automation.function1 "InsertObject"
                       [ Automation.inString classOrProgID
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

openDrawWindow :: IVPage a
               -> Prelude.IO (IVWindow ())
openDrawWindow =
  Automation.function1 "OpenDrawWindow"
                       []
                       Automation.outIDispatch

dropMany :: SafeArray ()
         -> SafeArray Prelude.Double
         -> IVPage a
         -> Prelude.IO (SafeArray Prelude.Int, Prelude.Int)
dropMany objectsToInstance xyArray =
  Automation.function2 "DropMany"
                       [ inSafeArray objectsToInstance
                       , inSafeArray xyArray
                       ]
                       outSafeArray
                       Automation.outInt

getFormulas :: SafeArray Prelude.Int
            -> IVPage a
            -> Prelude.IO (SafeArray ())
getFormulas sID_SRCStream =
  Automation.method1 "GetFormulas"
                     [inSafeArray sID_SRCStream]
                     outSafeArray

getResults :: SafeArray Prelude.Int
           -> Prelude.Int
           -> SafeArray ()
           -> IVPage a
           -> Prelude.IO (SafeArray ())
getResults sID_SRCStream flags unitsNamesOrCodes =
  Automation.method1 "GetResults"
                     [ inSafeArray sID_SRCStream
                     , Automation.inInt flags
                     , inSafeArray unitsNamesOrCodes
                     ]
                     outSafeArray

setFormulas :: SafeArray Prelude.Int
            -> SafeArray ()
            -> Prelude.Int
            -> IVPage a
            -> Prelude.IO (Prelude.Int)
setFormulas sID_SRCStream formulaArray flags =
  Automation.function1 "SetFormulas"
                       [ inSafeArray sID_SRCStream
                       , inSafeArray formulaArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

setResults :: SafeArray Prelude.Int
           -> SafeArray ()
           -> SafeArray ()
           -> Prelude.Int
           -> IVPage a
           -> Prelude.IO (Prelude.Int)
setResults sID_SRCStream unitsNamesOrCodes resultArray flags =
  Automation.function1 "SetResults"
                       [ inSafeArray sID_SRCStream
                       , inSafeArray unitsNamesOrCodes
                       , inSafeArray resultArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

getConnectsVP :: IVPage a
              -> Prelude.IO (IVConnects ())
getConnectsVP =
  Automation.propertyGet "Connects"
                         []
                         Automation.outIDispatch

getBackPageVP :: (Automation.Variant a0)
              => IVPage a
              -> Prelude.IO (a0)
getBackPageVP =
  Automation.propertyGet "BackPage"
                         []
                         Automation.outVariant

setBackPageVP :: (Automation.Variant a0)
              => a0
              -> IVPage a
              -> Prelude.IO ()
setBackPageVP lpobjRet =
  Automation.propertySet "BackPage"
                         [Automation.inVariant lpobjRet]

layout :: IVPage a
       -> Prelude.IO ()
layout =
  Automation.method0 "Layout"
                     []

boundingBox :: Prelude.Int
            -> IVPage a
            -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
boundingBox flags =
  Automation.method4 "BoundingBox"
                     [Automation.inInt flags]
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble

getIDVP :: IVPage a
        -> Prelude.IO (Prelude.Int)
getIDVP =
  Automation.propertyGet "ID"
                         []
                         Automation.outInt

getOLEObjectsVP :: IVPage a
                -> Prelude.IO (IVOLEObjects ())
getOLEObjectsVP =
  Automation.propertyGet "OLEObjects"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVShape
-- 
-- --------------------------------------------------
data IVShape_ a = IVShape__
                    
type IVShape a = Automation.IDispatch (IVShape_ a)
iidIVShape :: Com.IID (IVShape ())
iidIVShape = Com.mkIID "{000D070C-0000-0000-C000-000000000046}"

group :: IVShape a
      -> Prelude.IO ()
group =
  Automation.method0 "Group"
                     []

bringForward :: IVShape a
             -> Prelude.IO ()
bringForward =
  Automation.method0 "BringForward"
                     []

bringToFront :: IVShape a
             -> Prelude.IO ()
bringToFront =
  Automation.method0 "BringToFront"
                     []

convertToGroup :: IVShape a
               -> Prelude.IO ()
convertToGroup =
  Automation.method0 "ConvertToGroup"
                     []

flipHorizontal :: IVShape a
               -> Prelude.IO ()
flipHorizontal =
  Automation.method0 "FlipHorizontal"
                     []

flipVertical :: IVShape a
             -> Prelude.IO ()
flipVertical =
  Automation.method0 "FlipVertical"
                     []

reverseEnds :: IVShape a
            -> Prelude.IO ()
reverseEnds =
  Automation.method0 "ReverseEnds"
                     []

sendBackward :: IVShape a
             -> Prelude.IO ()
sendBackward =
  Automation.method0 "SendBackward"
                     []

sendToBack :: IVShape a
           -> Prelude.IO ()
sendToBack =
  Automation.method0 "SendToBack"
                     []

rotate90 :: IVShape a
         -> Prelude.IO ()
rotate90 =
  Automation.method0 "Rotate90"
                     []

ungroup :: IVShape a
        -> Prelude.IO ()
ungroup =
  Automation.method0 "Ungroup"
                     []

getDocumentVS :: IVShape a
              -> Prelude.IO (IVDocument ())
getDocumentVS =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getParentVS :: IVShape a
            -> Prelude.IO (Automation.IDispatch ())
getParentVS =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIDispatch

getApplicationVS :: IVShape a
                 -> Prelude.IO (IVApplication ())
getApplicationVS =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getStatVS :: IVShape a
          -> Prelude.IO (Prelude.Int)
getStatVS =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getMasterVS :: IVShape a
            -> Prelude.IO (IVMaster ())
getMasterVS =
  Automation.propertyGet "Master"
                         []
                         Automation.outIDispatch

getTypeVS :: IVShape a
          -> Prelude.IO (Prelude.Int)
getTypeVS =
  Automation.propertyGet "Type"
                         []
                         Automation.outInt

getObjectTypeVS :: IVShape a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVS =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getCellsVS :: Prelude.String
           -> IVShape a
           -> Prelude.IO (IVCell ())
getCellsVS cellName =
  Automation.propertyGet "Cells"
                         [Automation.inString cellName]
                         Automation.outIDispatch

getCellsSRCVS :: Prelude.Int
              -> Prelude.Int
              -> Prelude.Int
              -> IVShape a
              -> Prelude.IO (IVCell ())
getCellsSRCVS section row column =
  Automation.propertyGet "CellsSRC"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt column
                         ]
                         Automation.outIDispatch

getShapesVS :: IVShape a
            -> Prelude.IO (IVShapes ())
getShapesVS =
  Automation.propertyGet "Shapes"
                         []
                         Automation.outIDispatch

getData1VS :: IVShape a
           -> Prelude.IO (Prelude.String)
getData1VS =
  Automation.propertyGet "Data1"
                         []
                         Automation.outString

setData1VS :: Prelude.String
           -> IVShape a
           -> Prelude.IO ()
setData1VS lpbstrRet =
  Automation.propertySet "Data1"
                         [Automation.inString lpbstrRet]

getData2VS :: IVShape a
           -> Prelude.IO (Prelude.String)
getData2VS =
  Automation.propertyGet "Data2"
                         []
                         Automation.outString

setData2VS :: Prelude.String
           -> IVShape a
           -> Prelude.IO ()
setData2VS lpbstrRet =
  Automation.propertySet "Data2"
                         [Automation.inString lpbstrRet]

getData3VS :: IVShape a
           -> Prelude.IO (Prelude.String)
getData3VS =
  Automation.propertyGet "Data3"
                         []
                         Automation.outString

setData3VS :: Prelude.String
           -> IVShape a
           -> Prelude.IO ()
setData3VS lpbstrRet =
  Automation.propertySet "Data3"
                         [Automation.inString lpbstrRet]

getHelpVS :: IVShape a
          -> Prelude.IO (Prelude.String)
getHelpVS =
  Automation.propertyGet "Help"
                         []
                         Automation.outString

setHelpVS :: Prelude.String
          -> IVShape a
          -> Prelude.IO ()
setHelpVS lpbstrRet =
  Automation.propertySet "Help"
                         [Automation.inString lpbstrRet]

getNameIDVS :: IVShape a
            -> Prelude.IO (Prelude.String)
getNameIDVS =
  Automation.propertyGet "NameID"
                         []
                         Automation.outString

getNameVS :: IVShape a
          -> Prelude.IO (Prelude.String)
getNameVS =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setNameVS :: Prelude.String
          -> IVShape a
          -> Prelude.IO ()
setNameVS lpbstrRet =
  Automation.propertySet "Name"
                         [Automation.inString lpbstrRet]

getTextVS :: IVShape a
          -> Prelude.IO (Prelude.String)
getTextVS =
  Automation.propertyGet "Text"
                         []
                         Automation.outString

setTextVS :: Prelude.String
          -> IVShape a
          -> Prelude.IO ()
setTextVS lpbstrRet =
  Automation.propertySet "Text"
                         [Automation.inString lpbstrRet]

getCharCountVS :: IVShape a
               -> Prelude.IO (Prelude.Int)
getCharCountVS =
  Automation.propertyGet "CharCount"
                         []
                         Automation.outInt

getCharactersVS :: IVShape a
                -> Prelude.IO (IVCharacters ())
getCharactersVS =
  Automation.propertyGet "Characters"
                         []
                         Automation.outIDispatch

copy :: IVShape a
     -> Prelude.IO ()
copy =
  Automation.method0 "Copy"
                     []

cut :: IVShape a
    -> Prelude.IO ()
cut =
  Automation.method0 "Cut"
                     []

deleteVS :: IVShape a
         -> Prelude.IO ()
deleteVS =
  Automation.method0 "Delete"
                     []

duplicate :: IVShape a
          -> Prelude.IO ()
duplicate =
  Automation.method0 "Duplicate"
                     []

dropVS :: Com.IUnknown a0
       -> Prelude.Double
       -> Prelude.Double
       -> IVShape a
       -> Prelude.IO (IVShape ())
dropVS objectToDrop xPos yPos =
  Automation.function1 "Drop"
                       [ Automation.inIUnknown objectToDrop
                       , Automation.inDouble xPos
                       , Automation.inDouble yPos
                       ]
                       Automation.outIDispatch

getOneDVS :: IVShape a
          -> Prelude.IO (Prelude.Int)
getOneDVS =
  Automation.propertyGet "OneD"
                         []
                         Automation.outInt

setOneDVS :: Prelude.Int
          -> IVShape a
          -> Prelude.IO ()
setOneDVS lpi2Ret =
  Automation.propertySet "OneD"
                         [Automation.inInt lpi2Ret]

getGeometryCountVS :: IVShape a
                   -> Prelude.IO (Prelude.Int)
getGeometryCountVS =
  Automation.propertyGet "GeometryCount"
                         []
                         Automation.outInt

getRowCountVS :: Prelude.Int
              -> IVShape a
              -> Prelude.IO (Prelude.Int)
getRowCountVS section =
  Automation.propertyGet "RowCount"
                         [Automation.inInt section]
                         Automation.outInt

addSection :: Prelude.Int
           -> IVShape a
           -> Prelude.IO (Prelude.Int)
addSection section =
  Automation.function1 "AddSection"
                       [Automation.inInt section]
                       Automation.outInt

deleteSection :: Prelude.Int
              -> IVShape a
              -> Prelude.IO ()
deleteSection section =
  Automation.method0 "DeleteSection"
                     [Automation.inInt section]

addRow :: Prelude.Int
       -> Prelude.Int
       -> Prelude.Int
       -> IVShape a
       -> Prelude.IO (Prelude.Int)
addRow section row rowTag =
  Automation.function1 "AddRow"
                       [ Automation.inInt section
                       , Automation.inInt row
                       , Automation.inInt rowTag
                       ]
                       Automation.outInt

deleteRow :: Prelude.Int
          -> Prelude.Int
          -> IVShape a
          -> Prelude.IO ()
deleteRow section row =
  Automation.method0 "DeleteRow"
                     [ Automation.inInt section
                     , Automation.inInt row
                     ]

getRowsCellCountVS :: Prelude.Int
                   -> Prelude.Int
                   -> IVShape a
                   -> Prelude.IO (Prelude.Int)
getRowsCellCountVS section row =
  Automation.propertyGet "RowsCellCount"
                         [ Automation.inInt section
                         , Automation.inInt row
                         ]
                         Automation.outInt

getRowTypeVS :: Prelude.Int
             -> Prelude.Int
             -> IVShape a
             -> Prelude.IO (Prelude.Int)
getRowTypeVS section row =
  Automation.propertyGet "RowType"
                         [ Automation.inInt section
                         , Automation.inInt row
                         ]
                         Automation.outInt

setRowTypeVS :: Prelude.Int
             -> Prelude.Int
             -> Prelude.Int
             -> IVShape a
             -> Prelude.IO ()
setRowTypeVS section row lpi2Ret =
  Automation.propertySet "RowType"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt lpi2Ret
                         ]

setCenter :: Prelude.Double
          -> Prelude.Double
          -> IVShape a
          -> Prelude.IO ()
setCenter xPos yPos =
  Automation.method0 "SetCenter"
                     [ Automation.inDouble xPos
                     , Automation.inDouble yPos
                     ]

setBegin :: Prelude.Double
         -> Prelude.Double
         -> IVShape a
         -> Prelude.IO ()
setBegin xPos yPos =
  Automation.method0 "SetBegin"
                     [ Automation.inDouble xPos
                     , Automation.inDouble yPos
                     ]

setEnd :: Prelude.Double
       -> Prelude.Double
       -> IVShape a
       -> Prelude.IO ()
setEnd xPos yPos =
  Automation.method0 "SetEnd"
                     [ Automation.inDouble xPos
                     , Automation.inDouble yPos
                     ]

getConnectsVS :: IVShape a
              -> Prelude.IO (IVConnects ())
getConnectsVS =
  Automation.propertyGet "Connects"
                         []
                         Automation.outIDispatch

getIndexVS :: IVShape a
           -> Prelude.IO (Prelude.Int)
getIndexVS =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getStyleVS :: IVShape a
           -> Prelude.IO (Prelude.String)
getStyleVS =
  Automation.propertyGet "Style"
                         []
                         Automation.outString

setStyleVS :: Prelude.String
           -> IVShape a
           -> Prelude.IO ()
setStyleVS lpbstrRet =
  Automation.propertySet "Style"
                         [Automation.inString lpbstrRet]

setStyleKeepFmtVS :: Prelude.String
                  -> IVShape a
                  -> Prelude.IO ()
setStyleKeepFmtVS x0 =
  Automation.propertySet "StyleKeepFmt"
                         [Automation.inString x0]

getLineStyleVS :: IVShape a
               -> Prelude.IO (Prelude.String)
getLineStyleVS =
  Automation.propertyGet "LineStyle"
                         []
                         Automation.outString

setLineStyleVS :: Prelude.String
               -> IVShape a
               -> Prelude.IO ()
setLineStyleVS lpbstrRet =
  Automation.propertySet "LineStyle"
                         [Automation.inString lpbstrRet]

setLineStyleKeepFmtVS :: Prelude.String
                      -> IVShape a
                      -> Prelude.IO ()
setLineStyleKeepFmtVS x0 =
  Automation.propertySet "LineStyleKeepFmt"
                         [Automation.inString x0]

getFillStyleVS :: IVShape a
               -> Prelude.IO (Prelude.String)
getFillStyleVS =
  Automation.propertyGet "FillStyle"
                         []
                         Automation.outString

setFillStyleVS :: Prelude.String
               -> IVShape a
               -> Prelude.IO ()
setFillStyleVS lpbstrRet =
  Automation.propertySet "FillStyle"
                         [Automation.inString lpbstrRet]

setFillStyleKeepFmtVS :: Prelude.String
                      -> IVShape a
                      -> Prelude.IO ()
setFillStyleKeepFmtVS x0 =
  Automation.propertySet "FillStyleKeepFmt"
                         [Automation.inString x0]

getTextStyleVS :: IVShape a
               -> Prelude.IO (Prelude.String)
getTextStyleVS =
  Automation.propertyGet "TextStyle"
                         []
                         Automation.outString

setTextStyleVS :: Prelude.String
               -> IVShape a
               -> Prelude.IO ()
setTextStyleVS lpbstrRet =
  Automation.propertySet "TextStyle"
                         [Automation.inString lpbstrRet]

setTextStyleKeepFmtVS :: Prelude.String
                      -> IVShape a
                      -> Prelude.IO ()
setTextStyleKeepFmtVS x0 =
  Automation.propertySet "TextStyleKeepFmt"
                         [Automation.inString x0]

exportVS :: Prelude.String
         -> IVShape a
         -> Prelude.IO ()
exportVS fileName =
  Automation.method0 "Export"
                     [Automation.inString fileName]

getAreaIUVS :: IVShape a
            -> Prelude.IO (Prelude.Double)
getAreaIUVS =
  Automation.propertyGet "AreaIU"
                         []
                         Automation.outDouble

getLengthIUVS :: IVShape a
              -> Prelude.IO (Prelude.Double)
getLengthIUVS =
  Automation.propertyGet "LengthIU"
                         []
                         Automation.outDouble

getGeomExIfVS :: Prelude.Int
              -> Prelude.Double
              -> IVShape a
              -> Prelude.IO (Com.IUnknown ())
getGeomExIfVS fFill lineRes =
  Automation.propertyGet "GeomExIf"
                         [ Automation.inInt fFill
                         , Automation.inDouble lineRes
                         ]
                         Automation.outIUnknown

getUniqueIDVS :: Prelude.Int
              -> IVShape a
              -> Prelude.IO (Prelude.String)
getUniqueIDVS fUniqueID =
  Automation.propertyGet "UniqueID"
                         [Automation.inInt fUniqueID]
                         Automation.outString

getContainingPageVS :: IVShape a
                    -> Prelude.IO (IVPage ())
getContainingPageVS =
  Automation.propertyGet "ContainingPage"
                         []
                         Automation.outIDispatch

getContainingMasterVS :: IVShape a
                      -> Prelude.IO (IVMaster ())
getContainingMasterVS =
  Automation.propertyGet "ContainingMaster"
                         []
                         Automation.outIDispatch

getContainingShapeVS :: IVShape a
                     -> Prelude.IO (IVShape ())
getContainingShapeVS =
  Automation.propertyGet "ContainingShape"
                         []
                         Automation.outIDispatch

getSectionExistsVS :: Prelude.Int
                   -> Prelude.Int
                   -> IVShape a
                   -> Prelude.IO (Prelude.Int)
getSectionExistsVS section fLocalExists =
  Automation.propertyGet "SectionExists"
                         [ Automation.inInt section
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getRowExistsVS :: Prelude.Int
               -> Prelude.Int
               -> Prelude.Int
               -> IVShape a
               -> Prelude.IO (Prelude.Int)
getRowExistsVS section row fLocalExists =
  Automation.propertyGet "RowExists"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getCellExistsVS :: Prelude.String
                -> Prelude.Int
                -> IVShape a
                -> Prelude.IO (Prelude.Int)
getCellExistsVS cellName fLocalExists =
  Automation.propertyGet "CellExists"
                         [ Automation.inString cellName
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getCellsSRCExistsVS :: Prelude.Int
                    -> Prelude.Int
                    -> Prelude.Int
                    -> Prelude.Int
                    -> IVShape a
                    -> Prelude.IO (Prelude.Int)
getCellsSRCExistsVS section row column fLocalExists =
  Automation.propertyGet "CellsSRCExists"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt column
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getLayerCountVS :: IVShape a
                -> Prelude.IO (Prelude.Int)
getLayerCountVS =
  Automation.propertyGet "LayerCount"
                         []
                         Automation.outInt

getLayerVS :: Prelude.Int
           -> IVShape a
           -> Prelude.IO (IVLayer ())
getLayerVS index =
  Automation.propertyGet "Layer"
                         [Automation.inInt index]
                         Automation.outIDispatch

addNamedRow :: Prelude.Int
            -> Prelude.String
            -> Prelude.Int
            -> IVShape a
            -> Prelude.IO (Prelude.Int)
addNamedRow section rowName rowTag =
  Automation.function1 "AddNamedRow"
                       [ Automation.inInt section
                       , Automation.inString rowName
                       , Automation.inInt rowTag
                       ]
                       Automation.outInt

addRows :: Prelude.Int
        -> Prelude.Int
        -> Prelude.Int
        -> Prelude.Int
        -> IVShape a
        -> Prelude.IO (Prelude.Int)
addRows section row rowTag rowCount =
  Automation.function1 "AddRows"
                       [ Automation.inInt section
                       , Automation.inInt row
                       , Automation.inInt rowTag
                       , Automation.inInt rowCount
                       ]
                       Automation.outInt

getEventListVS :: IVShape a
               -> Prelude.IO (IVEventList ())
getEventListVS =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVS :: IVShape a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVS =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

drawLineVS :: Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> IVShape a
           -> Prelude.IO (IVShape ())
drawLineVS xLeft yTop xRight yBottom =
  Automation.function1 "DrawLine"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawRectangleVS :: Prelude.Double
                -> Prelude.Double
                -> Prelude.Double
                -> Prelude.Double
                -> IVShape a
                -> Prelude.IO (IVShape ())
drawRectangleVS xLeft yTop xRight yBottom =
  Automation.function1 "DrawRectangle"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawOvalVS :: Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> IVShape a
           -> Prelude.IO (IVShape ())
drawOvalVS xLeft yTop xRight yBottom =
  Automation.function1 "DrawOval"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawSplineVS :: SafeArray Prelude.Double
             -> Prelude.Double
             -> Prelude.Int
             -> IVShape a
             -> Prelude.IO (IVShape ())
drawSplineVS xyArray tolerance flags =
  Automation.function1 "DrawSpline"
                       [ inSafeArray xyArray
                       , Automation.inDouble tolerance
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

drawBezierVS :: SafeArray Prelude.Double
             -> Prelude.Int
             -> Prelude.Int
             -> IVShape a
             -> Prelude.IO (IVShape ())
drawBezierVS xyArray degree flags =
  Automation.function1 "DrawBezier"
                       [ inSafeArray xyArray
                       , Automation.inInt degree
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

drawPolylineVS :: SafeArray Prelude.Double
               -> Prelude.Int
               -> IVShape a
               -> Prelude.IO (IVShape ())
drawPolylineVS xyArray flags =
  Automation.function1 "DrawPolyline"
                       [ inSafeArray xyArray
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

fitCurve :: Prelude.Double
         -> Prelude.Int
         -> IVShape a
         -> Prelude.IO ()
fitCurve tolerance flags =
  Automation.method0 "FitCurve"
                     [ Automation.inDouble tolerance
                     , Automation.inInt flags
                     ]

importVS :: Prelude.String
         -> IVShape a
         -> Prelude.IO (IVShape ())
importVS fileName =
  Automation.function1 "Import"
                       [Automation.inString fileName]
                       Automation.outIDispatch

centerDrawingVS :: IVShape a
                -> Prelude.IO ()
centerDrawingVS =
  Automation.method0 "CenterDrawing"
                     []

insertFromFileVS :: Prelude.String
                 -> Prelude.Int
                 -> IVShape a
                 -> Prelude.IO (IVShape ())
insertFromFileVS fileName flags =
  Automation.function1 "InsertFromFile"
                       [ Automation.inString fileName
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

insertObjectVS :: Prelude.String
               -> Prelude.Int
               -> IVShape a
               -> Prelude.IO (IVShape ())
insertObjectVS classOrProgID flags =
  Automation.function1 "InsertObject"
                       [ Automation.inString classOrProgID
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

getClassIDVS :: IVShape a
             -> Prelude.IO (Prelude.String)
getClassIDVS =
  Automation.propertyGet "ClassID"
                         []
                         Automation.outString

getForeignTypeVS :: IVShape a
                 -> Prelude.IO (Prelude.Int)
getForeignTypeVS =
  Automation.propertyGet "ForeignType"
                         []
                         Automation.outInt

getObjectVS :: IVShape a
            -> Prelude.IO (Automation.IDispatch ())
getObjectVS =
  Automation.propertyGet "Object"
                         []
                         Automation.outIDispatch

openDrawWindowVS :: IVShape a
                 -> Prelude.IO (IVWindow ())
openDrawWindowVS =
  Automation.function1 "OpenDrawWindow"
                       []
                       Automation.outIDispatch

openSheetWindow :: IVShape a
                -> Prelude.IO (IVWindow ())
openSheetWindow =
  Automation.function1 "OpenSheetWindow"
                       []
                       Automation.outIDispatch

getIDVS :: IVShape a
        -> Prelude.IO (Prelude.Int)
getIDVS =
  Automation.propertyGet "ID"
                         []
                         Automation.outInt

dropManyVS :: SafeArray ()
           -> SafeArray Prelude.Double
           -> IVShape a
           -> Prelude.IO (SafeArray Prelude.Int, Prelude.Int)
dropManyVS objectsToInstance xyArray =
  Automation.function2 "DropMany"
                       [ inSafeArray objectsToInstance
                       , inSafeArray xyArray
                       ]
                       outSafeArray
                       Automation.outInt

getFormulasVS :: SafeArray Prelude.Int
              -> IVShape a
              -> Prelude.IO (SafeArray ())
getFormulasVS sRCStream =
  Automation.method1 "GetFormulas"
                     [inSafeArray sRCStream]
                     outSafeArray

getResultsVS :: SafeArray Prelude.Int
             -> Prelude.Int
             -> SafeArray ()
             -> IVShape a
             -> Prelude.IO (SafeArray ())
getResultsVS sRCStream flags unitsNamesOrCodes =
  Automation.method1 "GetResults"
                     [ inSafeArray sRCStream
                     , Automation.inInt flags
                     , inSafeArray unitsNamesOrCodes
                     ]
                     outSafeArray

setFormulasVS :: SafeArray Prelude.Int
              -> SafeArray ()
              -> Prelude.Int
              -> IVShape a
              -> Prelude.IO (Prelude.Int)
setFormulasVS sRCStream formulaArray flags =
  Automation.function1 "SetFormulas"
                       [ inSafeArray sRCStream
                       , inSafeArray formulaArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

setResultsVS :: SafeArray Prelude.Int
             -> SafeArray ()
             -> SafeArray ()
             -> Prelude.Int
             -> IVShape a
             -> Prelude.IO (Prelude.Int)
setResultsVS sRCStream unitsNamesOrCodes resultArray flags =
  Automation.function1 "SetResults"
                       [ inSafeArray sRCStream
                       , inSafeArray unitsNamesOrCodes
                       , inSafeArray resultArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

getFromConnectsVS :: IVShape a
                  -> Prelude.IO (IVConnects ())
getFromConnectsVS =
  Automation.propertyGet "FromConnects"
                         []
                         Automation.outIDispatch

layoutVS :: IVShape a
         -> Prelude.IO ()
layoutVS =
  Automation.method0 "Layout"
                     []

boundingBoxVS :: Prelude.Int
              -> IVShape a
              -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
boundingBoxVS flags =
  Automation.method4 "BoundingBox"
                     [Automation.inInt flags]
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble

hitTest :: Prelude.Double
        -> Prelude.Double
        -> Prelude.Double
        -> IVShape a
        -> Prelude.IO (Prelude.Int)
hitTest xPos yPos tolerance =
  Automation.function1 "HitTest"
                       [ Automation.inDouble xPos
                       , Automation.inDouble yPos
                       , Automation.inDouble tolerance
                       ]
                       Automation.outInt

getHyperlinkVS :: IVShape a
               -> Prelude.IO (IVHyperlink ())
getHyperlinkVS =
  Automation.propertyGet "Hyperlink"
                         []
                         Automation.outIDispatch

getProgIDVS :: IVShape a
            -> Prelude.IO (Prelude.String)
getProgIDVS =
  Automation.propertyGet "ProgID"
                         []
                         Automation.outString

getObjectIsInheritedVS :: IVShape a
                       -> Prelude.IO (Prelude.Int)
getObjectIsInheritedVS =
  Automation.propertyGet "ObjectIsInherited"
                         []
                         Automation.outInt

getPathsVS :: IVShape a
           -> Prelude.IO (IVPaths ())
getPathsVS =
  Automation.propertyGet "Paths"
                         []
                         Automation.outIDispatch

getPathsLocalVS :: IVShape a
                -> Prelude.IO (IVPaths ())
getPathsLocalVS =
  Automation.propertyGet "PathsLocal"
                         []
                         Automation.outIDispatch

addHyperlink :: IVShape a
             -> Prelude.IO (IVHyperlink ())
addHyperlink =
  Automation.function1 "AddHyperlink"
                       []
                       Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVMaster
-- 
-- --------------------------------------------------
data IVMaster_ a = IVMaster__
                     
type IVMaster a = Automation.IDispatch (IVMaster_ a)
iidIVMaster :: Com.IID (IVMaster ())
iidIVMaster = Com.mkIID "{000D0707-0000-0000-C000-000000000046}"

getDocumentVM :: IVMaster a
              -> Prelude.IO (IVDocument ())
getDocumentVM =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getPromptVM :: IVMaster a
            -> Prelude.IO (Prelude.String)
getPromptVM =
  Automation.propertyGet "Prompt"
                         []
                         Automation.outString

setPromptVM :: Prelude.String
            -> IVMaster a
            -> Prelude.IO ()
setPromptVM lpbstrRet =
  Automation.propertySet "Prompt"
                         [Automation.inString lpbstrRet]

getAlignNameVM :: IVMaster a
               -> Prelude.IO (Prelude.Int)
getAlignNameVM =
  Automation.propertyGet "AlignName"
                         []
                         Automation.outInt

setAlignNameVM :: Prelude.Int
               -> IVMaster a
               -> Prelude.IO ()
setAlignNameVM lpi2Ret =
  Automation.propertySet "AlignName"
                         [Automation.inInt lpi2Ret]

getIconSizeVM :: IVMaster a
              -> Prelude.IO (Prelude.Int)
getIconSizeVM =
  Automation.propertyGet "IconSize"
                         []
                         Automation.outInt

setIconSizeVM :: Prelude.Int
              -> IVMaster a
              -> Prelude.IO ()
setIconSizeVM lpi2Ret =
  Automation.propertySet "IconSize"
                         [Automation.inInt lpi2Ret]

getIconUpdateVM :: IVMaster a
                -> Prelude.IO (Prelude.Int)
getIconUpdateVM =
  Automation.propertyGet "IconUpdate"
                         []
                         Automation.outInt

setIconUpdateVM :: Prelude.Int
                -> IVMaster a
                -> Prelude.IO ()
setIconUpdateVM lpi2Ret =
  Automation.propertySet "IconUpdate"
                         [Automation.inInt lpi2Ret]

getApplicationVM :: IVMaster a
                 -> Prelude.IO (IVApplication ())
getApplicationVM =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getStatVM :: IVMaster a
          -> Prelude.IO (Prelude.Int)
getStatVM =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getObjectTypeVM :: IVMaster a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVM =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getNameVM :: IVMaster a
          -> Prelude.IO (Prelude.String)
getNameVM =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setNameVM :: Prelude.String
          -> IVMaster a
          -> Prelude.IO ()
setNameVM lpbstrRet =
  Automation.propertySet "Name"
                         [Automation.inString lpbstrRet]

getShapesVM :: IVMaster a
            -> Prelude.IO (IVShapes ())
getShapesVM =
  Automation.propertyGet "Shapes"
                         []
                         Automation.outIDispatch

indexVM :: IVMaster a
        -> Prelude.IO (Prelude.Int)
indexVM =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getOneDVM :: IVMaster a
          -> Prelude.IO (Prelude.Int)
getOneDVM =
  Automation.propertyGet "OneD"
                         []
                         Automation.outInt

deleteVM0 :: IVMaster a
          -> Prelude.IO ()
deleteVM0 =
  Automation.method0 "Delete"
                     []

getUniqueIDVM :: IVMaster a
              -> Prelude.IO (Prelude.String)
getUniqueIDVM =
  Automation.propertyGet "UniqueID"
                         []
                         Automation.outString

getLayersVM :: IVMaster a
            -> Prelude.IO (IVLayers ())
getLayersVM =
  Automation.propertyGet "Layers"
                         []
                         Automation.outIDispatch

getPageSheetVM :: IVMaster a
               -> Prelude.IO (IVShape ())
getPageSheetVM =
  Automation.propertyGet "PageSheet"
                         []
                         Automation.outIDispatch

dropVM :: Com.IUnknown a0
       -> Prelude.Double
       -> Prelude.Double
       -> IVMaster a
       -> Prelude.IO (IVShape ())
dropVM objectToDrop xPos yPos =
  Automation.function1 "Drop"
                       [ Automation.inIUnknown objectToDrop
                       , Automation.inDouble xPos
                       , Automation.inDouble yPos
                       ]
                       Automation.outIDispatch

centerDrawingVM :: IVMaster a
                -> Prelude.IO ()
centerDrawingVM =
  Automation.method0 "CenterDrawing"
                     []

getEventListVM :: IVMaster a
               -> Prelude.IO (IVEventList ())
getEventListVM =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVM :: IVMaster a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVM =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

drawLineVM :: Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> IVMaster a
           -> Prelude.IO (IVShape ())
drawLineVM xLeft yTop xRight yBottom =
  Automation.function1 "DrawLine"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawRectangleVM :: Prelude.Double
                -> Prelude.Double
                -> Prelude.Double
                -> Prelude.Double
                -> IVMaster a
                -> Prelude.IO (IVShape ())
drawRectangleVM xLeft yTop xRight yBottom =
  Automation.function1 "DrawRectangle"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawOvalVM :: Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> IVMaster a
           -> Prelude.IO (IVShape ())
drawOvalVM xLeft yTop xRight yBottom =
  Automation.function1 "DrawOval"
                       [ Automation.inDouble xLeft
                       , Automation.inDouble yTop
                       , Automation.inDouble xRight
                       , Automation.inDouble yBottom
                       ]
                       Automation.outIDispatch

drawSplineVM :: SafeArray Prelude.Double
             -> Prelude.Double
             -> Prelude.Int
             -> IVMaster a
             -> Prelude.IO (IVShape ())
drawSplineVM xyArray tolerance flags =
  Automation.function1 "DrawSpline"
                       [ inSafeArray xyArray
                       , Automation.inDouble tolerance
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

drawBezierVM :: SafeArray Prelude.Double
             -> Prelude.Int
             -> Prelude.Int
             -> IVMaster a
             -> Prelude.IO (IVShape ())
drawBezierVM xyArray degree flags =
  Automation.function1 "DrawBezier"
                       [ inSafeArray xyArray
                       , Automation.inInt degree
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

drawPolylineVM :: SafeArray Prelude.Double
               -> Prelude.Int
               -> IVMaster a
               -> Prelude.IO (IVShape ())
drawPolylineVM xyArray flags =
  Automation.function1 "DrawPolyline"
                       [ inSafeArray xyArray
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

importVM :: Prelude.String
         -> IVMaster a
         -> Prelude.IO (IVShape ())
importVM fileName =
  Automation.function1 "Import"
                       [Automation.inString fileName]
                       Automation.outIDispatch

exportVM :: Prelude.String
         -> IVMaster a
         -> Prelude.IO ()
exportVM fileName =
  Automation.method0 "Export"
                     [Automation.inString fileName]

insertFromFileVM :: Prelude.String
                 -> Prelude.Int
                 -> IVMaster a
                 -> Prelude.IO (IVShape ())
insertFromFileVM fileName flags =
  Automation.function1 "InsertFromFile"
                       [ Automation.inString fileName
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

insertObjectVM :: Prelude.String
               -> Prelude.Int
               -> IVMaster a
               -> Prelude.IO (IVShape ())
insertObjectVM classOrProgID flags =
  Automation.function1 "InsertObject"
                       [ Automation.inString classOrProgID
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

openDrawWindowVM :: IVMaster a
                 -> Prelude.IO (IVWindow ())
openDrawWindowVM =
  Automation.function1 "OpenDrawWindow"
                       []
                       Automation.outIDispatch

openIconWindow :: IVMaster a
               -> Prelude.IO (IVWindow ())
openIconWindow =
  Automation.function1 "OpenIconWindow"
                       []
                       Automation.outIDispatch

open :: IVMaster a
     -> Prelude.IO (IVMaster ())
open =
  Automation.function1 "Open"
                       []
                       Automation.outIDispatch

closeVM :: IVMaster a
        -> Prelude.IO ()
closeVM =
  Automation.method0 "Close"
                     []

dropManyVM :: SafeArray ()
           -> SafeArray Prelude.Double
           -> IVMaster a
           -> Prelude.IO (SafeArray Prelude.Int, Prelude.Int)
dropManyVM objectsToInstance xyArray =
  Automation.function2 "DropMany"
                       [ inSafeArray objectsToInstance
                       , inSafeArray xyArray
                       ]
                       outSafeArray
                       Automation.outInt

getFormulasVM :: SafeArray Prelude.Int
              -> IVMaster a
              -> Prelude.IO (SafeArray ())
getFormulasVM sID_SRCStream =
  Automation.method1 "GetFormulas"
                     [inSafeArray sID_SRCStream]
                     outSafeArray

getResultsVM :: SafeArray Prelude.Int
             -> Prelude.Int
             -> SafeArray ()
             -> IVMaster a
             -> Prelude.IO (SafeArray ())
getResultsVM sID_SRCStream flags unitsNamesOrCodes =
  Automation.method1 "GetResults"
                     [ inSafeArray sID_SRCStream
                     , Automation.inInt flags
                     , inSafeArray unitsNamesOrCodes
                     ]
                     outSafeArray

setFormulasVM :: SafeArray Prelude.Int
              -> SafeArray ()
              -> Prelude.Int
              -> IVMaster a
              -> Prelude.IO (Prelude.Int)
setFormulasVM sID_SRCStream formulaArray flags =
  Automation.function1 "SetFormulas"
                       [ inSafeArray sID_SRCStream
                       , inSafeArray formulaArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

setResultsVM :: SafeArray Prelude.Int
             -> SafeArray ()
             -> SafeArray ()
             -> Prelude.Int
             -> IVMaster a
             -> Prelude.IO (Prelude.Int)
setResultsVM sID_SRCStream unitsNamesOrCodes resultArray flags =
  Automation.function1 "SetResults"
                       [ inSafeArray sID_SRCStream
                       , inSafeArray unitsNamesOrCodes
                       , inSafeArray resultArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

getConnectsVM :: IVMaster a
              -> Prelude.IO (IVConnects ())
getConnectsVM =
  Automation.propertyGet "Connects"
                         []
                         Automation.outIDispatch

importIcon :: Prelude.String
           -> IVMaster a
           -> Prelude.IO ()
importIcon fileName =
  Automation.method0 "ImportIcon"
                     [Automation.inString fileName]

exportIcon :: Prelude.String
           -> Prelude.Int
           -> IVMaster a
           -> Prelude.IO ()
exportIcon fileName flags =
  Automation.method0 "ExportIcon"
                     [ Automation.inString fileName
                     , Automation.inInt flags
                     ]

layoutVM :: IVMaster a
         -> Prelude.IO ()
layoutVM =
  Automation.method0 "Layout"
                     []

boundingBoxVM :: Prelude.Int
              -> IVMaster a
              -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
boundingBoxVM flags =
  Automation.method4 "BoundingBox"
                     [Automation.inInt flags]
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble

getIDVM :: IVMaster a
        -> Prelude.IO (Prelude.Int)
getIDVM =
  Automation.propertyGet "ID"
                         []
                         Automation.outInt

getOLEObjectsVM :: IVMaster a
                -> Prelude.IO (IVOLEObjects ())
getOLEObjectsVM =
  Automation.propertyGet "OLEObjects"
                         []
                         Automation.outIDispatch

getPatternFlagsVM :: IVMaster a
                  -> Prelude.IO (Prelude.Int)
getPatternFlagsVM =
  Automation.propertyGet "PatternFlags"
                         []
                         Automation.outInt

setPatternFlagsVM :: Prelude.Int
                  -> IVMaster a
                  -> Prelude.IO ()
setPatternFlagsVM lpi2Ret =
  Automation.propertySet "PatternFlags"
                         [Automation.inInt lpi2Ret]

getMatchByNameVM :: IVMaster a
                 -> Prelude.IO (Prelude.Int)
getMatchByNameVM =
  Automation.propertyGet "MatchByName"
                         []
                         Automation.outInt

setMatchByNameVM :: Prelude.Int
                 -> IVMaster a
                 -> Prelude.IO ()
setMatchByNameVM lpi2Ret =
  Automation.propertySet "MatchByName"
                         [Automation.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVShapes
-- 
-- --------------------------------------------------
data IVShapes_ a = IVShapes__
                     
type IVShapes a = Automation.IDispatch (IVShapes_ a)
iidIVShapes :: Com.IID (IVShapes ())
iidIVShapes = Com.mkIID "{000D070D-0000-0000-C000-000000000046}"

applicationVS :: IVShapes a
              -> Prelude.IO (IVApplication ())
applicationVS =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVS :: IVShapes a
             -> Prelude.IO (Prelude.Int)
objectTypeVS =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getItemVS :: (Automation.Variant a0)
          => a0
          -> IVShapes a
          -> Prelude.IO (IVShape ())
getItemVS nameUIDOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameUIDOrIndex]
                         Automation.outIDispatch

getCountVS :: IVShapes a
           -> Prelude.IO (Prelude.Int)
getCountVS =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

documentVS :: IVShapes a
           -> Prelude.IO (IVDocument ())
documentVS =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

containingPageVS :: IVShapes a
                 -> Prelude.IO (IVPage ())
containingPageVS =
  Automation.propertyGet "ContainingPage"
                         []
                         Automation.outIDispatch

containingMasterVS :: IVShapes a
                   -> Prelude.IO (IVMaster ())
containingMasterVS =
  Automation.propertyGet "ContainingMaster"
                         []
                         Automation.outIDispatch

containingShapeVS :: IVShapes a
                  -> Prelude.IO (IVShape ())
containingShapeVS =
  Automation.propertyGet "ContainingShape"
                         []
                         Automation.outIDispatch

centerDrawingVS0 :: IVShapes a
                 -> Prelude.IO ()
centerDrawingVS0 =
  Automation.method0 "CenterDrawing"
                     []

statVS :: IVShapes a
       -> Prelude.IO (Prelude.Int)
statVS =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

eventListVS :: IVShapes a
            -> Prelude.IO (IVEventList ())
eventListVS =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVS :: IVShapes a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVS =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getItemFromIDVS :: Prelude.Int
                -> IVShapes a
                -> Prelude.IO (IVShape ())
getItemFromIDVS objectID =
  Automation.propertyGet "ItemFromID"
                         [Automation.inInt objectID]
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVEventList
-- 
-- --------------------------------------------------
data IVEventList_ a = IVEventList__
                        
type IVEventList a = Automation.IDispatch (IVEventList_ a)
iidIVEventList :: Com.IID (IVEventList ())
iidIVEventList = Com.mkIID "{000D071B-0000-0000-C000-000000000046}"

getApplicationVEL :: IVEventList a
                  -> Prelude.IO (IVApplication ())
getApplicationVEL =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getObjectTypeVEL :: IVEventList a
                 -> Prelude.IO (Prelude.Int)
getObjectTypeVEL =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getItemVEL :: Prelude.Int
           -> IVEventList a
           -> Prelude.IO (IVEvent ())
getItemVEL index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

getCountVEL :: IVEventList a
            -> Prelude.IO (Prelude.Int)
getCountVEL =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

addVEL :: Prelude.Int
       -> Prelude.Int
       -> Prelude.String
       -> Prelude.String
       -> IVEventList a
       -> Prelude.IO (IVEvent ())
addVEL eventCode action target targetArgs =
  Automation.function1 "Add"
                       [ Automation.inInt eventCode
                       , Automation.inInt action
                       , Automation.inString target
                       , Automation.inString targetArgs
                       ]
                       Automation.outIDispatch

addAdvise :: (Automation.Variant a0)
          => Prelude.Int
          -> a0
          -> Prelude.String
          -> Prelude.String
          -> IVEventList a
          -> Prelude.IO (IVEvent ())
addAdvise eventCode sinkIUnkOrIDisp iIDSink targetArgs =
  Automation.function1 "AddAdvise"
                       [ Automation.inInt eventCode
                       , Automation.inVariant sinkIUnkOrIDisp
                       , Automation.inString iIDSink
                       , Automation.inString targetArgs
                       ]
                       Automation.outIDispatch

getItemFromIDVEL :: Prelude.Int
                 -> IVEventList a
                 -> Prelude.IO (IVEvent ())
getItemFromIDVEL objectID =
  Automation.propertyGet "ItemFromID"
                         [Automation.inInt objectID]
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVEvent
-- 
-- --------------------------------------------------
data IVEvent_ a = IVEvent__
                    
type IVEvent a = Automation.IDispatch (IVEvent_ a)
iidIVEvent :: Com.IID (IVEvent ())
iidIVEvent = Com.mkIID "{000D071A-0000-0000-C000-000000000046}"

getApplicationVE :: IVEvent a
                 -> Prelude.IO (IVApplication ())
getApplicationVE =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getEventListVE :: IVEvent a
               -> Prelude.IO (IVEventList ())
getEventListVE =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getIndexVE :: IVEvent a
           -> Prelude.IO (Prelude.Int)
getIndexVE =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getEventVE :: IVEvent a
           -> Prelude.IO (Prelude.Int)
getEventVE =
  Automation.propertyGet "Event"
                         []
                         Automation.outInt

setEventVE :: Prelude.Int
           -> IVEvent a
           -> Prelude.IO ()
setEventVE lpi2Ret =
  Automation.propertySet "Event"
                         [Automation.inInt lpi2Ret]

getActionVE :: IVEvent a
            -> Prelude.IO (Prelude.Int)
getActionVE =
  Automation.propertyGet "Action"
                         []
                         Automation.outInt

setActionVE :: Prelude.Int
            -> IVEvent a
            -> Prelude.IO ()
setActionVE lpi2Ret =
  Automation.propertySet "Action"
                         [Automation.inInt lpi2Ret]

getTargetVE :: IVEvent a
            -> Prelude.IO (Prelude.String)
getTargetVE =
  Automation.propertyGet "Target"
                         []
                         Automation.outString

setTargetVE :: Prelude.String
            -> IVEvent a
            -> Prelude.IO ()
setTargetVE lpbstrRet =
  Automation.propertySet "Target"
                         [Automation.inString lpbstrRet]

getTargetArgsVE :: IVEvent a
                -> Prelude.IO (Prelude.String)
getTargetArgsVE =
  Automation.propertyGet "TargetArgs"
                         []
                         Automation.outString

setTargetArgsVE :: Prelude.String
                -> IVEvent a
                -> Prelude.IO ()
setTargetArgsVE lpbstrRet =
  Automation.propertySet "TargetArgs"
                         [Automation.inString lpbstrRet]

trigger :: Prelude.String
        -> IVEvent a
        -> Prelude.IO ()
trigger contextString =
  Automation.method0 "Trigger"
                     [Automation.inString contextString]

deleteVE :: IVEvent a
         -> Prelude.IO ()
deleteVE =
  Automation.method0 "Delete"
                     []

getObjectTypeVE :: IVEvent a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVE =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getIDVE :: IVEvent a
        -> Prelude.IO (Prelude.Int)
getIDVE =
  Automation.propertyGet "ID"
                         []
                         Automation.outInt

getEnabledVE :: IVEvent a
             -> Prelude.IO (Prelude.Int)
getEnabledVE =
  Automation.propertyGet "Enabled"
                         []
                         Automation.outInt

setEnabledVE :: Prelude.Int
             -> IVEvent a
             -> Prelude.IO ()
setEnabledVE lpi2Ret =
  Automation.propertySet "Enabled"
                         [Automation.inInt lpi2Ret]

getPersistableVE :: IVEvent a
                 -> Prelude.IO (Prelude.Int)
getPersistableVE =
  Automation.propertyGet "Persistable"
                         []
                         Automation.outInt

getPersistentVE :: IVEvent a
                -> Prelude.IO (Prelude.Int)
getPersistentVE =
  Automation.propertyGet "Persistent"
                         []
                         Automation.outInt

setPersistentVE :: Prelude.Int
                -> IVEvent a
                -> Prelude.IO ()
setPersistentVE lpi2Ret =
  Automation.propertySet "Persistent"
                         [Automation.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVLayers
-- 
-- --------------------------------------------------
data IVLayers_ a = IVLayers__
                     
type IVLayers a = Automation.IDispatch (IVLayers_ a)
iidIVLayers :: Com.IID (IVLayers ())
iidIVLayers = Com.mkIID "{000D0713-0000-0000-C000-000000000046}"

getApplicationVL :: IVLayers a
                 -> Prelude.IO (IVApplication ())
getApplicationVL =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getDocumentVL :: IVLayers a
              -> Prelude.IO (IVDocument ())
getDocumentVL =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getPageVL :: IVLayers a
          -> Prelude.IO (IVPage ())
getPageVL =
  Automation.propertyGet "Page"
                         []
                         Automation.outIDispatch

getMasterVL :: IVLayers a
            -> Prelude.IO (IVMaster ())
getMasterVL =
  Automation.propertyGet "Master"
                         []
                         Automation.outIDispatch

getCountVL :: IVLayers a
           -> Prelude.IO (Prelude.Int)
getCountVL =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getItemVL :: (Automation.Variant a0)
          => a0
          -> IVLayers a
          -> Prelude.IO (IVLayer ())
getItemVL nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

addVL :: Prelude.String
      -> IVLayers a
      -> Prelude.IO (IVLayer ())
addVL layerName =
  Automation.function1 "Add"
                       [Automation.inString layerName]
                       Automation.outIDispatch

getObjectTypeVL :: IVLayers a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVL =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getStatVL :: IVLayers a
          -> Prelude.IO (Prelude.Int)
getStatVL =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getEventListVL :: IVLayers a
               -> Prelude.IO (IVEventList ())
getEventListVL =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVL :: IVLayers a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVL =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVLayer
-- 
-- --------------------------------------------------
data IVLayer_ a = IVLayer__
                    
type IVLayer a = Automation.IDispatch (IVLayer_ a)
iidIVLayer :: Com.IID (IVLayer ())
iidIVLayer = Com.mkIID "{000D0712-0000-0000-C000-000000000046}"

applicationVL :: IVLayer a
              -> Prelude.IO (IVApplication ())
applicationVL =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

documentVL :: IVLayer a
           -> Prelude.IO (IVDocument ())
documentVL =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

pageVL :: IVLayer a
       -> Prelude.IO (IVPage ())
pageVL =
  Automation.propertyGet "Page"
                         []
                         Automation.outIDispatch

masterVL :: IVLayer a
         -> Prelude.IO (IVMaster ())
masterVL =
  Automation.propertyGet "Master"
                         []
                         Automation.outIDispatch

getIndexVL :: IVLayer a
           -> Prelude.IO (Prelude.Int)
getIndexVL =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getRowVL :: IVLayer a
         -> Prelude.IO (Prelude.Int)
getRowVL =
  Automation.propertyGet "Row"
                         []
                         Automation.outInt

addVL0 :: IVShape a0
       -> Prelude.Int
       -> IVLayer a
       -> Prelude.IO ()
addVL0 sheetObject fPresMems =
  Automation.method0 "Add"
                     [ Automation.inIDispatch sheetObject
                     , Automation.inInt fPresMems
                     ]

remove :: IVShape a0
       -> Prelude.Int
       -> IVLayer a
       -> Prelude.IO ()
remove sheetObject fPresMems =
  Automation.method0 "Remove"
                     [ Automation.inIDispatch sheetObject
                     , Automation.inInt fPresMems
                     ]

deleteVL :: Prelude.Int
         -> IVLayer a
         -> Prelude.IO ()
deleteVL fDeleteShapes =
  Automation.method0 "Delete"
                     [Automation.inInt fDeleteShapes]

getNameVL :: IVLayer a
          -> Prelude.IO (Prelude.String)
getNameVL =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setNameVL :: Prelude.String
          -> IVLayer a
          -> Prelude.IO ()
setNameVL lpbstrRet =
  Automation.propertySet "Name"
                         [Automation.inString lpbstrRet]

getCellsCVL :: Prelude.Int
            -> IVLayer a
            -> Prelude.IO (IVCell ())
getCellsCVL column =
  Automation.propertyGet "CellsC"
                         [Automation.inInt column]
                         Automation.outIDispatch

objectTypeVL :: IVLayer a
             -> Prelude.IO (Prelude.Int)
objectTypeVL =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

statVL :: IVLayer a
       -> Prelude.IO (Prelude.Int)
statVL =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

eventListVL :: IVLayer a
            -> Prelude.IO (IVEventList ())
eventListVL =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVL :: IVLayer a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVL =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVCell
-- 
-- --------------------------------------------------
data IVCell_ a = IVCell__
                   
type IVCell a = Automation.IDispatch (IVCell_ a)
iidIVCell :: Com.IID (IVCell ())
iidIVCell = Com.mkIID "{000D0701-0000-0000-C000-000000000046}"

getApplicationVC :: IVCell a
                 -> Prelude.IO (IVApplication ())
getApplicationVC =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getObjectTypeVC :: IVCell a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVC =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getErrorVC :: IVCell a
           -> Prelude.IO (Prelude.Int)
getErrorVC =
  Automation.propertyGet "Error"
                         []
                         Automation.outInt

getFormulaVC :: IVCell a
             -> Prelude.IO (Prelude.String)
getFormulaVC =
  Automation.propertyGet "Formula"
                         []
                         Automation.outString

setFormulaVC :: Prelude.String
             -> IVCell a
             -> Prelude.IO ()
setFormulaVC lpbstrRet =
  Automation.propertySet "Formula"
                         [Automation.inString lpbstrRet]

setFormulaForceVC :: Prelude.String
                  -> IVCell a
                  -> Prelude.IO ()
setFormulaForceVC x0 =
  Automation.propertySet "FormulaForce"
                         [Automation.inString x0]

glueTo :: IVCell a0
       -> IVCell a
       -> Prelude.IO ()
glueTo cellObject =
  Automation.method0 "GlueTo"
                     [Automation.inIDispatch cellObject]

glueToPos :: IVShape a0
          -> Prelude.Double
          -> Prelude.Double
          -> IVCell a
          -> Prelude.IO ()
glueToPos sheetObject xPercent yPercent =
  Automation.method0 "GlueToPos"
                     [ Automation.inIDispatch sheetObject
                     , Automation.inDouble xPercent
                     , Automation.inDouble yPercent
                     ]

getResultVC :: (Automation.Variant a0)
            => a0
            -> IVCell a
            -> Prelude.IO (Prelude.Double)
getResultVC unitsNameOrCode =
  Automation.propertyGet "Result"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outDouble

setResultVC :: (Automation.Variant a0)
            => a0
            -> Prelude.Double
            -> IVCell a
            -> Prelude.IO ()
setResultVC unitsNameOrCode lpr8Ret =
  Automation.propertySet "Result"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inDouble lpr8Ret
                         ]

setResultForceVC :: (Automation.Variant a0)
                 => a0
                 -> Prelude.Double
                 -> IVCell a
                 -> Prelude.IO ()
setResultForceVC unitsNameOrCode x0 =
  Automation.propertySet "ResultForce"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inDouble x0
                         ]

getResultIUVC :: IVCell a
              -> Prelude.IO (Prelude.Double)
getResultIUVC =
  Automation.propertyGet "ResultIU"
                         []
                         Automation.outDouble

setResultIUVC :: Prelude.Double
              -> IVCell a
              -> Prelude.IO ()
setResultIUVC lpr8Ret =
  Automation.propertySet "ResultIU"
                         [Automation.inDouble lpr8Ret]

setResultIUForceVC :: Prelude.Double
                   -> IVCell a
                   -> Prelude.IO ()
setResultIUForceVC x0 =
  Automation.propertySet "ResultIUForce"
                         [Automation.inDouble x0]

getStatVC :: IVCell a
          -> Prelude.IO (Prelude.Int)
getStatVC =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getUnitsVC :: IVCell a
           -> Prelude.IO (Prelude.Int)
getUnitsVC =
  Automation.propertyGet "Units"
                         []
                         Automation.outInt

getNameVC :: IVCell a
          -> Prelude.IO (Prelude.String)
getNameVC =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

getLocalNameVC :: IVCell a
               -> Prelude.IO (Prelude.String)
getLocalNameVC =
  Automation.propertyGet "LocalName"
                         []
                         Automation.outString

setRowNameVC :: Prelude.String
             -> IVCell a
             -> Prelude.IO ()
setRowNameVC lpbstrRet =
  Automation.propertySet "RowName"
                         [Automation.inString lpbstrRet]

getDocumentVC :: IVCell a
              -> Prelude.IO (IVDocument ())
getDocumentVC =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getShapeVC :: IVCell a
           -> Prelude.IO (IVShape ())
getShapeVC =
  Automation.propertyGet "Shape"
                         []
                         Automation.outIDispatch

getStyleVC :: IVCell a
           -> Prelude.IO (IVStyle ())
getStyleVC =
  Automation.propertyGet "Style"
                         []
                         Automation.outIDispatch

getSectionVC :: IVCell a
             -> Prelude.IO (Prelude.Int)
getSectionVC =
  Automation.propertyGet "Section"
                         []
                         Automation.outInt

getRowVC :: IVCell a
         -> Prelude.IO (Prelude.Int)
getRowVC =
  Automation.propertyGet "Row"
                         []
                         Automation.outInt

getColumnVC :: IVCell a
            -> Prelude.IO (Prelude.Int)
getColumnVC =
  Automation.propertyGet "Column"
                         []
                         Automation.outInt

getIsConstantVC :: IVCell a
                -> Prelude.IO (Prelude.Int)
getIsConstantVC =
  Automation.propertyGet "IsConstant"
                         []
                         Automation.outInt

getIsInheritedVC :: IVCell a
                 -> Prelude.IO (Prelude.Int)
getIsInheritedVC =
  Automation.propertyGet "IsInherited"
                         []
                         Automation.outInt

getResultIntVC :: (Automation.Variant a0)
               => a0
               -> Prelude.Int
               -> IVCell a
               -> Prelude.IO (Prelude.Int)
getResultIntVC unitsNameOrCode fRound =
  Automation.propertyGet "ResultInt"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inInt fRound
                         ]
                         Automation.outInt

setResultFromIntVC :: (Automation.Variant a0)
                   => a0
                   -> Prelude.Int
                   -> IVCell a
                   -> Prelude.IO ()
setResultFromIntVC unitsNameOrCode x0 =
  Automation.propertySet "ResultFromInt"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inInt x0
                         ]

setResultFromIntForceVC :: (Automation.Variant a0)
                        => a0
                        -> Prelude.Int
                        -> IVCell a
                        -> Prelude.IO ()
setResultFromIntForceVC unitsNameOrCode x0 =
  Automation.propertySet "ResultFromIntForce"
                         [ Automation.inVariant unitsNameOrCode
                         , Automation.inInt x0
                         ]

getResultStrVC :: (Automation.Variant a0)
               => a0
               -> IVCell a
               -> Prelude.IO (Prelude.String)
getResultStrVC unitsNameOrCode =
  Automation.propertyGet "ResultStr"
                         [Automation.inVariant unitsNameOrCode]
                         Automation.outString

triggerVC :: IVCell a
          -> Prelude.IO ()
triggerVC =
  Automation.method0 "Trigger"
                     []

getRowNameVC :: IVCell a
             -> Prelude.IO (Prelude.String)
getRowNameVC =
  Automation.propertyGet "RowName"
                         []
                         Automation.outString

getEventListVC :: IVCell a
               -> Prelude.IO (IVEventList ())
getEventListVC =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVC :: IVCell a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVC =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVStyle
-- 
-- --------------------------------------------------
data IVStyle_ a = IVStyle__
                    
type IVStyle a = Automation.IDispatch (IVStyle_ a)
iidIVStyle :: Com.IID (IVStyle ())
iidIVStyle = Com.mkIID "{000D070E-0000-0000-C000-000000000046}"

applicationVS0 :: IVStyle a
               -> Prelude.IO (IVApplication ())
applicationVS0 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

statVS0 :: IVStyle a
        -> Prelude.IO (Prelude.Int)
statVS0 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

objectTypeVS0 :: IVStyle a
              -> Prelude.IO (Prelude.Int)
objectTypeVS0 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

nameVS :: IVStyle a
       -> Prelude.IO (Prelude.String)
nameVS =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

nameVS0 :: Prelude.String
        -> IVStyle a
        -> Prelude.IO ()
nameVS0 lpbstrRet =
  Automation.propertySet "Name"
                         [Automation.inString lpbstrRet]

indexVS :: IVStyle a
        -> Prelude.IO (Prelude.Int)
indexVS =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

documentVS0 :: IVStyle a
            -> Prelude.IO (IVDocument ())
documentVS0 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getBasedOnVS :: IVStyle a
             -> Prelude.IO (Prelude.String)
getBasedOnVS =
  Automation.propertyGet "BasedOn"
                         []
                         Automation.outString

setBasedOnVS :: Prelude.String
             -> IVStyle a
             -> Prelude.IO ()
setBasedOnVS lpbstrRet =
  Automation.propertySet "BasedOn"
                         [Automation.inString lpbstrRet]

getTextBasedOnVS :: IVStyle a
                 -> Prelude.IO (Prelude.String)
getTextBasedOnVS =
  Automation.propertyGet "TextBasedOn"
                         []
                         Automation.outString

setTextBasedOnVS :: Prelude.String
                 -> IVStyle a
                 -> Prelude.IO ()
setTextBasedOnVS lpbstrRet =
  Automation.propertySet "TextBasedOn"
                         [Automation.inString lpbstrRet]

getLineBasedOnVS :: IVStyle a
                 -> Prelude.IO (Prelude.String)
getLineBasedOnVS =
  Automation.propertyGet "LineBasedOn"
                         []
                         Automation.outString

setLineBasedOnVS :: Prelude.String
                 -> IVStyle a
                 -> Prelude.IO ()
setLineBasedOnVS lpbstrRet =
  Automation.propertySet "LineBasedOn"
                         [Automation.inString lpbstrRet]

getFillBasedOnVS :: IVStyle a
                 -> Prelude.IO (Prelude.String)
getFillBasedOnVS =
  Automation.propertyGet "FillBasedOn"
                         []
                         Automation.outString

setFillBasedOnVS :: Prelude.String
                 -> IVStyle a
                 -> Prelude.IO ()
setFillBasedOnVS lpbstrRet =
  Automation.propertySet "FillBasedOn"
                         [Automation.inString lpbstrRet]

getIncludesTextVS :: IVStyle a
                  -> Prelude.IO (Prelude.Int)
getIncludesTextVS =
  Automation.propertyGet "IncludesText"
                         []
                         Automation.outInt

setIncludesTextVS :: Prelude.Int
                  -> IVStyle a
                  -> Prelude.IO ()
setIncludesTextVS lpi2Ret =
  Automation.propertySet "IncludesText"
                         [Automation.inInt lpi2Ret]

getIncludesLineVS :: IVStyle a
                  -> Prelude.IO (Prelude.Int)
getIncludesLineVS =
  Automation.propertyGet "IncludesLine"
                         []
                         Automation.outInt

setIncludesLineVS :: Prelude.Int
                  -> IVStyle a
                  -> Prelude.IO ()
setIncludesLineVS lpi2Ret =
  Automation.propertySet "IncludesLine"
                         [Automation.inInt lpi2Ret]

getIncludesFillVS :: IVStyle a
                  -> Prelude.IO (Prelude.Int)
getIncludesFillVS =
  Automation.propertyGet "IncludesFill"
                         []
                         Automation.outInt

setIncludesFillVS :: Prelude.Int
                  -> IVStyle a
                  -> Prelude.IO ()
setIncludesFillVS lpi2Ret =
  Automation.propertySet "IncludesFill"
                         [Automation.inInt lpi2Ret]

cellsVS :: Prelude.String
        -> IVStyle a
        -> Prelude.IO (IVCell ())
cellsVS cellName =
  Automation.propertyGet "Cells"
                         [Automation.inString cellName]
                         Automation.outIDispatch

deleteVS0 :: IVStyle a
          -> Prelude.IO ()
deleteVS0 =
  Automation.method0 "Delete"
                     []

eventListVS0 :: IVStyle a
             -> Prelude.IO (IVEventList ())
eventListVS0 =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVS0 :: IVStyle a
                  -> Prelude.IO (Prelude.Int)
persistsEventsVS0 =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

iDVS :: IVStyle a
     -> Prelude.IO (Prelude.Int)
iDVS =
  Automation.propertyGet "ID"
                         []
                         Automation.outInt

getFormulasVS0 :: SafeArray Prelude.Int
               -> IVStyle a
               -> Prelude.IO (SafeArray ())
getFormulasVS0 sRCStream =
  Automation.method1 "GetFormulas"
                     [inSafeArray sRCStream]
                     outSafeArray

getResultsVS0 :: SafeArray Prelude.Int
              -> Prelude.Int
              -> SafeArray ()
              -> IVStyle a
              -> Prelude.IO (SafeArray ())
getResultsVS0 sRCStream flags unitsNamesOrCodes =
  Automation.method1 "GetResults"
                     [ inSafeArray sRCStream
                     , Automation.inInt flags
                     , inSafeArray unitsNamesOrCodes
                     ]
                     outSafeArray

setFormulasVS0 :: SafeArray Prelude.Int
               -> SafeArray ()
               -> Prelude.Int
               -> IVStyle a
               -> Prelude.IO (Prelude.Int)
setFormulasVS0 sRCStream formulaArray flags =
  Automation.function1 "SetFormulas"
                       [ inSafeArray sRCStream
                       , inSafeArray formulaArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

setResultsVS0 :: SafeArray Prelude.Int
              -> SafeArray ()
              -> SafeArray ()
              -> Prelude.Int
              -> IVStyle a
              -> Prelude.IO (Prelude.Int)
setResultsVS0 sRCStream unitsNamesOrCodes resultArray flags =
  Automation.function1 "SetResults"
                       [ inSafeArray sRCStream
                       , inSafeArray unitsNamesOrCodes
                       , inSafeArray resultArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVWindow
-- 
-- --------------------------------------------------
data IVWindow_ a = IVWindow__
                     
type IVWindow a = Automation.IDispatch (IVWindow_ a)
iidIVWindow :: Com.IID (IVWindow ())
iidIVWindow = Com.mkIID "{000D0710-0000-0000-C000-000000000046}"

getApplicationVW :: IVWindow a
                 -> Prelude.IO (IVApplication ())
getApplicationVW =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getStatVW :: IVWindow a
          -> Prelude.IO (Prelude.Int)
getStatVW =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getObjectTypeVW :: IVWindow a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVW =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

activate :: IVWindow a
         -> Prelude.IO ()
activate =
  Automation.method0 "Activate"
                     []

getTypeVW :: IVWindow a
          -> Prelude.IO (Prelude.Int)
getTypeVW =
  Automation.propertyGet "Type"
                         []
                         Automation.outInt

getDocumentVW :: IVWindow a
              -> Prelude.IO (IVDocument ())
getDocumentVW =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getPageAsObjVW :: IVWindow a
               -> Prelude.IO (IVPage ())
getPageAsObjVW =
  Automation.propertyGet "PageAsObj"
                         []
                         Automation.outIDispatch

setPageFromNameVW :: Prelude.String
                  -> IVWindow a
                  -> Prelude.IO ()
setPageFromNameVW x0 =
  Automation.propertySet "PageFromName"
                         [Automation.inString x0]

getZoomVW :: IVWindow a
          -> Prelude.IO (Prelude.Double)
getZoomVW =
  Automation.propertyGet "Zoom"
                         []
                         Automation.outDouble

setZoomVW :: Prelude.Double
          -> IVWindow a
          -> Prelude.IO ()
setZoomVW lpr8Ret =
  Automation.propertySet "Zoom"
                         [Automation.inDouble lpr8Ret]

closeVW :: IVWindow a
        -> Prelude.IO ()
closeVW =
  Automation.method0 "Close"
                     []

selectAll :: IVWindow a
          -> Prelude.IO ()
selectAll =
  Automation.method0 "SelectAll"
                     []

deselectAll :: IVWindow a
            -> Prelude.IO ()
deselectAll =
  Automation.method0 "DeselectAll"
                     []

getSelectionVW :: IVWindow a
               -> Prelude.IO (IVSelection ())
getSelectionVW =
  Automation.propertyGet "Selection"
                         []
                         Automation.outIDispatch

select :: IVShape a0
       -> Prelude.Int
       -> IVWindow a
       -> Prelude.IO ()
select sheetObject selectAction =
  Automation.method0 "Select"
                     [ Automation.inIDispatch sheetObject
                     , Automation.inInt selectAction
                     ]

getIndexVW :: IVWindow a
           -> Prelude.IO (Prelude.Int)
getIndexVW =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

cutVW :: IVWindow a
      -> Prelude.IO ()
cutVW =
  Automation.method0 "Cut"
                     []

copyVW :: IVWindow a
       -> Prelude.IO ()
copyVW =
  Automation.method0 "Copy"
                     []

pasteVW :: IVWindow a
        -> Prelude.IO ()
pasteVW =
  Automation.method0 "Paste"
                     []

deleteVW :: IVWindow a
         -> Prelude.IO ()
deleteVW =
  Automation.method0 "Delete"
                     []

duplicateVW :: IVWindow a
            -> Prelude.IO ()
duplicateVW =
  Automation.method0 "Duplicate"
                     []

groupVW :: IVWindow a
        -> Prelude.IO ()
groupVW =
  Automation.method0 "Group"
                     []

union :: IVWindow a
      -> Prelude.IO ()
union =
  Automation.method0 "Union"
                     []

combine :: IVWindow a
        -> Prelude.IO ()
combine =
  Automation.method0 "Combine"
                     []

fragment :: IVWindow a
         -> Prelude.IO ()
fragment =
  Automation.method0 "Fragment"
                     []

addToGroup :: IVWindow a
           -> Prelude.IO ()
addToGroup =
  Automation.method0 "AddToGroup"
                     []

removeFromGroup :: IVWindow a
                -> Prelude.IO ()
removeFromGroup =
  Automation.method0 "RemoveFromGroup"
                     []

getSubTypeVW :: IVWindow a
             -> Prelude.IO (Prelude.Int)
getSubTypeVW =
  Automation.propertyGet "SubType"
                         []
                         Automation.outInt

intersect :: IVWindow a
          -> Prelude.IO ()
intersect =
  Automation.method0 "Intersect"
                     []

subtract :: IVWindow a
         -> Prelude.IO ()
subtract =
  Automation.method0 "Subtract"
                     []

getEventListVW :: IVWindow a
               -> Prelude.IO (IVEventList ())
getEventListVW =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVW :: IVWindow a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVW =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getWindowHandleVW :: IVWindow a
                  -> Prelude.IO (Prelude.Int)
getWindowHandleVW =
  Automation.propertyGet "WindowHandle"
                         []
                         Automation.outInt

getWindowHandle32VW :: IVWindow a
                    -> Prelude.IO (Prelude.Int)
getWindowHandle32VW =
  Automation.propertyGet "WindowHandle32"
                         []
                         Automation.outInt

trim :: IVWindow a
     -> Prelude.IO ()
trim =
  Automation.method0 "Trim"
                     []

join :: IVWindow a
     -> Prelude.IO ()
join =
  Automation.method0 "Join"
                     []

getShowRulersVW :: IVWindow a
                -> Prelude.IO (Prelude.Int)
getShowRulersVW =
  Automation.propertyGet "ShowRulers"
                         []
                         Automation.outInt

setShowRulersVW :: Prelude.Int
                -> IVWindow a
                -> Prelude.IO ()
setShowRulersVW lpi2Ret =
  Automation.propertySet "ShowRulers"
                         [Automation.inInt lpi2Ret]

getShowGridVW :: IVWindow a
              -> Prelude.IO (Prelude.Int)
getShowGridVW =
  Automation.propertyGet "ShowGrid"
                         []
                         Automation.outInt

setShowGridVW :: Prelude.Int
              -> IVWindow a
              -> Prelude.IO ()
setShowGridVW lpi2Ret =
  Automation.propertySet "ShowGrid"
                         [Automation.inInt lpi2Ret]

getShowGuidesVW :: IVWindow a
                -> Prelude.IO (Prelude.Int)
getShowGuidesVW =
  Automation.propertyGet "ShowGuides"
                         []
                         Automation.outInt

setShowGuidesVW :: Prelude.Int
                -> IVWindow a
                -> Prelude.IO ()
setShowGuidesVW lpi2Ret =
  Automation.propertySet "ShowGuides"
                         [Automation.inInt lpi2Ret]

getShowConnectPointsVW :: IVWindow a
                       -> Prelude.IO (Prelude.Int)
getShowConnectPointsVW =
  Automation.propertyGet "ShowConnectPoints"
                         []
                         Automation.outInt

setShowConnectPointsVW :: Prelude.Int
                       -> IVWindow a
                       -> Prelude.IO ()
setShowConnectPointsVW lpi2Ret =
  Automation.propertySet "ShowConnectPoints"
                         [Automation.inInt lpi2Ret]

getShowPageBreaksVW :: IVWindow a
                    -> Prelude.IO (Prelude.Int)
getShowPageBreaksVW =
  Automation.propertyGet "ShowPageBreaks"
                         []
                         Automation.outInt

setShowPageBreaksVW :: Prelude.Int
                    -> IVWindow a
                    -> Prelude.IO ()
setShowPageBreaksVW lpi2Ret =
  Automation.propertySet "ShowPageBreaks"
                         [Automation.inInt lpi2Ret]

getPageVW :: (Automation.Variant a0)
          => IVWindow a
          -> Prelude.IO (a0)
getPageVW =
  Automation.propertyGet "Page"
                         []
                         Automation.outVariant

setPageVW :: (Automation.Variant a0)
          => a0
          -> IVWindow a
          -> Prelude.IO ()
setPageVW lpobjRet =
  Automation.propertySet "Page"
                         [Automation.inVariant lpobjRet]

dockedStencils :: IVWindow a
               -> Prelude.IO (SafeArray Prelude.String)
dockedStencils =
  Automation.method1 "DockedStencils"
                     []
                     outSafeArray

getMasterVW :: (Automation.Variant a0)
            => IVWindow a
            -> Prelude.IO (a0)
getMasterVW =
  Automation.propertyGet "Master"
                         []
                         Automation.outVariant

getShowScrollBarsVW :: IVWindow a
                    -> Prelude.IO (Prelude.Int)
getShowScrollBarsVW =
  Automation.propertyGet "ShowScrollBars"
                         []
                         Automation.outInt

setShowScrollBarsVW :: Prelude.Int
                    -> IVWindow a
                    -> Prelude.IO ()
setShowScrollBarsVW lpi2Ret =
  Automation.propertySet "ShowScrollBars"
                         [Automation.inInt lpi2Ret]

-- --------------------------------------------------
-- 
-- interface IVSelection
-- 
-- --------------------------------------------------
data IVSelection_ a = IVSelection__
                        
type IVSelection a = Automation.IDispatch (IVSelection_ a)
iidIVSelection :: Com.IID (IVSelection ())
iidIVSelection = Com.mkIID "{000D070B-0000-0000-C000-000000000046}"

applicationVS1 :: IVSelection a
               -> Prelude.IO (IVApplication ())
applicationVS1 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

statVS1 :: IVSelection a
        -> Prelude.IO (Prelude.Int)
statVS1 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

objectTypeVS1 :: IVSelection a
              -> Prelude.IO (Prelude.Int)
objectTypeVS1 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

itemVS :: Prelude.Int
       -> IVSelection a
       -> Prelude.IO (IVShape ())
itemVS index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

countVS :: IVSelection a
        -> Prelude.IO (Prelude.Int)
countVS =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

exportVS0 :: Prelude.String
          -> IVSelection a
          -> Prelude.IO ()
exportVS0 fileName =
  Automation.method0 "Export"
                     [Automation.inString fileName]

documentVS1 :: IVSelection a
            -> Prelude.IO (IVDocument ())
documentVS1 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

containingPageVS0 :: IVSelection a
                  -> Prelude.IO (IVPage ())
containingPageVS0 =
  Automation.propertyGet "ContainingPage"
                         []
                         Automation.outIDispatch

containingMasterVS0 :: IVSelection a
                    -> Prelude.IO (IVMaster ())
containingMasterVS0 =
  Automation.propertyGet "ContainingMaster"
                         []
                         Automation.outIDispatch

containingShapeVS0 :: IVSelection a
                   -> Prelude.IO (IVShape ())
containingShapeVS0 =
  Automation.propertyGet "ContainingShape"
                         []
                         Automation.outIDispatch

bringForwardVS :: IVSelection a
               -> Prelude.IO ()
bringForwardVS =
  Automation.method0 "BringForward"
                     []

bringToFrontVS :: IVSelection a
               -> Prelude.IO ()
bringToFrontVS =
  Automation.method0 "BringToFront"
                     []

sendBackwardVS :: IVSelection a
               -> Prelude.IO ()
sendBackwardVS =
  Automation.method0 "SendBackward"
                     []

sendToBackVS :: IVSelection a
             -> Prelude.IO ()
sendToBackVS =
  Automation.method0 "SendToBack"
                     []

styleVS :: IVSelection a
        -> Prelude.IO (Prelude.String)
styleVS =
  Automation.propertyGet "Style"
                         []
                         Automation.outString

styleVS0 :: Prelude.String
         -> IVSelection a
         -> Prelude.IO ()
styleVS0 lpbstrRet =
  Automation.propertySet "Style"
                         [Automation.inString lpbstrRet]

styleKeepFmtVS :: Prelude.String
               -> IVSelection a
               -> Prelude.IO ()
styleKeepFmtVS x0 =
  Automation.propertySet "StyleKeepFmt"
                         [Automation.inString x0]

lineStyleVS :: IVSelection a
            -> Prelude.IO (Prelude.String)
lineStyleVS =
  Automation.propertyGet "LineStyle"
                         []
                         Automation.outString

lineStyleVS0 :: Prelude.String
             -> IVSelection a
             -> Prelude.IO ()
lineStyleVS0 lpbstrRet =
  Automation.propertySet "LineStyle"
                         [Automation.inString lpbstrRet]

lineStyleKeepFmtVS :: Prelude.String
                   -> IVSelection a
                   -> Prelude.IO ()
lineStyleKeepFmtVS x0 =
  Automation.propertySet "LineStyleKeepFmt"
                         [Automation.inString x0]

fillStyleVS :: IVSelection a
            -> Prelude.IO (Prelude.String)
fillStyleVS =
  Automation.propertyGet "FillStyle"
                         []
                         Automation.outString

fillStyleVS0 :: Prelude.String
             -> IVSelection a
             -> Prelude.IO ()
fillStyleVS0 lpbstrRet =
  Automation.propertySet "FillStyle"
                         [Automation.inString lpbstrRet]

fillStyleKeepFmtVS :: Prelude.String
                   -> IVSelection a
                   -> Prelude.IO ()
fillStyleKeepFmtVS x0 =
  Automation.propertySet "FillStyleKeepFmt"
                         [Automation.inString x0]

textStyleVS :: IVSelection a
            -> Prelude.IO (Prelude.String)
textStyleVS =
  Automation.propertyGet "TextStyle"
                         []
                         Automation.outString

textStyleVS0 :: Prelude.String
             -> IVSelection a
             -> Prelude.IO ()
textStyleVS0 lpbstrRet =
  Automation.propertySet "TextStyle"
                         [Automation.inString lpbstrRet]

textStyleKeepFmtVS :: Prelude.String
                   -> IVSelection a
                   -> Prelude.IO ()
textStyleKeepFmtVS x0 =
  Automation.propertySet "TextStyleKeepFmt"
                         [Automation.inString x0]

combineVS :: IVSelection a
          -> Prelude.IO ()
combineVS =
  Automation.method0 "Combine"
                     []

fragmentVS :: IVSelection a
           -> Prelude.IO ()
fragmentVS =
  Automation.method0 "Fragment"
                     []

intersectVS :: IVSelection a
            -> Prelude.IO ()
intersectVS =
  Automation.method0 "Intersect"
                     []

subtractVS :: IVSelection a
           -> Prelude.IO ()
subtractVS =
  Automation.method0 "Subtract"
                     []

unionVS :: IVSelection a
        -> Prelude.IO ()
unionVS =
  Automation.method0 "Union"
                     []

flipHorizontalVS :: IVSelection a
                 -> Prelude.IO ()
flipHorizontalVS =
  Automation.method0 "FlipHorizontal"
                     []

flipVerticalVS :: IVSelection a
               -> Prelude.IO ()
flipVerticalVS =
  Automation.method0 "FlipVertical"
                     []

reverseEndsVS :: IVSelection a
              -> Prelude.IO ()
reverseEndsVS =
  Automation.method0 "ReverseEnds"
                     []

rotate90VS :: IVSelection a
           -> Prelude.IO ()
rotate90VS =
  Automation.method0 "Rotate90"
                     []

copyVS :: IVSelection a
       -> Prelude.IO ()
copyVS =
  Automation.method0 "Copy"
                     []

cutVS :: IVSelection a
      -> Prelude.IO ()
cutVS =
  Automation.method0 "Cut"
                     []

deleteVS1 :: IVSelection a
          -> Prelude.IO ()
deleteVS1 =
  Automation.method0 "Delete"
                     []

duplicateVS :: IVSelection a
            -> Prelude.IO ()
duplicateVS =
  Automation.method0 "Duplicate"
                     []

groupVS :: IVSelection a
        -> Prelude.IO ()
groupVS =
  Automation.method0 "Group"
                     []

convertToGroupVS :: IVSelection a
                 -> Prelude.IO ()
convertToGroupVS =
  Automation.method0 "ConvertToGroup"
                     []

ungroupVS :: IVSelection a
          -> Prelude.IO ()
ungroupVS =
  Automation.method0 "Ungroup"
                     []

selectAllVS :: IVSelection a
            -> Prelude.IO ()
selectAllVS =
  Automation.method0 "SelectAll"
                     []

deselectAllVS :: IVSelection a
              -> Prelude.IO ()
deselectAllVS =
  Automation.method0 "DeselectAll"
                     []

selectVS :: IVShape a0
         -> Prelude.Int
         -> IVSelection a
         -> Prelude.IO ()
selectVS sheetObject selectAction =
  Automation.method0 "Select"
                     [ Automation.inIDispatch sheetObject
                     , Automation.inInt selectAction
                     ]

eventListVS1 :: IVSelection a
             -> Prelude.IO (IVEventList ())
eventListVS1 =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVS1 :: IVSelection a
                  -> Prelude.IO (Prelude.Int)
persistsEventsVS1 =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

trimVS :: IVSelection a
       -> Prelude.IO ()
trimVS =
  Automation.method0 "Trim"
                     []

joinVS :: IVSelection a
       -> Prelude.IO ()
joinVS =
  Automation.method0 "Join"
                     []

fitCurveVS :: Prelude.Double
           -> Prelude.Int
           -> IVSelection a
           -> Prelude.IO ()
fitCurveVS tolerance flags =
  Automation.method0 "FitCurve"
                     [ Automation.inDouble tolerance
                     , Automation.inInt flags
                     ]

layoutVS0 :: IVSelection a
          -> Prelude.IO ()
layoutVS0 =
  Automation.method0 "Layout"
                     []

boundingBoxVS0 :: Prelude.Int
               -> IVSelection a
               -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
boundingBoxVS0 flags =
  Automation.method4 "BoundingBox"
                     [Automation.inInt flags]
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble

-- --------------------------------------------------
-- 
-- interface IVConnects
-- 
-- --------------------------------------------------
data IVConnects_ a = IVConnects__
                       
type IVConnects a = Automation.IDispatch (IVConnects_ a)
iidIVConnects :: Com.IID (IVConnects ())
iidIVConnects = Com.mkIID "{000D0704-0000-0000-C000-000000000046}"

applicationVC :: IVConnects a
              -> Prelude.IO (IVApplication ())
applicationVC =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getItemVC :: Prelude.Int
          -> IVConnects a
          -> Prelude.IO (IVConnect ())
getItemVC index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

getCountVC :: IVConnects a
           -> Prelude.IO (Prelude.Int)
getCountVC =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getFromSheetVC :: IVConnects a
               -> Prelude.IO (IVShape ())
getFromSheetVC =
  Automation.propertyGet "FromSheet"
                         []
                         Automation.outIDispatch

objectTypeVC :: IVConnects a
             -> Prelude.IO (Prelude.Int)
objectTypeVC =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

documentVC :: IVConnects a
           -> Prelude.IO (IVDocument ())
documentVC =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

statVC :: IVConnects a
       -> Prelude.IO (Prelude.Int)
statVC =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getToSheetVC :: IVConnects a
             -> Prelude.IO (IVShape ())
getToSheetVC =
  Automation.propertyGet "ToSheet"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVConnect
-- 
-- --------------------------------------------------
data IVConnect_ a = IVConnect__
                      
type IVConnect a = Automation.IDispatch (IVConnect_ a)
iidIVConnect :: Com.IID (IVConnect ())
iidIVConnect = Com.mkIID "{000D0703-0000-0000-C000-000000000046}"

applicationVC0 :: IVConnect a
               -> Prelude.IO (IVApplication ())
applicationVC0 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

statVC0 :: IVConnect a
        -> Prelude.IO (Prelude.Int)
statVC0 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

fromSheetVC :: IVConnect a
            -> Prelude.IO (IVShape ())
fromSheetVC =
  Automation.propertyGet "FromSheet"
                         []
                         Automation.outIDispatch

toSheetVC :: IVConnect a
          -> Prelude.IO (IVShape ())
toSheetVC =
  Automation.propertyGet "ToSheet"
                         []
                         Automation.outIDispatch

getFromCellVC :: IVConnect a
              -> Prelude.IO (IVCell ())
getFromCellVC =
  Automation.propertyGet "FromCell"
                         []
                         Automation.outIDispatch

getToCellVC :: IVConnect a
            -> Prelude.IO (IVCell ())
getToCellVC =
  Automation.propertyGet "ToCell"
                         []
                         Automation.outIDispatch

getFromPartVC :: IVConnect a
              -> Prelude.IO (Prelude.Int)
getFromPartVC =
  Automation.propertyGet "FromPart"
                         []
                         Automation.outInt

getToPartVC :: IVConnect a
            -> Prelude.IO (Prelude.Int)
getToPartVC =
  Automation.propertyGet "ToPart"
                         []
                         Automation.outInt

objectTypeVC0 :: IVConnect a
              -> Prelude.IO (Prelude.Int)
objectTypeVC0 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getIndexVC :: IVConnect a
           -> Prelude.IO (Prelude.Int)
getIndexVC =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

documentVC0 :: IVConnect a
            -> Prelude.IO (IVDocument ())
documentVC0 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVOLEObjects
-- 
-- --------------------------------------------------
data IVOLEObjects_ a = IVOLEObjects__
                         
type IVOLEObjects a = Automation.IDispatch (IVOLEObjects_ a)
iidIVOLEObjects :: Com.IID (IVOLEObjects ())
iidIVOLEObjects =
  Com.mkIID "{000D071E-0000-0000-C000-000000000046}"

getApplicationVOLEO :: IVOLEObjects a
                    -> Prelude.IO (IVApplication ())
getApplicationVOLEO =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getObjectTypeVOLEO :: IVOLEObjects a
                   -> Prelude.IO (Prelude.Int)
getObjectTypeVOLEO =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getStatVOLEO :: IVOLEObjects a
             -> Prelude.IO (Prelude.Int)
getStatVOLEO =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getItemVOLEO :: (Automation.Variant a0)
             => a0
             -> IVOLEObjects a
             -> Prelude.IO (IVOLEObject ())
getItemVOLEO nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

getCountVOLEO :: IVOLEObjects a
              -> Prelude.IO (Prelude.Int)
getCountVOLEO =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVOLEObject
-- 
-- --------------------------------------------------
data IVOLEObject_ a = IVOLEObject__
                        
type IVOLEObject a = Automation.IDispatch (IVOLEObject_ a)
iidIVOLEObject :: Com.IID (IVOLEObject ())
iidIVOLEObject = Com.mkIID "{000D071F-0000-0000-C000-000000000046}"

applicationVOLEO :: IVOLEObject a
                 -> Prelude.IO (IVApplication ())
applicationVOLEO =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getShapeVOLEO :: IVOLEObject a
              -> Prelude.IO (IVShape ())
getShapeVOLEO =
  Automation.propertyGet "Shape"
                         []
                         Automation.outIDispatch

objectTypeVOLEO :: IVOLEObject a
                -> Prelude.IO (Prelude.Int)
objectTypeVOLEO =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

statVOLEO :: IVOLEObject a
          -> Prelude.IO (Prelude.Int)
statVOLEO =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getClassIDVOLEO :: IVOLEObject a
                -> Prelude.IO (Prelude.String)
getClassIDVOLEO =
  Automation.propertyGet "ClassID"
                         []
                         Automation.outString

getProgIDVOLEO :: IVOLEObject a
               -> Prelude.IO (Prelude.String)
getProgIDVOLEO =
  Automation.propertyGet "ProgID"
                         []
                         Automation.outString

getForeignTypeVOLEO :: IVOLEObject a
                    -> Prelude.IO (Prelude.Int)
getForeignTypeVOLEO =
  Automation.propertyGet "ForeignType"
                         []
                         Automation.outInt

getObjectVOLEO :: IVOLEObject a
               -> Prelude.IO (Automation.IDispatch ())
getObjectVOLEO =
  Automation.propertyGet "Object"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- interface IVCharacters
-- 
-- --------------------------------------------------
data IVCharacters_ a = IVCharacters__
                         
type IVCharacters a = Automation.IDispatch (IVCharacters_ a)
iidIVCharacters :: Com.IID (IVCharacters ())
iidIVCharacters =
  Com.mkIID "{000D0702-0000-0000-C000-000000000046}"

addCustomField :: Prelude.String
               -> Prelude.Int
               -> IVCharacters a
               -> Prelude.IO ()
addCustomField formula format =
  Automation.method0 "AddCustomField"
                     [ Automation.inString formula
                     , Automation.inInt format
                     ]

addField :: Prelude.Int
         -> Prelude.Int
         -> Prelude.Int
         -> IVCharacters a
         -> Prelude.IO ()
addField category code format =
  Automation.method0 "AddField"
                     [ Automation.inInt category
                     , Automation.inInt code
                     , Automation.inInt format
                     ]

applicationVC1 :: IVCharacters a
               -> Prelude.IO (IVApplication ())
applicationVC1 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getBeginVC :: IVCharacters a
           -> Prelude.IO (Prelude.Int)
getBeginVC =
  Automation.propertyGet "Begin"
                         []
                         Automation.outInt

setBeginVC :: Prelude.Int
           -> IVCharacters a
           -> Prelude.IO ()
setBeginVC lpi4Ret =
  Automation.propertySet "Begin"
                         [Automation.inInt lpi4Ret]

getCharCountVC :: IVCharacters a
               -> Prelude.IO (Prelude.Int)
getCharCountVC =
  Automation.propertyGet "CharCount"
                         []
                         Automation.outInt

setCharPropsVC :: Prelude.Int
               -> Prelude.Int
               -> IVCharacters a
               -> Prelude.IO ()
setCharPropsVC cellIndex x0 =
  Automation.propertySet "CharProps"
                         [ Automation.inInt cellIndex
                         , Automation.inInt x0
                         ]

getCharPropsRowVC :: Prelude.Int
                  -> IVCharacters a
                  -> Prelude.IO (Prelude.Int)
getCharPropsRowVC biasLorR =
  Automation.propertyGet "CharPropsRow"
                         [Automation.inInt biasLorR]
                         Automation.outInt

copyVC :: IVCharacters a
       -> Prelude.IO ()
copyVC =
  Automation.method0 "Copy"
                     []

cutVC :: IVCharacters a
      -> Prelude.IO ()
cutVC =
  Automation.method0 "Cut"
                     []

objectTypeVC1 :: IVCharacters a
              -> Prelude.IO (Prelude.Int)
objectTypeVC1 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getEndVC :: IVCharacters a
         -> Prelude.IO (Prelude.Int)
getEndVC =
  Automation.propertyGet "End"
                         []
                         Automation.outInt

setEndVC :: Prelude.Int
         -> IVCharacters a
         -> Prelude.IO ()
setEndVC lpi4Ret =
  Automation.propertySet "End"
                         [Automation.inInt lpi4Ret]

getFieldCategoryVC :: IVCharacters a
                   -> Prelude.IO (Prelude.Int)
getFieldCategoryVC =
  Automation.propertyGet "FieldCategory"
                         []
                         Automation.outInt

getFieldCodeVC :: IVCharacters a
               -> Prelude.IO (Prelude.Int)
getFieldCodeVC =
  Automation.propertyGet "FieldCode"
                         []
                         Automation.outInt

getFieldFormatVC :: IVCharacters a
                 -> Prelude.IO (Prelude.Int)
getFieldFormatVC =
  Automation.propertyGet "FieldFormat"
                         []
                         Automation.outInt

getFieldFormulaVC :: IVCharacters a
                  -> Prelude.IO (Prelude.String)
getFieldFormulaVC =
  Automation.propertyGet "FieldFormula"
                         []
                         Automation.outString

getIsFieldVC :: IVCharacters a
             -> Prelude.IO (Prelude.Int)
getIsFieldVC =
  Automation.propertyGet "IsField"
                         []
                         Automation.outInt

setParaPropsVC :: Prelude.Int
               -> Prelude.Int
               -> IVCharacters a
               -> Prelude.IO ()
setParaPropsVC cellIndex x0 =
  Automation.propertySet "ParaProps"
                         [ Automation.inInt cellIndex
                         , Automation.inInt x0
                         ]

getParaPropsRowVC :: Prelude.Int
                  -> IVCharacters a
                  -> Prelude.IO (Prelude.Int)
getParaPropsRowVC biasLorR =
  Automation.propertyGet "ParaPropsRow"
                         [Automation.inInt biasLorR]
                         Automation.outInt

pasteVC :: IVCharacters a
        -> Prelude.IO ()
pasteVC =
  Automation.method0 "Paste"
                     []

getTabPropsRowVC :: Prelude.Int
                 -> IVCharacters a
                 -> Prelude.IO (Prelude.Int)
getTabPropsRowVC biasLorR =
  Automation.propertyGet "TabPropsRow"
                         [Automation.inInt biasLorR]
                         Automation.outInt

getRunBeginVC :: Prelude.Int
              -> IVCharacters a
              -> Prelude.IO (Prelude.Int)
getRunBeginVC runType =
  Automation.propertyGet "RunBegin"
                         [Automation.inInt runType]
                         Automation.outInt

getRunEndVC :: Prelude.Int
            -> IVCharacters a
            -> Prelude.IO (Prelude.Int)
getRunEndVC runType =
  Automation.propertyGet "RunEnd"
                         [Automation.inInt runType]
                         Automation.outInt

shapeVC :: IVCharacters a
        -> Prelude.IO (IVShape ())
shapeVC =
  Automation.propertyGet "Shape"
                         []
                         Automation.outIDispatch

statVC1 :: IVCharacters a
        -> Prelude.IO (Prelude.Int)
statVC1 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getTextAsStringVC :: IVCharacters a
                  -> Prelude.IO (Prelude.String)
getTextAsStringVC =
  Automation.propertyGet "TextAsString"
                         []
                         Automation.outString

setTextVC :: (Automation.Variant a0)
          => a0
          -> IVCharacters a
          -> Prelude.IO ()
setTextVC lpvarRet =
  Automation.propertySet "Text"
                         [Automation.inVariant lpvarRet]

documentVC1 :: IVCharacters a
            -> Prelude.IO (IVDocument ())
documentVC1 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

eventListVC :: IVCharacters a
            -> Prelude.IO (IVEventList ())
eventListVC =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVC :: IVCharacters a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVC =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getTextVC :: (Automation.Variant a0)
          => IVCharacters a
          -> Prelude.IO (a0)
getTextVC =
  Automation.propertyGet "Text"
                         []
                         Automation.outVariant

-- --------------------------------------------------
-- 
-- interface IVHyperlink
-- 
-- --------------------------------------------------
data IVHyperlink_ a = IVHyperlink__
                        
type IVHyperlink a = Automation.IDispatch (IVHyperlink_ a)
iidIVHyperlink :: Com.IID (IVHyperlink ())
iidIVHyperlink = Com.mkIID "{000D071D-0000-0000-C000-000000000046}"

getDescriptionVH :: IVHyperlink a
                 -> Prelude.IO (Prelude.String)
getDescriptionVH =
  Automation.propertyGet "Description"
                         []
                         Automation.outString

setDescriptionVH :: Prelude.String
                 -> IVHyperlink a
                 -> Prelude.IO ()
setDescriptionVH lpbstrRet =
  Automation.propertySet "Description"
                         [Automation.inString lpbstrRet]

getApplicationVH :: IVHyperlink a
                 -> Prelude.IO (IVApplication ())
getApplicationVH =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getShapeVH :: IVHyperlink a
           -> Prelude.IO (IVShape ())
getShapeVH =
  Automation.propertyGet "Shape"
                         []
                         Automation.outIDispatch

getObjectTypeVH :: IVHyperlink a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVH =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getStatVH :: IVHyperlink a
          -> Prelude.IO (Prelude.Int)
getStatVH =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

getAddressVH :: IVHyperlink a
             -> Prelude.IO (Prelude.String)
getAddressVH =
  Automation.propertyGet "Address"
                         []
                         Automation.outString

setAddressVH :: Prelude.String
             -> IVHyperlink a
             -> Prelude.IO ()
setAddressVH lpbstrRet =
  Automation.propertySet "Address"
                         [Automation.inString lpbstrRet]

getSubAddressVH :: IVHyperlink a
                -> Prelude.IO (Prelude.String)
getSubAddressVH =
  Automation.propertyGet "SubAddress"
                         []
                         Automation.outString

setSubAddressVH :: Prelude.String
                -> IVHyperlink a
                -> Prelude.IO ()
setSubAddressVH lpbstrRet =
  Automation.propertySet "SubAddress"
                         [Automation.inString lpbstrRet]

getNewWindowVH :: IVHyperlink a
               -> Prelude.IO (Prelude.Int)
getNewWindowVH =
  Automation.propertyGet "NewWindow"
                         []
                         Automation.outInt

setNewWindowVH :: Prelude.Int
               -> IVHyperlink a
               -> Prelude.IO ()
setNewWindowVH lpi2Ret =
  Automation.propertySet "NewWindow"
                         [Automation.inInt lpi2Ret]

getExtraInfoVH :: IVHyperlink a
               -> Prelude.IO (Prelude.String)
getExtraInfoVH =
  Automation.propertyGet "ExtraInfo"
                         []
                         Automation.outString

setExtraInfoVH :: Prelude.String
               -> IVHyperlink a
               -> Prelude.IO ()
setExtraInfoVH lpbstrRet =
  Automation.propertySet "ExtraInfo"
                         [Automation.inString lpbstrRet]

getFrameVH :: IVHyperlink a
           -> Prelude.IO (Prelude.String)
getFrameVH =
  Automation.propertyGet "Frame"
                         []
                         Automation.outString

setFrameVH :: Prelude.String
           -> IVHyperlink a
           -> Prelude.IO ()
setFrameVH lpbstrRet =
  Automation.propertySet "Frame"
                         [Automation.inString lpbstrRet]

follow :: IVHyperlink a
       -> Prelude.IO ()
follow =
  Automation.method0 "Follow"
                     []

deleteVH :: IVHyperlink a
         -> Prelude.IO ()
deleteVH =
  Automation.method0 "Delete"
                     []

copyVH :: IVHyperlink a
       -> Prelude.IO ()
copyVH =
  Automation.method0 "Copy"
                     []

createURL :: Prelude.Int
          -> IVHyperlink a
          -> Prelude.IO (Prelude.String)
createURL canonicalForm =
  Automation.function1 "CreateURL"
                       [Automation.inInt canonicalForm]
                       Automation.outString

-- --------------------------------------------------
-- 
-- interface IVPaths
-- 
-- --------------------------------------------------
data IVPaths_ a = IVPaths__
                    
type IVPaths a = Automation.IDispatch (IVPaths_ a)
iidIVPaths :: Com.IID (IVPaths ())
iidIVPaths = Com.mkIID "{000D0720-0000-0000-C000-000000000046}"

applicationVP :: IVPaths a
              -> Prelude.IO (IVApplication ())
applicationVP =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVP :: IVPaths a
             -> Prelude.IO (Prelude.Int)
objectTypeVP =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getItemVP :: Prelude.Int
          -> IVPaths a
          -> Prelude.IO (IVPath ())
getItemVP index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

getCountVP :: IVPaths a
           -> Prelude.IO (Prelude.Int)
getCountVP =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVPath
-- 
-- --------------------------------------------------
data IVPath_ a = IVPath__
                   
type IVPath a = Automation.IDispatch (IVPath_ a)
iidIVPath :: Com.IID (IVPath ())
iidIVPath = Com.mkIID "{000D0721-0000-0000-C000-000000000046}"

applicationVP0 :: IVPath a
               -> Prelude.IO (IVApplication ())
applicationVP0 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVP0 :: IVPath a
              -> Prelude.IO (Prelude.Int)
objectTypeVP0 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

itemVP :: Prelude.Int
       -> IVPath a
       -> Prelude.IO (IVCurve ())
itemVP index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

countVP :: IVPath a
        -> Prelude.IO (Prelude.Int)
countVP =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getClosedVP :: IVPath a
            -> Prelude.IO (Prelude.Int)
getClosedVP =
  Automation.propertyGet "Closed"
                         []
                         Automation.outInt

points :: Prelude.Double
       -> IVPath a
       -> Prelude.IO (SafeArray Prelude.Double)
points tolerance =
  Automation.method1 "Points"
                     [Automation.inDouble tolerance]
                     outSafeArray

-- --------------------------------------------------
-- 
-- interface IVCurve
-- 
-- --------------------------------------------------
data IVCurve_ a = IVCurve__
                    
type IVCurve a = Automation.IDispatch (IVCurve_ a)
iidIVCurve :: Com.IID (IVCurve ())
iidIVCurve = Com.mkIID "{000D0722-0000-0000-C000-000000000046}"

applicationVC2 :: IVCurve a
               -> Prelude.IO (IVApplication ())
applicationVC2 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVC2 :: IVCurve a
              -> Prelude.IO (Prelude.Int)
objectTypeVC2 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getClosedVC :: IVCurve a
            -> Prelude.IO (Prelude.Int)
getClosedVC =
  Automation.propertyGet "Closed"
                         []
                         Automation.outInt

pointsVC :: Prelude.Double
         -> IVCurve a
         -> Prelude.IO (SafeArray Prelude.Double)
pointsVC tolerance =
  Automation.method1 "Points"
                     [Automation.inDouble tolerance]
                     outSafeArray

getStartVC :: IVCurve a
           -> Prelude.IO (Prelude.Double)
getStartVC =
  Automation.propertyGet "Start"
                         []
                         Automation.outDouble

endVC :: IVCurve a
      -> Prelude.IO (Prelude.Double)
endVC =
  Automation.propertyGet "End"
                         []
                         Automation.outDouble

point :: Prelude.Double
      -> IVCurve a
      -> Prelude.IO (Prelude.Double, Prelude.Double)
point t =
  Automation.method2 "Point"
                     [Automation.inDouble t]
                     Automation.outDouble
                     Automation.outDouble

-- --------------------------------------------------
-- 
-- interface IVDocuments
-- 
-- --------------------------------------------------
data IVDocuments_ a = IVDocuments__
                        
type IVDocuments a = Automation.IDispatch (IVDocuments_ a)
iidIVDocuments :: Com.IID (IVDocuments ())
iidIVDocuments = Com.mkIID "{000D0706-0000-0000-C000-000000000046}"

addVD :: Prelude.String
      -> IVDocuments a
      -> Prelude.IO (IVDocument ())
addVD fileName =
  Automation.function1 "Add"
                       [Automation.inString fileName]
                       Automation.outIDispatch

openVD :: Prelude.String
       -> IVDocuments a
       -> Prelude.IO (IVDocument ())
openVD fileName =
  Automation.function1 "Open"
                       [Automation.inString fileName]
                       Automation.outIDispatch

applicationVD :: IVDocuments a
              -> Prelude.IO (IVApplication ())
applicationVD =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVD :: IVDocuments a
             -> Prelude.IO (Prelude.Int)
objectTypeVD =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getItemVD :: (Automation.Variant a0)
          => a0
          -> IVDocuments a
          -> Prelude.IO (IVDocument ())
getItemVD nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

getCountVD :: IVDocuments a
           -> Prelude.IO (Prelude.Int)
getCountVD =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

openEx :: Prelude.String
       -> Prelude.Int
       -> IVDocuments a
       -> Prelude.IO (IVDocument ())
openEx fileName flags =
  Automation.function1 "OpenEx"
                       [ Automation.inString fileName
                       , Automation.inInt flags
                       ]
                       Automation.outIDispatch

eventListVD :: IVDocuments a
            -> Prelude.IO (IVEventList ())
eventListVD =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVD :: IVDocuments a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVD =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getNames :: IVDocuments a
         -> Prelude.IO (SafeArray Prelude.String)
getNames =
  Automation.method1 "GetNames"
                     []
                     outSafeArray

-- --------------------------------------------------
-- 
-- interface IVWindows
-- 
-- --------------------------------------------------
data IVWindows_ a = IVWindows__
                      
type IVWindows a = Automation.IDispatch (IVWindows_ a)
iidIVWindows :: Com.IID (IVWindows ())
iidIVWindows = Com.mkIID "{000D0711-0000-0000-C000-000000000046}"

applicationVW :: IVWindows a
              -> Prelude.IO (IVApplication ())
applicationVW =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVW :: IVWindows a
             -> Prelude.IO (Prelude.Int)
objectTypeVW =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getItemVW :: Prelude.Int
          -> IVWindows a
          -> Prelude.IO (IVWindow ())
getItemVW index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

getCountVW :: IVWindows a
           -> Prelude.IO (Prelude.Int)
getCountVW =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

arrange :: IVWindows a
        -> Prelude.IO ()
arrange =
  Automation.method0 "Arrange"
                     []

eventListVW :: IVWindows a
            -> Prelude.IO (IVEventList ())
eventListVW =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVW :: IVWindows a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVW =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVAddons
-- 
-- --------------------------------------------------
data IVAddons_ a = IVAddons__
                     
type IVAddons a = Automation.IDispatch (IVAddons_ a)
iidIVAddons :: Com.IID (IVAddons ())
iidIVAddons = Com.mkIID "{000D0719-0000-0000-C000-000000000046}"

applicationVA :: IVAddons a
              -> Prelude.IO (IVApplication ())
applicationVA =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVA :: IVAddons a
             -> Prelude.IO (Prelude.Int)
objectTypeVA =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getItemVA :: (Automation.Variant a0)
          => a0
          -> IVAddons a
          -> Prelude.IO (IVAddon ())
getItemVA nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

getCountVA :: IVAddons a
           -> Prelude.IO (Prelude.Int)
getCountVA =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

addVA :: Prelude.String
      -> IVAddons a
      -> Prelude.IO (IVAddon ())
addVA fileName =
  Automation.function1 "Add"
                       [Automation.inString fileName]
                       Automation.outIDispatch

getNamesVA :: IVAddons a
           -> Prelude.IO (SafeArray Prelude.String)
getNamesVA =
  Automation.method1 "GetNames"
                     []
                     outSafeArray

-- --------------------------------------------------
-- 
-- interface IVAddon
-- 
-- --------------------------------------------------
data IVAddon_ a = IVAddon__
                    
type IVAddon a = Automation.IDispatch (IVAddon_ a)
iidIVAddon :: Com.IID (IVAddon ())
iidIVAddon = Com.mkIID "{000D0718-0000-0000-C000-000000000046}"

applicationVA0 :: IVAddon a
               -> Prelude.IO (IVApplication ())
applicationVA0 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVA0 :: IVAddon a
              -> Prelude.IO (Prelude.Int)
objectTypeVA0 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getNameVA :: IVAddon a
          -> Prelude.IO (Prelude.String)
getNameVA =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

getIndexVA :: IVAddon a
           -> Prelude.IO (Prelude.Int)
getIndexVA =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getEnabledVA :: IVAddon a
             -> Prelude.IO (Prelude.Int)
getEnabledVA =
  Automation.propertyGet "Enabled"
                         []
                         Automation.outInt

run :: Prelude.String
    -> IVAddon a
    -> Prelude.IO ()
run argString =
  Automation.method0 "Run"
                     [Automation.inString argString]

-- --------------------------------------------------
-- 
-- interface IVMasters
-- 
-- --------------------------------------------------
data IVMasters_ a = IVMasters__
                      
type IVMasters a = Automation.IDispatch (IVMasters_ a)
iidIVMasters :: Com.IID (IVMasters ())
iidIVMasters = Com.mkIID "{000D0708-0000-0000-C000-000000000046}"

applicationVM :: IVMasters a
              -> Prelude.IO (IVApplication ())
applicationVM =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVM :: IVMasters a
             -> Prelude.IO (Prelude.Int)
objectTypeVM =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

itemVM :: (Automation.Variant a0)
       => a0
       -> IVMasters a
       -> Prelude.IO (IVMaster ())
itemVM nameUIDOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameUIDOrIndex]
                         Automation.outIDispatch

countVM :: IVMasters a
        -> Prelude.IO (Prelude.Int)
countVM =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

documentVM :: IVMasters a
           -> Prelude.IO (IVDocument ())
documentVM =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

statVM :: IVMasters a
       -> Prelude.IO (Prelude.Int)
statVM =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

eventListVM :: IVMasters a
            -> Prelude.IO (IVEventList ())
eventListVM =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVM :: IVMasters a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVM =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

addVM0 :: IVMasters a
       -> Prelude.IO (IVMaster ())
addVM0 =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

getNamesVM :: IVMasters a
           -> Prelude.IO (SafeArray Prelude.String)
getNamesVM =
  Automation.method1 "GetNames"
                     []
                     outSafeArray

-- --------------------------------------------------
-- 
-- interface IVPages
-- 
-- --------------------------------------------------
data IVPages_ a = IVPages__
                    
type IVPages a = Automation.IDispatch (IVPages_ a)
iidIVPages :: Com.IID (IVPages ())
iidIVPages = Com.mkIID "{000D070A-0000-0000-C000-000000000046}"

applicationVP1 :: IVPages a
               -> Prelude.IO (IVApplication ())
applicationVP1 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVP1 :: IVPages a
              -> Prelude.IO (Prelude.Int)
objectTypeVP1 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

itemVP0 :: (Automation.Variant a0)
        => a0
        -> IVPages a
        -> Prelude.IO (IVPage ())
itemVP0 nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

countVP0 :: IVPages a
         -> Prelude.IO (Prelude.Int)
countVP0 =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

addVP :: IVPages a
      -> Prelude.IO (IVPage ())
addVP =
  Automation.function1 "Add"
                       []
                       Automation.outIDispatch

documentVP :: IVPages a
           -> Prelude.IO (IVDocument ())
documentVP =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

statVP :: IVPages a
       -> Prelude.IO (Prelude.Int)
statVP =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

eventListVP :: IVPages a
            -> Prelude.IO (IVEventList ())
eventListVP =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVP :: IVPages a
                 -> Prelude.IO (Prelude.Int)
persistsEventsVP =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getNamesVP :: IVPages a
           -> Prelude.IO (SafeArray Prelude.String)
getNamesVP =
  Automation.method1 "GetNames"
                     []
                     outSafeArray

-- --------------------------------------------------
-- 
-- interface IVStyles
-- 
-- --------------------------------------------------
data IVStyles_ a = IVStyles__
                     
type IVStyles a = Automation.IDispatch (IVStyles_ a)
iidIVStyles :: Com.IID (IVStyles ())
iidIVStyles = Com.mkIID "{000D070F-0000-0000-C000-000000000046}"

applicationVS2 :: IVStyles a
               -> Prelude.IO (IVApplication ())
applicationVS2 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

objectTypeVS2 :: IVStyles a
              -> Prelude.IO (Prelude.Int)
objectTypeVS2 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

itemVS0 :: (Automation.Variant a0)
        => a0
        -> IVStyles a
        -> Prelude.IO (IVStyle ())
itemVS0 nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

countVS0 :: IVStyles a
         -> Prelude.IO (Prelude.Int)
countVS0 =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

documentVS2 :: IVStyles a
            -> Prelude.IO (IVDocument ())
documentVS2 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

addVS :: Prelude.String
      -> Prelude.String
      -> Prelude.Int
      -> Prelude.Int
      -> Prelude.Int
      -> IVStyles a
      -> Prelude.IO (IVStyle ())
addVS styleName basedOn fIncludesText fIncludesLine fIncludesFill =
  Automation.function1 "Add"
                       [ Automation.inString styleName
                       , Automation.inString basedOn
                       , Automation.inInt fIncludesText
                       , Automation.inInt fIncludesLine
                       , Automation.inInt fIncludesFill
                       ]
                       Automation.outIDispatch

statVS2 :: IVStyles a
        -> Prelude.IO (Prelude.Int)
statVS2 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

eventListVS2 :: IVStyles a
             -> Prelude.IO (IVEventList ())
eventListVS2 =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

persistsEventsVS2 :: IVStyles a
                  -> Prelude.IO (Prelude.Int)
persistsEventsVS2 =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

itemFromIDVS :: Prelude.Int
             -> IVStyles a
             -> Prelude.IO (IVStyle ())
itemFromIDVS objectID =
  Automation.propertyGet "ItemFromID"
                         [Automation.inInt objectID]
                         Automation.outIDispatch

getNamesVS :: IVStyles a
           -> Prelude.IO (SafeArray Prelude.String)
getNamesVS =
  Automation.method1 "GetNames"
                     []
                     outSafeArray

-- --------------------------------------------------
-- 
-- interface IVFonts
-- 
-- --------------------------------------------------
data IVFonts_ a = IVFonts__
                    
type IVFonts a = Automation.IDispatch (IVFonts_ a)
iidIVFonts :: Com.IID (IVFonts ())
iidIVFonts = Com.mkIID "{000D0715-0000-0000-C000-000000000046}"

getApplicationVF :: IVFonts a
                 -> Prelude.IO (IVApplication ())
getApplicationVF =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getDocumentVF :: IVFonts a
              -> Prelude.IO (IVDocument ())
getDocumentVF =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getCountVF :: IVFonts a
           -> Prelude.IO (Prelude.Int)
getCountVF =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

getItemVF :: (Automation.Variant a0)
          => a0
          -> IVFonts a
          -> Prelude.IO (IVFont ())
getItemVF nameOrIndex =
  Automation.propertyGet "Item"
                         [Automation.inVariant nameOrIndex]
                         Automation.outIDispatch

getItemFromIDVF :: Prelude.Int
                -> IVFonts a
                -> Prelude.IO (IVFont ())
getItemFromIDVF objectID =
  Automation.propertyGet "ItemFromID"
                         [Automation.inInt objectID]
                         Automation.outIDispatch

getObjectTypeVF :: IVFonts a
                -> Prelude.IO (Prelude.Int)
getObjectTypeVF =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

getStatVF :: IVFonts a
          -> Prelude.IO (Prelude.Int)
getStatVF =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVFont
-- 
-- --------------------------------------------------
data IVFont_ a = IVFont__
                   
type IVFont a = Automation.IDispatch (IVFont_ a)
iidIVFont :: Com.IID (IVFont ())
iidIVFont = Com.mkIID "{000D0714-0000-0000-C000-000000000046}"

applicationVF :: IVFont a
              -> Prelude.IO (IVApplication ())
applicationVF =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

documentVF :: IVFont a
           -> Prelude.IO (IVDocument ())
documentVF =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getIndexVF :: IVFont a
           -> Prelude.IO (Prelude.Int)
getIndexVF =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getNameVF :: IVFont a
          -> Prelude.IO (Prelude.String)
getNameVF =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

getIDVF :: IVFont a
        -> Prelude.IO (Prelude.Int)
getIDVF =
  Automation.propertyGet "ID"
                         []
                         Automation.outInt

getAttributesVF :: IVFont a
                -> Prelude.IO (Prelude.Int)
getAttributesVF =
  Automation.propertyGet "Attributes"
                         []
                         Automation.outInt

getCharSetVF :: IVFont a
             -> Prelude.IO (Prelude.Int)
getCharSetVF =
  Automation.propertyGet "CharSet"
                         []
                         Automation.outInt

getPitchAndFamilyVF :: IVFont a
                    -> Prelude.IO (Prelude.Int)
getPitchAndFamilyVF =
  Automation.propertyGet "PitchAndFamily"
                         []
                         Automation.outInt

objectTypeVF :: IVFont a
             -> Prelude.IO (Prelude.Int)
objectTypeVF =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

statVF :: IVFont a
       -> Prelude.IO (Prelude.Int)
statVF =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVColors
-- 
-- --------------------------------------------------
data IVColors_ a = IVColors__
                     
type IVColors a = Automation.IDispatch (IVColors_ a)
iidIVColors :: Com.IID (IVColors ())
iidIVColors = Com.mkIID "{000D0717-0000-0000-C000-000000000046}"

applicationVC3 :: IVColors a
               -> Prelude.IO (IVApplication ())
applicationVC3 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

documentVC2 :: IVColors a
            -> Prelude.IO (IVDocument ())
documentVC2 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

countVC :: IVColors a
        -> Prelude.IO (Prelude.Int)
countVC =
  Automation.propertyGet "Count"
                         []
                         Automation.outInt

itemVC :: Prelude.Int
       -> IVColors a
       -> Prelude.IO (IVColor ())
itemVC index =
  Automation.propertyGet "Item"
                         [Automation.inInt index]
                         Automation.outIDispatch

objectTypeVC3 :: IVColors a
              -> Prelude.IO (Prelude.Int)
objectTypeVC3 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

statVC2 :: IVColors a
        -> Prelude.IO (Prelude.Int)
statVC2 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVColor
-- 
-- --------------------------------------------------
data IVColor_ a = IVColor__
                    
type IVColor a = Automation.IDispatch (IVColor_ a)
iidIVColor :: Com.IID (IVColor ())
iidIVColor = Com.mkIID "{000D0716-0000-0000-C000-000000000046}"

applicationVC4 :: IVColor a
               -> Prelude.IO (IVApplication ())
applicationVC4 =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

documentVC3 :: IVColor a
            -> Prelude.IO (IVDocument ())
documentVC3 =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

indexVC :: IVColor a
        -> Prelude.IO (Prelude.Int)
indexVC =
  Automation.propertyGet "Index"
                         []
                         Automation.outInt

getRedVC :: IVColor a
         -> Prelude.IO (Prelude.Int)
getRedVC =
  Automation.propertyGet "Red"
                         []
                         Automation.outInt

setRedVC :: Prelude.Int
         -> IVColor a
         -> Prelude.IO ()
setRedVC lpi2Ret =
  Automation.propertySet "Red"
                         [Automation.inInt lpi2Ret]

getGreenVC :: IVColor a
           -> Prelude.IO (Prelude.Int)
getGreenVC =
  Automation.propertyGet "Green"
                         []
                         Automation.outInt

setGreenVC :: Prelude.Int
           -> IVColor a
           -> Prelude.IO ()
setGreenVC lpi2Ret =
  Automation.propertySet "Green"
                         [Automation.inInt lpi2Ret]

getBlueVC :: IVColor a
          -> Prelude.IO (Prelude.Int)
getBlueVC =
  Automation.propertyGet "Blue"
                         []
                         Automation.outInt

setBlueVC :: Prelude.Int
          -> IVColor a
          -> Prelude.IO ()
setBlueVC lpi2Ret =
  Automation.propertySet "Blue"
                         [Automation.inInt lpi2Ret]

getFlagsVC :: IVColor a
           -> Prelude.IO (Prelude.Int)
getFlagsVC =
  Automation.propertyGet "Flags"
                         []
                         Automation.outInt

setFlagsVC :: Prelude.Int
           -> IVColor a
           -> Prelude.IO ()
setFlagsVC lpi2Ret =
  Automation.propertySet "Flags"
                         [Automation.inInt lpi2Ret]

getPaletteEntryVC :: IVColor a
                  -> Prelude.IO (Prelude.Int)
getPaletteEntryVC =
  Automation.propertyGet "PaletteEntry"
                         []
                         Automation.outInt

setPaletteEntryVC :: Prelude.Int
                  -> IVColor a
                  -> Prelude.IO ()
setPaletteEntryVC lpi4Ret =
  Automation.propertySet "PaletteEntry"
                         [Automation.inInt lpi4Ret]

objectTypeVC4 :: IVColor a
              -> Prelude.IO (Prelude.Int)
objectTypeVC4 =
  Automation.propertyGet "ObjectType"
                         []
                         Automation.outInt

statVC3 :: IVColor a
        -> Prelude.IO (Prelude.Int)
statVC3 =
  Automation.propertyGet "Stat"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- coclass Path
-- 
-- --------------------------------------------------
clsidPath :: Com.CLSID
clsidPath = Com.mkCLSID "{000D0A1F-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Paths
-- 
-- --------------------------------------------------
clsidPaths :: Com.CLSID
clsidPaths = Com.mkCLSID "{000D0A1E-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass OLEObjects
-- 
-- --------------------------------------------------
clsidOLEObjects :: Com.CLSID
clsidOLEObjects =
  Com.mkCLSID "{000D0A1C-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass OLEObject
-- 
-- --------------------------------------------------
clsidOLEObject :: Com.CLSID
clsidOLEObject =
  Com.mkCLSID "{000D0A1D-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface IVDispExtender
-- 
-- --------------------------------------------------
data IVDispExtender_ a = IVDispExtender__
                           
type IVDispExtender a = Automation.IDispatch (IVDispExtender_ a)
iidIVDispExtender :: Com.IID (IVDispExtender ())
iidIVDispExtender =
  Com.mkIID "{000D0D0F-0000-0000-C000-000000000046}"

getNameVDE :: IVDispExtender a
           -> Prelude.IO (Prelude.String)
getNameVDE =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setNameVDE :: Prelude.String
           -> IVDispExtender a
           -> Prelude.IO ()
setNameVDE x0 =
  Automation.propertySet "Name"
                         [Automation.inString x0]

getObjectVDE :: IVDispExtender a
             -> Prelude.IO (Com.IUnknown ())
getObjectVDE =
  Automation.propertyGet "Object"
                         []
                         Automation.outIUnknown

getParentVDE :: IVDispExtender a
             -> Prelude.IO (Com.IUnknown ())
getParentVDE =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIUnknown

deleteVDE :: IVDispExtender a
          -> Prelude.IO ()
deleteVDE =
  Automation.method0 "Delete"
                     []

index :: IVDispExtender a
      -> Prelude.IO ()
index =
  Automation.method0 "Index"
                     []

getShapeVDE :: IVDispExtender a
            -> Prelude.IO (IVShape ())
getShapeVDE =
  Automation.propertyGet "Shape"
                         []
                         Automation.outIDispatch

groupVDE :: IVDispExtender a
         -> Prelude.IO ()
groupVDE =
  Automation.method0 "Group"
                     []

bringForwardVDE :: IVDispExtender a
                -> Prelude.IO ()
bringForwardVDE =
  Automation.method0 "BringForward"
                     []

bringToFrontVDE :: IVDispExtender a
                -> Prelude.IO ()
bringToFrontVDE =
  Automation.method0 "BringToFront"
                     []

convertToGroupVDE :: IVDispExtender a
                  -> Prelude.IO ()
convertToGroupVDE =
  Automation.method0 "ConvertToGroup"
                     []

sendBackwardVDE :: IVDispExtender a
                -> Prelude.IO ()
sendBackwardVDE =
  Automation.method0 "SendBackward"
                     []

sendToBackVDE :: IVDispExtender a
              -> Prelude.IO ()
sendToBackVDE =
  Automation.method0 "SendToBack"
                     []

getDocumentVDE :: IVDispExtender a
               -> Prelude.IO (IVDocument ())
getDocumentVDE =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getShapeParentVDE :: IVDispExtender a
                  -> Prelude.IO (Automation.IDispatch ())
getShapeParentVDE =
  Automation.propertyGet "ShapeParent"
                         []
                         Automation.outIDispatch

getApplicationVDE :: IVDispExtender a
                  -> Prelude.IO (IVApplication ())
getApplicationVDE =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getMasterVDE :: IVDispExtender a
             -> Prelude.IO (IVMaster ())
getMasterVDE =
  Automation.propertyGet "Master"
                         []
                         Automation.outIDispatch

getCellsVDE :: Prelude.String
            -> IVDispExtender a
            -> Prelude.IO (IVCell ())
getCellsVDE cellName =
  Automation.propertyGet "Cells"
                         [Automation.inString cellName]
                         Automation.outIDispatch

getCellsSRCVDE :: Prelude.Int
               -> Prelude.Int
               -> Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (IVCell ())
getCellsSRCVDE section row column =
  Automation.propertyGet "CellsSRC"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt column
                         ]
                         Automation.outIDispatch

getData1VDE :: IVDispExtender a
            -> Prelude.IO (Prelude.String)
getData1VDE =
  Automation.propertyGet "Data1"
                         []
                         Automation.outString

setData1VDE :: Prelude.String
            -> IVDispExtender a
            -> Prelude.IO ()
setData1VDE x0 =
  Automation.propertySet "Data1"
                         [Automation.inString x0]

getData2VDE :: IVDispExtender a
            -> Prelude.IO (Prelude.String)
getData2VDE =
  Automation.propertyGet "Data2"
                         []
                         Automation.outString

setData2VDE :: Prelude.String
            -> IVDispExtender a
            -> Prelude.IO ()
setData2VDE x0 =
  Automation.propertySet "Data2"
                         [Automation.inString x0]

getData3VDE :: IVDispExtender a
            -> Prelude.IO (Prelude.String)
getData3VDE =
  Automation.propertyGet "Data3"
                         []
                         Automation.outString

setData3VDE :: Prelude.String
            -> IVDispExtender a
            -> Prelude.IO ()
setData3VDE x0 =
  Automation.propertySet "Data3"
                         [Automation.inString x0]

getHelpVDE :: IVDispExtender a
           -> Prelude.IO (Prelude.String)
getHelpVDE =
  Automation.propertyGet "Help"
                         []
                         Automation.outString

setHelpVDE :: Prelude.String
           -> IVDispExtender a
           -> Prelude.IO ()
setHelpVDE x0 =
  Automation.propertySet "Help"
                         [Automation.inString x0]

getNameIDVDE :: IVDispExtender a
             -> Prelude.IO (Prelude.String)
getNameIDVDE =
  Automation.propertyGet "NameID"
                         []
                         Automation.outString

shapeCopy :: IVDispExtender a
          -> Prelude.IO ()
shapeCopy =
  Automation.method0 "ShapeCopy"
                     []

shapeCut :: IVDispExtender a
         -> Prelude.IO ()
shapeCut =
  Automation.method0 "ShapeCut"
                     []

shapeDelete :: IVDispExtender a
            -> Prelude.IO ()
shapeDelete =
  Automation.method0 "ShapeDelete"
                     []

shapeDuplicate :: IVDispExtender a
               -> Prelude.IO ()
shapeDuplicate =
  Automation.method0 "ShapeDuplicate"
                     []

getRowCountVDE :: Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (Prelude.Int)
getRowCountVDE section =
  Automation.propertyGet "RowCount"
                         [Automation.inInt section]
                         Automation.outInt

addSectionVDE :: Prelude.Int
              -> IVDispExtender a
              -> Prelude.IO (Prelude.Int)
addSectionVDE section =
  Automation.method1 "AddSection"
                     [Automation.inInt section]
                     Automation.outInt

deleteSectionVDE :: Prelude.Int
                 -> IVDispExtender a
                 -> Prelude.IO ()
deleteSectionVDE section =
  Automation.method0 "DeleteSection"
                     [Automation.inInt section]

addRowVDE :: Prelude.Int
          -> Prelude.Int
          -> Prelude.Int
          -> IVDispExtender a
          -> Prelude.IO (Prelude.Int)
addRowVDE section row rowTag =
  Automation.method1 "AddRow"
                     [ Automation.inInt section
                     , Automation.inInt row
                     , Automation.inInt rowTag
                     ]
                     Automation.outInt

deleteRowVDE :: Prelude.Int
             -> Prelude.Int
             -> IVDispExtender a
             -> Prelude.IO ()
deleteRowVDE section row =
  Automation.method0 "DeleteRow"
                     [ Automation.inInt section
                     , Automation.inInt row
                     ]

getRowsCellCountVDE :: Prelude.Int
                    -> Prelude.Int
                    -> IVDispExtender a
                    -> Prelude.IO (Prelude.Int)
getRowsCellCountVDE section row =
  Automation.propertyGet "RowsCellCount"
                         [ Automation.inInt section
                         , Automation.inInt row
                         ]
                         Automation.outInt

getRowTypeVDE :: Prelude.Int
              -> Prelude.Int
              -> IVDispExtender a
              -> Prelude.IO (Prelude.Int)
getRowTypeVDE section row =
  Automation.propertyGet "RowType"
                         [ Automation.inInt section
                         , Automation.inInt row
                         ]
                         Automation.outInt

setRowTypeVDE :: Prelude.Int
              -> Prelude.Int
              -> Prelude.Int
              -> IVDispExtender a
              -> Prelude.IO ()
setRowTypeVDE section row x0 =
  Automation.propertySet "RowType"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt x0
                         ]

setCenterVDE :: Prelude.Double
             -> Prelude.Double
             -> IVDispExtender a
             -> Prelude.IO ()
setCenterVDE xPos yPos =
  Automation.method0 "SetCenter"
                     [ Automation.inDouble xPos
                     , Automation.inDouble yPos
                     ]

getConnectsVDE :: IVDispExtender a
               -> Prelude.IO (IVConnects ())
getConnectsVDE =
  Automation.propertyGet "Connects"
                         []
                         Automation.outIDispatch

getShapeIndexVDE :: IVDispExtender a
                 -> Prelude.IO (Prelude.Int)
getShapeIndexVDE =
  Automation.propertyGet "ShapeIndex"
                         []
                         Automation.outInt

getStyleVDE :: IVDispExtender a
            -> Prelude.IO (Prelude.String)
getStyleVDE =
  Automation.propertyGet "Style"
                         []
                         Automation.outString

setStyleVDE :: Prelude.String
            -> IVDispExtender a
            -> Prelude.IO ()
setStyleVDE x0 =
  Automation.propertySet "Style"
                         [Automation.inString x0]

setStyleKeepFmtVDE :: Prelude.String
                   -> IVDispExtender a
                   -> Prelude.IO ()
setStyleKeepFmtVDE x0 =
  Automation.propertySet "StyleKeepFmt"
                         [Automation.inString x0]

getLineStyleVDE :: IVDispExtender a
                -> Prelude.IO (Prelude.String)
getLineStyleVDE =
  Automation.propertyGet "LineStyle"
                         []
                         Automation.outString

setLineStyleVDE :: Prelude.String
                -> IVDispExtender a
                -> Prelude.IO ()
setLineStyleVDE x0 =
  Automation.propertySet "LineStyle"
                         [Automation.inString x0]

setLineStyleKeepFmtVDE :: Prelude.String
                       -> IVDispExtender a
                       -> Prelude.IO ()
setLineStyleKeepFmtVDE x0 =
  Automation.propertySet "LineStyleKeepFmt"
                         [Automation.inString x0]

getFillStyleVDE :: IVDispExtender a
                -> Prelude.IO (Prelude.String)
getFillStyleVDE =
  Automation.propertyGet "FillStyle"
                         []
                         Automation.outString

setFillStyleVDE :: Prelude.String
                -> IVDispExtender a
                -> Prelude.IO ()
setFillStyleVDE x0 =
  Automation.propertySet "FillStyle"
                         [Automation.inString x0]

setFillStyleKeepFmtVDE :: Prelude.String
                       -> IVDispExtender a
                       -> Prelude.IO ()
setFillStyleKeepFmtVDE x0 =
  Automation.propertySet "FillStyleKeepFmt"
                         [Automation.inString x0]

exportVDE :: Prelude.String
          -> IVDispExtender a
          -> Prelude.IO ()
exportVDE fileName =
  Automation.method0 "Export"
                     [Automation.inString fileName]

getUniqueIDVDE :: Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (Prelude.String)
getUniqueIDVDE fUniqueID =
  Automation.propertyGet "UniqueID"
                         [Automation.inInt fUniqueID]
                         Automation.outString

getContainingPageVDE :: IVDispExtender a
                     -> Prelude.IO (IVPage ())
getContainingPageVDE =
  Automation.propertyGet "ContainingPage"
                         []
                         Automation.outIDispatch

getContainingMasterVDE :: IVDispExtender a
                       -> Prelude.IO (IVMaster ())
getContainingMasterVDE =
  Automation.propertyGet "ContainingMaster"
                         []
                         Automation.outIDispatch

getContainingShapeVDE :: IVDispExtender a
                      -> Prelude.IO (IVShape ())
getContainingShapeVDE =
  Automation.propertyGet "ContainingShape"
                         []
                         Automation.outIDispatch

getSectionExistsVDE :: Prelude.Int
                    -> Prelude.Int
                    -> IVDispExtender a
                    -> Prelude.IO (Prelude.Int)
getSectionExistsVDE section fLocalExists =
  Automation.propertyGet "SectionExists"
                         [ Automation.inInt section
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getRowExistsVDE :: Prelude.Int
                -> Prelude.Int
                -> Prelude.Int
                -> IVDispExtender a
                -> Prelude.IO (Prelude.Int)
getRowExistsVDE section row fLocalExists =
  Automation.propertyGet "RowExists"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getCellExistsVDE :: Prelude.String
                 -> Prelude.Int
                 -> IVDispExtender a
                 -> Prelude.IO (Prelude.Int)
getCellExistsVDE cellName fLocalExists =
  Automation.propertyGet "CellExists"
                         [ Automation.inString cellName
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getCellsSRCExistsVDE :: Prelude.Int
                     -> Prelude.Int
                     -> Prelude.Int
                     -> Prelude.Int
                     -> IVDispExtender a
                     -> Prelude.IO (Prelude.Int)
getCellsSRCExistsVDE section row column fLocalExists =
  Automation.propertyGet "CellsSRCExists"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt column
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getLayerCountVDE :: IVDispExtender a
                 -> Prelude.IO (Prelude.Int)
getLayerCountVDE =
  Automation.propertyGet "LayerCount"
                         []
                         Automation.outInt

getLayerVDE :: Prelude.Int
            -> IVDispExtender a
            -> Prelude.IO (IVLayer ())
getLayerVDE index =
  Automation.propertyGet "Layer"
                         [Automation.inInt index]
                         Automation.outIDispatch

addNamedRowVDE :: Prelude.Int
               -> Prelude.String
               -> Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (Prelude.Int)
addNamedRowVDE section rowName rowTag =
  Automation.method1 "AddNamedRow"
                     [ Automation.inInt section
                     , Automation.inString rowName
                     , Automation.inInt rowTag
                     ]
                     Automation.outInt

addRowsVDE :: Prelude.Int
           -> Prelude.Int
           -> Prelude.Int
           -> Prelude.Int
           -> IVDispExtender a
           -> Prelude.IO (Prelude.Int)
addRowsVDE section row rowTag rowCount =
  Automation.method1 "AddRows"
                     [ Automation.inInt section
                     , Automation.inInt row
                     , Automation.inInt rowTag
                     , Automation.inInt rowCount
                     ]
                     Automation.outInt

getEventListVDE :: IVDispExtender a
                -> Prelude.IO (IVEventList ())
getEventListVDE =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVDE :: IVDispExtender a
                     -> Prelude.IO (Prelude.Int)
getPersistsEventsVDE =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getClassIDVDE :: IVDispExtender a
              -> Prelude.IO (Prelude.String)
getClassIDVDE =
  Automation.propertyGet "ClassID"
                         []
                         Automation.outString

getShapeObjectVDE :: IVDispExtender a
                  -> Prelude.IO (Automation.IDispatch ())
getShapeObjectVDE =
  Automation.propertyGet "ShapeObject"
                         []
                         Automation.outIDispatch

openSheetWindowVDE :: IVDispExtender a
                   -> Prelude.IO (IVWindow ())
openSheetWindowVDE =
  Automation.method1 "OpenSheetWindow"
                     []
                     Automation.outIDispatch

getShapeIDVDE :: IVDispExtender a
              -> Prelude.IO (Prelude.Int)
getShapeIDVDE =
  Automation.propertyGet "ShapeID"
                         []
                         Automation.outInt

getFormulasVDE :: SafeArray Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (SafeArray ())
getFormulasVDE sRCStream =
  Automation.method1 "GetFormulas"
                     [inSafeArray sRCStream]
                     outSafeArray

getResultsVDE :: SafeArray Prelude.Int
              -> Prelude.Int
              -> SafeArray ()
              -> IVDispExtender a
              -> Prelude.IO (SafeArray ())
getResultsVDE sRCStream flags unitsNamesOrCodes =
  Automation.method1 "GetResults"
                     [ inSafeArray sRCStream
                     , Automation.inInt flags
                     , inSafeArray unitsNamesOrCodes
                     ]
                     outSafeArray

setFormulasVDE :: SafeArray Prelude.Int
               -> SafeArray ()
               -> Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (Prelude.Int)
setFormulasVDE sRCStream formulaArray flags =
  Automation.method1 "SetFormulas"
                     [ inSafeArray sRCStream
                     , inSafeArray formulaArray
                     , Automation.inInt flags
                     ]
                     Automation.outInt

setResultsVDE :: SafeArray Prelude.Int
              -> SafeArray ()
              -> SafeArray ()
              -> Prelude.Int
              -> IVDispExtender a
              -> Prelude.IO (Prelude.Int)
setResultsVDE sRCStream unitsNamesOrCodes resultArray flags =
  Automation.method1 "SetResults"
                     [ inSafeArray sRCStream
                     , inSafeArray unitsNamesOrCodes
                     , inSafeArray resultArray
                     , Automation.inInt flags
                     ]
                     Automation.outInt

getFromConnectsVDE :: IVDispExtender a
                   -> Prelude.IO (IVConnects ())
getFromConnectsVDE =
  Automation.propertyGet "FromConnects"
                         []
                         Automation.outIDispatch

boundingBoxVDE :: Prelude.Int
               -> IVDispExtender a
               -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
boundingBoxVDE flags =
  Automation.method4 "BoundingBox"
                     [Automation.inInt flags]
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble

hitTestVDE :: Prelude.Double
           -> Prelude.Double
           -> Prelude.Double
           -> IVDispExtender a
           -> Prelude.IO (Prelude.Int)
hitTestVDE xPos yPos tolerance =
  Automation.method1 "HitTest"
                     [ Automation.inDouble xPos
                     , Automation.inDouble yPos
                     , Automation.inDouble tolerance
                     ]
                     Automation.outInt

getHyperlinkVDE :: IVDispExtender a
                -> Prelude.IO (IVHyperlink ())
getHyperlinkVDE =
  Automation.propertyGet "Hyperlink"
                         []
                         Automation.outIDispatch

getProgIDVDE :: IVDispExtender a
             -> Prelude.IO (Prelude.String)
getProgIDVDE =
  Automation.propertyGet "ProgID"
                         []
                         Automation.outString

getObjectIsInheritedVDE :: IVDispExtender a
                        -> Prelude.IO (Prelude.Int)
getObjectIsInheritedVDE =
  Automation.propertyGet "ObjectIsInherited"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- interface IVExtender
-- 
-- --------------------------------------------------
data IVExtender_ a = IVExtender__
                       
type IVExtender a = Automation.IDispatch (IVExtender_ a)
iidIVExtender :: Com.IID (IVExtender ())
iidIVExtender = Com.mkIID "{000D0D0E-0000-0000-C000-000000000046}"

getNameVE :: IVExtender a
          -> Prelude.IO (Prelude.String)
getNameVE =
  Automation.propertyGet "Name"
                         []
                         Automation.outString

setNameVE :: Prelude.String
          -> IVExtender a
          -> Prelude.IO ()
setNameVE pbstr =
  Automation.propertySet "Name"
                         [Automation.inString pbstr]

getObjectVE :: IVExtender a
            -> Prelude.IO (Com.IUnknown ())
getObjectVE =
  Automation.propertyGet "Object"
                         []
                         Automation.outIUnknown

getParentVE :: IVExtender a
            -> Prelude.IO (Com.IUnknown ())
getParentVE =
  Automation.propertyGet "Parent"
                         []
                         Automation.outIUnknown

deleteVE0 :: IVExtender a
          -> Prelude.IO ()
deleteVE0 =
  Automation.method0 "Delete"
                     []

indexVE :: IVExtender a
        -> Prelude.IO ()
indexVE =
  Automation.method0 "Index"
                     []

getShapeVE :: IVExtender a
           -> Prelude.IO (IVShape ())
getShapeVE =
  Automation.propertyGet "Shape"
                         []
                         Automation.outIDispatch

groupVE :: IVExtender a
        -> Prelude.IO ()
groupVE =
  Automation.method0 "Group"
                     []

bringForwardVE :: IVExtender a
               -> Prelude.IO ()
bringForwardVE =
  Automation.method0 "BringForward"
                     []

bringToFrontVE :: IVExtender a
               -> Prelude.IO ()
bringToFrontVE =
  Automation.method0 "BringToFront"
                     []

convertToGroupVE :: IVExtender a
                 -> Prelude.IO ()
convertToGroupVE =
  Automation.method0 "ConvertToGroup"
                     []

sendBackwardVE :: IVExtender a
               -> Prelude.IO ()
sendBackwardVE =
  Automation.method0 "SendBackward"
                     []

sendToBackVE :: IVExtender a
             -> Prelude.IO ()
sendToBackVE =
  Automation.method0 "SendToBack"
                     []

getDocumentVE :: IVExtender a
              -> Prelude.IO (IVDocument ())
getDocumentVE =
  Automation.propertyGet "Document"
                         []
                         Automation.outIDispatch

getShapeParentVE :: IVExtender a
                 -> Prelude.IO (Automation.IDispatch ())
getShapeParentVE =
  Automation.propertyGet "ShapeParent"
                         []
                         Automation.outIDispatch

applicationVE :: IVExtender a
              -> Prelude.IO (IVApplication ())
applicationVE =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getMasterVE :: IVExtender a
            -> Prelude.IO (IVMaster ())
getMasterVE =
  Automation.propertyGet "Master"
                         []
                         Automation.outIDispatch

getCellsVE :: Prelude.String
           -> IVExtender a
           -> Prelude.IO (IVCell ())
getCellsVE cellName =
  Automation.propertyGet "Cells"
                         [Automation.inString cellName]
                         Automation.outIDispatch

getCellsSRCVE :: Prelude.Int
              -> Prelude.Int
              -> Prelude.Int
              -> IVExtender a
              -> Prelude.IO (IVCell ())
getCellsSRCVE section row column =
  Automation.propertyGet "CellsSRC"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt column
                         ]
                         Automation.outIDispatch

getData1VE :: IVExtender a
           -> Prelude.IO (Prelude.String)
getData1VE =
  Automation.propertyGet "Data1"
                         []
                         Automation.outString

setData1VE :: Prelude.String
           -> IVExtender a
           -> Prelude.IO ()
setData1VE lpbstrRet =
  Automation.propertySet "Data1"
                         [Automation.inString lpbstrRet]

getData2VE :: IVExtender a
           -> Prelude.IO (Prelude.String)
getData2VE =
  Automation.propertyGet "Data2"
                         []
                         Automation.outString

setData2VE :: Prelude.String
           -> IVExtender a
           -> Prelude.IO ()
setData2VE lpbstrRet =
  Automation.propertySet "Data2"
                         [Automation.inString lpbstrRet]

getData3VE :: IVExtender a
           -> Prelude.IO (Prelude.String)
getData3VE =
  Automation.propertyGet "Data3"
                         []
                         Automation.outString

setData3VE :: Prelude.String
           -> IVExtender a
           -> Prelude.IO ()
setData3VE lpbstrRet =
  Automation.propertySet "Data3"
                         [Automation.inString lpbstrRet]

getHelpVE :: IVExtender a
          -> Prelude.IO (Prelude.String)
getHelpVE =
  Automation.propertyGet "Help"
                         []
                         Automation.outString

setHelpVE :: Prelude.String
          -> IVExtender a
          -> Prelude.IO ()
setHelpVE lpbstrRet =
  Automation.propertySet "Help"
                         [Automation.inString lpbstrRet]

getNameIDVE :: IVExtender a
            -> Prelude.IO (Prelude.String)
getNameIDVE =
  Automation.propertyGet "NameID"
                         []
                         Automation.outString

shapeCopyVE :: IVExtender a
            -> Prelude.IO ()
shapeCopyVE =
  Automation.method0 "ShapeCopy"
                     []

shapeCutVE :: IVExtender a
           -> Prelude.IO ()
shapeCutVE =
  Automation.method0 "ShapeCut"
                     []

shapeDeleteVE :: IVExtender a
              -> Prelude.IO ()
shapeDeleteVE =
  Automation.method0 "ShapeDelete"
                     []

shapeDuplicateVE :: IVExtender a
                 -> Prelude.IO ()
shapeDuplicateVE =
  Automation.method0 "ShapeDuplicate"
                     []

getRowCountVE :: Prelude.Int
              -> IVExtender a
              -> Prelude.IO (Prelude.Int)
getRowCountVE section =
  Automation.propertyGet "RowCount"
                         [Automation.inInt section]
                         Automation.outInt

addSectionVE :: Prelude.Int
             -> IVExtender a
             -> Prelude.IO (Prelude.Int)
addSectionVE section =
  Automation.function1 "AddSection"
                       [Automation.inInt section]
                       Automation.outInt

deleteSectionVE :: Prelude.Int
                -> IVExtender a
                -> Prelude.IO ()
deleteSectionVE section =
  Automation.method0 "DeleteSection"
                     [Automation.inInt section]

addRowVE :: Prelude.Int
         -> Prelude.Int
         -> Prelude.Int
         -> IVExtender a
         -> Prelude.IO (Prelude.Int)
addRowVE section row rowTag =
  Automation.function1 "AddRow"
                       [ Automation.inInt section
                       , Automation.inInt row
                       , Automation.inInt rowTag
                       ]
                       Automation.outInt

deleteRowVE :: Prelude.Int
            -> Prelude.Int
            -> IVExtender a
            -> Prelude.IO ()
deleteRowVE section row =
  Automation.method0 "DeleteRow"
                     [ Automation.inInt section
                     , Automation.inInt row
                     ]

getRowsCellCountVE :: Prelude.Int
                   -> Prelude.Int
                   -> IVExtender a
                   -> Prelude.IO (Prelude.Int)
getRowsCellCountVE section row =
  Automation.propertyGet "RowsCellCount"
                         [ Automation.inInt section
                         , Automation.inInt row
                         ]
                         Automation.outInt

getRowTypeVE :: Prelude.Int
             -> Prelude.Int
             -> IVExtender a
             -> Prelude.IO (Prelude.Int)
getRowTypeVE section row =
  Automation.propertyGet "RowType"
                         [ Automation.inInt section
                         , Automation.inInt row
                         ]
                         Automation.outInt

setRowTypeVE :: Prelude.Int
             -> Prelude.Int
             -> Prelude.Int
             -> IVExtender a
             -> Prelude.IO ()
setRowTypeVE section row lpi2Ret =
  Automation.propertySet "RowType"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt lpi2Ret
                         ]

setCenterVE :: Prelude.Double
            -> Prelude.Double
            -> IVExtender a
            -> Prelude.IO ()
setCenterVE xPos yPos =
  Automation.method0 "SetCenter"
                     [ Automation.inDouble xPos
                     , Automation.inDouble yPos
                     ]

getConnectsVE :: IVExtender a
              -> Prelude.IO (IVConnects ())
getConnectsVE =
  Automation.propertyGet "Connects"
                         []
                         Automation.outIDispatch

getShapeIndexVE :: IVExtender a
                -> Prelude.IO (Prelude.Int)
getShapeIndexVE =
  Automation.propertyGet "ShapeIndex"
                         []
                         Automation.outInt

getStyleVE :: IVExtender a
           -> Prelude.IO (Prelude.String)
getStyleVE =
  Automation.propertyGet "Style"
                         []
                         Automation.outString

setStyleVE :: Prelude.String
           -> IVExtender a
           -> Prelude.IO ()
setStyleVE lpbstrRet =
  Automation.propertySet "Style"
                         [Automation.inString lpbstrRet]

setStyleKeepFmtVE :: Prelude.String
                  -> IVExtender a
                  -> Prelude.IO ()
setStyleKeepFmtVE x0 =
  Automation.propertySet "StyleKeepFmt"
                         [Automation.inString x0]

getLineStyleVE :: IVExtender a
               -> Prelude.IO (Prelude.String)
getLineStyleVE =
  Automation.propertyGet "LineStyle"
                         []
                         Automation.outString

setLineStyleVE :: Prelude.String
               -> IVExtender a
               -> Prelude.IO ()
setLineStyleVE lpbstrRet =
  Automation.propertySet "LineStyle"
                         [Automation.inString lpbstrRet]

setLineStyleKeepFmtVE :: Prelude.String
                      -> IVExtender a
                      -> Prelude.IO ()
setLineStyleKeepFmtVE x0 =
  Automation.propertySet "LineStyleKeepFmt"
                         [Automation.inString x0]

getFillStyleVE :: IVExtender a
               -> Prelude.IO (Prelude.String)
getFillStyleVE =
  Automation.propertyGet "FillStyle"
                         []
                         Automation.outString

setFillStyleVE :: Prelude.String
               -> IVExtender a
               -> Prelude.IO ()
setFillStyleVE lpbstrRet =
  Automation.propertySet "FillStyle"
                         [Automation.inString lpbstrRet]

setFillStyleKeepFmtVE :: Prelude.String
                      -> IVExtender a
                      -> Prelude.IO ()
setFillStyleKeepFmtVE x0 =
  Automation.propertySet "FillStyleKeepFmt"
                         [Automation.inString x0]

exportVE :: Prelude.String
         -> IVExtender a
         -> Prelude.IO ()
exportVE fileName =
  Automation.method0 "Export"
                     [Automation.inString fileName]

getUniqueIDVE :: Prelude.Int
              -> IVExtender a
              -> Prelude.IO (Prelude.String)
getUniqueIDVE fUniqueID =
  Automation.propertyGet "UniqueID"
                         [Automation.inInt fUniqueID]
                         Automation.outString

getContainingPageVE :: IVExtender a
                    -> Prelude.IO (IVPage ())
getContainingPageVE =
  Automation.propertyGet "ContainingPage"
                         []
                         Automation.outIDispatch

getContainingMasterVE :: IVExtender a
                      -> Prelude.IO (IVMaster ())
getContainingMasterVE =
  Automation.propertyGet "ContainingMaster"
                         []
                         Automation.outIDispatch

getContainingShapeVE :: IVExtender a
                     -> Prelude.IO (IVShape ())
getContainingShapeVE =
  Automation.propertyGet "ContainingShape"
                         []
                         Automation.outIDispatch

getSectionExistsVE :: Prelude.Int
                   -> Prelude.Int
                   -> IVExtender a
                   -> Prelude.IO (Prelude.Int)
getSectionExistsVE section fLocalExists =
  Automation.propertyGet "SectionExists"
                         [ Automation.inInt section
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getRowExistsVE :: Prelude.Int
               -> Prelude.Int
               -> Prelude.Int
               -> IVExtender a
               -> Prelude.IO (Prelude.Int)
getRowExistsVE section row fLocalExists =
  Automation.propertyGet "RowExists"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getCellExistsVE :: Prelude.String
                -> Prelude.Int
                -> IVExtender a
                -> Prelude.IO (Prelude.Int)
getCellExistsVE cellName fLocalExists =
  Automation.propertyGet "CellExists"
                         [ Automation.inString cellName
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getCellsSRCExistsVE :: Prelude.Int
                    -> Prelude.Int
                    -> Prelude.Int
                    -> Prelude.Int
                    -> IVExtender a
                    -> Prelude.IO (Prelude.Int)
getCellsSRCExistsVE section row column fLocalExists =
  Automation.propertyGet "CellsSRCExists"
                         [ Automation.inInt section
                         , Automation.inInt row
                         , Automation.inInt column
                         , Automation.inInt fLocalExists
                         ]
                         Automation.outInt

getLayerCountVE :: IVExtender a
                -> Prelude.IO (Prelude.Int)
getLayerCountVE =
  Automation.propertyGet "LayerCount"
                         []
                         Automation.outInt

getLayerVE :: Prelude.Int
           -> IVExtender a
           -> Prelude.IO (IVLayer ())
getLayerVE index =
  Automation.propertyGet "Layer"
                         [Automation.inInt index]
                         Automation.outIDispatch

addNamedRowVE :: Prelude.Int
              -> Prelude.String
              -> Prelude.Int
              -> IVExtender a
              -> Prelude.IO (Prelude.Int)
addNamedRowVE section rowName rowTag =
  Automation.function1 "AddNamedRow"
                       [ Automation.inInt section
                       , Automation.inString rowName
                       , Automation.inInt rowTag
                       ]
                       Automation.outInt

addRowsVE :: Prelude.Int
          -> Prelude.Int
          -> Prelude.Int
          -> Prelude.Int
          -> IVExtender a
          -> Prelude.IO (Prelude.Int)
addRowsVE section row rowTag rowCount =
  Automation.function1 "AddRows"
                       [ Automation.inInt section
                       , Automation.inInt row
                       , Automation.inInt rowTag
                       , Automation.inInt rowCount
                       ]
                       Automation.outInt

eventListVE :: IVExtender a
            -> Prelude.IO (IVEventList ())
eventListVE =
  Automation.propertyGet "EventList"
                         []
                         Automation.outIDispatch

getPersistsEventsVE :: IVExtender a
                    -> Prelude.IO (Prelude.Int)
getPersistsEventsVE =
  Automation.propertyGet "PersistsEvents"
                         []
                         Automation.outInt

getClassIDVE :: IVExtender a
             -> Prelude.IO (Prelude.String)
getClassIDVE =
  Automation.propertyGet "ClassID"
                         []
                         Automation.outString

getShapeObjectVE :: IVExtender a
                 -> Prelude.IO (Automation.IDispatch ())
getShapeObjectVE =
  Automation.propertyGet "ShapeObject"
                         []
                         Automation.outIDispatch

openSheetWindowVE :: IVExtender a
                  -> Prelude.IO (IVWindow ())
openSheetWindowVE =
  Automation.function1 "OpenSheetWindow"
                       []
                       Automation.outIDispatch

getShapeIDVE :: IVExtender a
             -> Prelude.IO (Prelude.Int)
getShapeIDVE =
  Automation.propertyGet "ShapeID"
                         []
                         Automation.outInt

getFormulasVE :: SafeArray Prelude.Int
              -> IVExtender a
              -> Prelude.IO (SafeArray ())
getFormulasVE sRCStream =
  Automation.method1 "GetFormulas"
                     [inSafeArray sRCStream]
                     outSafeArray

getResultsVE :: SafeArray Prelude.Int
             -> Prelude.Int
             -> SafeArray ()
             -> IVExtender a
             -> Prelude.IO (SafeArray ())
getResultsVE sRCStream flags unitsNamesOrCodes =
  Automation.method1 "GetResults"
                     [ inSafeArray sRCStream
                     , Automation.inInt flags
                     , inSafeArray unitsNamesOrCodes
                     ]
                     outSafeArray

setFormulasVE :: SafeArray Prelude.Int
              -> SafeArray ()
              -> Prelude.Int
              -> IVExtender a
              -> Prelude.IO (Prelude.Int)
setFormulasVE sRCStream formulaArray flags =
  Automation.function1 "SetFormulas"
                       [ inSafeArray sRCStream
                       , inSafeArray formulaArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

setResultsVE :: SafeArray Prelude.Int
             -> SafeArray ()
             -> SafeArray ()
             -> Prelude.Int
             -> IVExtender a
             -> Prelude.IO (Prelude.Int)
setResultsVE sRCStream unitsNamesOrCodes resultArray flags =
  Automation.function1 "SetResults"
                       [ inSafeArray sRCStream
                       , inSafeArray unitsNamesOrCodes
                       , inSafeArray resultArray
                       , Automation.inInt flags
                       ]
                       Automation.outInt

getFromConnectsVE :: IVExtender a
                  -> Prelude.IO (IVConnects ())
getFromConnectsVE =
  Automation.propertyGet "FromConnects"
                         []
                         Automation.outIDispatch

boundingBoxVE :: Prelude.Int
              -> IVExtender a
              -> Prelude.IO (Prelude.Double, Prelude.Double, Prelude.Double, Prelude.Double)
boundingBoxVE flags =
  Automation.method4 "BoundingBox"
                     [Automation.inInt flags]
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble
                     Automation.outDouble

hitTestVE :: Prelude.Double
          -> Prelude.Double
          -> Prelude.Double
          -> IVExtender a
          -> Prelude.IO (Prelude.Int)
hitTestVE xPos yPos tolerance =
  Automation.function1 "HitTest"
                       [ Automation.inDouble xPos
                       , Automation.inDouble yPos
                       , Automation.inDouble tolerance
                       ]
                       Automation.outInt

getHyperlinkVE :: IVExtender a
               -> Prelude.IO (IVHyperlink ())
getHyperlinkVE =
  Automation.propertyGet "Hyperlink"
                         []
                         Automation.outIDispatch

getProgIDVE :: IVExtender a
            -> Prelude.IO (Prelude.String)
getProgIDVE =
  Automation.propertyGet "ProgID"
                         []
                         Automation.outString

getObjectIsInheritedVE :: IVExtender a
                       -> Prelude.IO (Prelude.Int)
getObjectIsInheritedVE =
  Automation.propertyGet "ObjectIsInherited"
                         []
                         Automation.outInt

-- --------------------------------------------------
-- 
-- coclass Layer
-- 
-- --------------------------------------------------
clsidLayer :: Com.CLSID
clsidLayer = Com.mkCLSID "{000D0A08-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Layers
-- 
-- --------------------------------------------------
clsidLayers :: Com.CLSID
clsidLayers = Com.mkCLSID "{000D0A07-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Selection
-- 
-- --------------------------------------------------
clsidSelection :: Com.CLSID
clsidSelection =
  Com.mkCLSID "{000D0A0E-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Shapes
-- 
-- --------------------------------------------------
clsidShapes :: Com.CLSID
clsidShapes = Com.mkCLSID "{000D0A09-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- interface IVGlobal
-- 
-- --------------------------------------------------
data IVGlobal_ a = IVGlobal__
                     
type IVGlobal a = Automation.IDispatch (IVGlobal_ a)
iidIVGlobal :: Com.IID (IVGlobal ())
iidIVGlobal = Com.mkIID "{000D071C-0000-0000-C000-000000000046}"

getApplicationVG :: IVGlobal a
                 -> Prelude.IO (IVApplication ())
getApplicationVG =
  Automation.propertyGet "Application"
                         []
                         Automation.outIDispatch

getActiveDocumentVG :: IVGlobal a
                    -> Prelude.IO (IVDocument ())
getActiveDocumentVG =
  Automation.propertyGet "ActiveDocument"
                         []
                         Automation.outIDispatch

getActivePageVG :: IVGlobal a
                -> Prelude.IO (IVPage ())
getActivePageVG =
  Automation.propertyGet "ActivePage"
                         []
                         Automation.outIDispatch

getActiveWindowVG :: IVGlobal a
                  -> Prelude.IO (IVWindow ())
getActiveWindowVG =
  Automation.propertyGet "ActiveWindow"
                         []
                         Automation.outIDispatch

getDocumentsVG :: IVGlobal a
               -> Prelude.IO (IVDocuments ())
getDocumentsVG =
  Automation.propertyGet "Documents"
                         []
                         Automation.outIDispatch

getWindowsVG :: IVGlobal a
             -> Prelude.IO (IVWindows ())
getWindowsVG =
  Automation.propertyGet "Windows"
                         []
                         Automation.outIDispatch

getAddonsVG :: IVGlobal a
            -> Prelude.IO (IVAddons ())
getAddonsVG =
  Automation.propertyGet "Addons"
                         []
                         Automation.outIDispatch

getVbeVG :: IVGlobal a
         -> Prelude.IO (Automation.IDispatch ())
getVbeVG =
  Automation.propertyGet "Vbe"
                         []
                         Automation.outIDispatch

-- --------------------------------------------------
-- 
-- coclass MenuItem
-- 
-- --------------------------------------------------
clsidMenuItem :: Com.CLSID
clsidMenuItem =
  Com.mkCLSID "{000D0210-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass MenuItems
-- 
-- --------------------------------------------------
clsidMenuItems :: Com.CLSID
clsidMenuItems =
  Com.mkCLSID "{000D0215-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Menu
-- 
-- --------------------------------------------------
clsidMenu :: Com.CLSID
clsidMenu = Com.mkCLSID "{000D0220-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Menus
-- 
-- --------------------------------------------------
clsidMenus :: Com.CLSID
clsidMenus = Com.mkCLSID "{000D0224-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass MenuSet
-- 
-- --------------------------------------------------
clsidMenuSet :: Com.CLSID
clsidMenuSet = Com.mkCLSID "{000D0230-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass MenuSets
-- 
-- --------------------------------------------------
clsidMenuSets :: Com.CLSID
clsidMenuSets =
  Com.mkCLSID "{000D0235-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBarItem
-- 
-- --------------------------------------------------
clsidStatusBarItem :: Com.CLSID
clsidStatusBarItem =
  Com.mkCLSID "{000D0270-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBarItems
-- 
-- --------------------------------------------------
clsidStatusBarItems :: Com.CLSID
clsidStatusBarItems =
  Com.mkCLSID "{000D0274-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBar
-- 
-- --------------------------------------------------
clsidStatusBar :: Com.CLSID
clsidStatusBar =
  Com.mkCLSID "{000D0280-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass StatusBars
-- 
-- --------------------------------------------------
clsidStatusBars :: Com.CLSID
clsidStatusBars =
  Com.mkCLSID "{000D0284-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarItem
-- 
-- --------------------------------------------------
clsidToolbarItem :: Com.CLSID
clsidToolbarItem =
  Com.mkCLSID "{000D0240-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarItems
-- 
-- --------------------------------------------------
clsidToolbarItems :: Com.CLSID
clsidToolbarItems =
  Com.mkCLSID "{000D0244-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Toolbar
-- 
-- --------------------------------------------------
clsidToolbar :: Com.CLSID
clsidToolbar = Com.mkCLSID "{000D0250-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Toolbars
-- 
-- --------------------------------------------------
clsidToolbars :: Com.CLSID
clsidToolbars =
  Com.mkCLSID "{000D0254-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarSet
-- 
-- --------------------------------------------------
clsidToolbarSet :: Com.CLSID
clsidToolbarSet =
  Com.mkCLSID "{000D0260-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ToolbarSets
-- 
-- --------------------------------------------------
clsidToolbarSets :: Com.CLSID
clsidToolbarSets =
  Com.mkCLSID "{000D0265-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass UIObject
-- 
-- --------------------------------------------------
clsidUIObject :: Com.CLSID
clsidUIObject =
  Com.mkCLSID "{000D0201-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Hyperlink
-- 
-- --------------------------------------------------
clsidHyperlink :: Com.CLSID
clsidHyperlink =
  Com.mkCLSID "{000D0A1B-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Global
-- 
-- --------------------------------------------------
clsidGlobal :: Com.CLSID
clsidGlobal = Com.mkCLSID "{000D0A1A-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Fonts
-- 
-- --------------------------------------------------
clsidFonts :: Com.CLSID
clsidFonts = Com.mkCLSID "{000D0A10-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Font
-- 
-- --------------------------------------------------
clsidFont :: Com.CLSID
clsidFont = Com.mkCLSID "{000D0A0F-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass EventList
-- 
-- --------------------------------------------------
clsidEventList :: Com.CLSID
clsidEventList =
  Com.mkCLSID "{000D0A16-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Event
-- 
-- --------------------------------------------------
clsidEvent :: Com.CLSID
clsidEvent = Com.mkCLSID "{000D0A15-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EWindows
-- 
-- --------------------------------------------------
data EWindows_ a = EWindows__
                     
type EWindows a = Automation.IDispatch (EWindows_ a)
iidEWindows :: Com.IID (EWindows ())
iidEWindows = Com.mkIID "{000D0B01-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Windows
-- 
-- --------------------------------------------------
clsidWindows :: Com.CLSID
clsidWindows = Com.mkCLSID "{000D0A0B-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EWindow
-- 
-- --------------------------------------------------
data EWindow_ a = EWindow__
                    
type EWindow a = Automation.IDispatch (EWindow_ a)
iidEWindow :: Com.IID (EWindow ())
iidEWindow = Com.mkIID "{000D0B02-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Window
-- 
-- --------------------------------------------------
clsidWindow :: Com.CLSID
clsidWindow = Com.mkCLSID "{000D0A0C-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EStyles
-- 
-- --------------------------------------------------
data EStyles_ a = EStyles__
                    
type EStyles a = Automation.IDispatch (EStyles_ a)
iidEStyles :: Com.IID (EStyles ())
iidEStyles = Com.mkIID "{000D0B05-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Styles
-- 
-- --------------------------------------------------
clsidStyles :: Com.CLSID
clsidStyles = Com.mkCLSID "{000D0A01-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EStyle
-- 
-- --------------------------------------------------
data EStyle_ a = EStyle__
                   
type EStyle a = Automation.IDispatch (EStyle_ a)
iidEStyle :: Com.IID (EStyle ())
iidEStyle = Com.mkIID "{000D0B06-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Style
-- 
-- --------------------------------------------------
clsidStyle :: Com.CLSID
clsidStyle = Com.mkCLSID "{000D0A02-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EShape
-- 
-- --------------------------------------------------
data EShape_ a = EShape__
                   
type EShape a = Automation.IDispatch (EShape_ a)
iidEShape :: Com.IID (EShape ())
iidEShape = Com.mkIID "{000D0B0B-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Extender
-- 
-- --------------------------------------------------
clsidExtender :: Com.CLSID
clsidExtender =
  Com.mkCLSID "{000D0D06-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Shape
-- 
-- --------------------------------------------------
clsidShape :: Com.CLSID
clsidShape = Com.mkCLSID "{000D0A0A-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EPages
-- 
-- --------------------------------------------------
data EPages_ a = EPages__
                   
type EPages a = Automation.IDispatch (EPages_ a)
iidEPages :: Com.IID (EPages ())
iidEPages = Com.mkIID "{000D0B09-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Pages
-- 
-- --------------------------------------------------
clsidPages :: Com.CLSID
clsidPages = Com.mkCLSID "{000D0A05-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EPage
-- 
-- --------------------------------------------------
data EPage_ a = EPage__
                  
type EPage a = Automation.IDispatch (EPage_ a)
iidEPage :: Com.IID (EPage ())
iidEPage = Com.mkIID "{000D0B0A-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Page
-- 
-- --------------------------------------------------
clsidPage :: Com.CLSID
clsidPage = Com.mkCLSID "{000D0A06-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EMasters
-- 
-- --------------------------------------------------
data EMasters_ a = EMasters__
                     
type EMasters a = Automation.IDispatch (EMasters_ a)
iidEMasters :: Com.IID (EMasters ())
iidEMasters = Com.mkIID "{000D0B07-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Masters
-- 
-- --------------------------------------------------
clsidMasters :: Com.CLSID
clsidMasters = Com.mkCLSID "{000D0A03-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EMaster
-- 
-- --------------------------------------------------
data EMaster_ a = EMaster__
                    
type EMaster a = Automation.IDispatch (EMaster_ a)
iidEMaster :: Com.IID (EMaster ())
iidEMaster = Com.mkIID "{000D0B08-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Master
-- 
-- --------------------------------------------------
clsidMaster :: Com.CLSID
clsidMaster = Com.mkCLSID "{000D0A04-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EDocuments
-- 
-- --------------------------------------------------
data EDocuments_ a = EDocuments__
                       
type EDocuments a = Automation.IDispatch (EDocuments_ a)
iidEDocuments :: Com.IID (EDocuments ())
iidEDocuments = Com.mkIID "{000D0B03-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EDocument
-- 
-- --------------------------------------------------
data EDocument_ a = EDocument__
                      
type EDocument a = Automation.IDispatch (EDocument_ a)
iidEDocument :: Com.IID (EDocument ())
iidEDocument = Com.mkIID "{000D0750-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface ECharacters
-- 
-- --------------------------------------------------
data ECharacters_ a = ECharacters__
                        
type ECharacters a = Automation.IDispatch (ECharacters_ a)
iidECharacters :: Com.IID (ECharacters ())
iidECharacters = Com.mkIID "{000D0B0C-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface ECell
-- 
-- --------------------------------------------------
data ECell_ a = ECell__
                  
type ECell a = Automation.IDispatch (ECell_ a)
iidECell :: Com.IID (ECell ())
iidECell = Com.mkIID "{000D0B0D-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface EApplication
-- 
-- --------------------------------------------------
data EApplication_ a = EApplication__
                         
type EApplication a = Automation.IDispatch (EApplication_ a)
iidEApplication :: Com.IID (EApplication ())
iidEApplication =
  Com.mkIID "{000D0B00-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Documents
-- 
-- --------------------------------------------------
clsidDocuments :: Com.CLSID
clsidDocuments =
  Com.mkCLSID "{000D0A00-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Document
-- 
-- --------------------------------------------------
clsidDocument :: Com.CLSID
clsidDocument =
  Com.mkCLSID "{00021A21-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Curve
-- 
-- --------------------------------------------------
clsidCurve :: Com.CLSID
clsidCurve = Com.mkCLSID "{000D0A20-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Control
-- 
-- --------------------------------------------------
clsidControl :: Com.CLSID
clsidControl = Com.mkCLSID "{000D0D00-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Connects
-- 
-- --------------------------------------------------
clsidConnects :: Com.CLSID
clsidConnects =
  Com.mkCLSID "{000D0A19-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Connect
-- 
-- --------------------------------------------------
clsidConnect :: Com.CLSID
clsidConnect = Com.mkCLSID "{000D0A18-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Colors
-- 
-- --------------------------------------------------
clsidColors :: Com.CLSID
clsidColors = Com.mkCLSID "{000D0A12-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Color
-- 
-- --------------------------------------------------
clsidColor :: Com.CLSID
clsidColor = Com.mkCLSID "{000D0A11-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Characters
-- 
-- --------------------------------------------------
clsidCharacters :: Com.CLSID
clsidCharacters =
  Com.mkCLSID "{000D0A17-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Cell
-- 
-- --------------------------------------------------
clsidCell :: Com.CLSID
clsidCell = Com.mkCLSID "{000D0A0D-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Application
-- 
-- --------------------------------------------------
clsidApplication :: Com.CLSID
clsidApplication =
  Com.mkCLSID "{00021A20-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Addons
-- 
-- --------------------------------------------------
clsidAddons :: Com.CLSID
clsidAddons = Com.mkCLSID "{000D0A14-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Addon
-- 
-- --------------------------------------------------
clsidAddon :: Com.CLSID
clsidAddon = Com.mkCLSID "{000D0A13-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelTables
-- 
-- --------------------------------------------------
clsidAccelTables :: Com.CLSID
clsidAccelTables =
  Com.mkCLSID "{000D02A4-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelTable
-- 
-- --------------------------------------------------
clsidAccelTable :: Com.CLSID
clsidAccelTable =
  Com.mkCLSID "{000D02A0-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelItems
-- 
-- --------------------------------------------------
clsidAccelItems :: Com.CLSID
clsidAccelItems =
  Com.mkCLSID "{000D0294-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass AccelItem
-- 
-- --------------------------------------------------
clsidAccelItem :: Com.CLSID
clsidAccelItem =
  Com.mkCLSID "{000D0290-0000-0000-C000-000000000046}"

